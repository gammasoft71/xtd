"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[96],{3905:(e,t,o)=>{o.d(t,{Zo:()=>s,kt:()=>c});var n=o(67294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var m=n.createContext({}),_=function(e){var t=n.useContext(m),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},s=function(e){var t=_(e.components);return n.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,m=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),b=_(o),c=a,p=b["".concat(m,".").concat(c)]||b[c]||u[c]||r;return o?n.createElement(p,l(l({ref:t},s),{},{components:o})):n.createElement(p,l({ref:t},s))}));function c(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,l=new Array(r);l[0]=b;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var _=2;_<r;_++)l[_]=o[_];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}b.displayName="MDXCreateElement"},33135:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>_});var n=o(87462),a=(o(67294),o(3905));const r={},l="Menus and Toolbars",i={unversionedId:"documentation/eBook/menus_and_toolbars",id:"documentation/eBook/menus_and_toolbars",title:"Menus and Toolbars",description:"A menu is one of the most visible parts of the GUI application.",source:"@site/docs/documentation/eBook/menus_and_toolbars.md",sourceDirName:"documentation/eBook",slug:"/documentation/eBook/menus_and_toolbars",permalink:"/xtd/docs/documentation/eBook/menus_and_toolbars",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Layout management",permalink:"/xtd/docs/documentation/eBook/layout_management"},next:{title:"Tetris",permalink:"/xtd/docs/documentation/eBook/tetris"}},m={},_=[{value:"In This Section",id:"in-this-section",level:2},{value:"Simple menu example",id:"simple-menu-example",level:2},{value:"Submenus",id:"submenus",level:2},{value:"Toolbars",id:"toolbars",level:2},{value:"A simple toolbar",id:"a-simple-toolbar",level:3},{value:"Toolbars",id:"toolbars-1",level:3},{value:"Toolbar at bottom",id:"toolbar-at-bottom",level:3},{value:"Toolbar anywhere",id:"toolbar-anywhere",level:3},{value:"See also",id:"see-also",level:2}],s={toc:_};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"menus-and-toolbars"},"Menus and Toolbars"),(0,a.kt)("p",null,"A menu is one of the most visible parts of the GUI application.\nIt is a group of commands located in various menus.\nWhile in console applications you had to remember all those arcane commands, here we have most of the commands grouped into logical parts.\nThere are accepted standards that further reduce the amount of time spending to learn a new application.\nTo implement a ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1form.html#a9b34052d185a980f1fa5b9d2929f241c"},"menu")," in xtd we need to have two classes: a ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1main__menu.html"},"xtd::forms::main_menu"),", and a ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1menu__item.html"},"xtd::forms::menu_item"),"."),(0,a.kt)("h2",{id:"in-this-section"},"In This Section"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#simple-menu-example"},"Simple menu example")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#submenus"},"Submenus")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#toolbars"},"Toolbars"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#a-simple-toolbar"},"A simple toolbar")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#toolbars"},"Toolbars")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#toolbar-at-bottom"},"Toolbar at bottom")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#toolbar-anywhere"},"Toolbar anywhere"))))),(0,a.kt)("h2",{id:"simple-menu-example"},"Simple menu example"),(0,a.kt)("p",null,"Creating a ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1form.html#a9b34052d185a980f1fa5b9d2929f241c"},"menu")," in xtd is very simple."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::forms;\n\nclass form1 final : public form {\npublic:\n  form1() {\n    center_to_screen();\n    menu(main_menu1);\n    size({200, 180});\n    text("Simple menu");\n  }\n\nprivate:\n  auto on_exit(object& sender, const event_args& e) noexcept -> void {\n    close();\n  }\n  \n  menu_item file_exit_menu_item {"&Quit", {*this, &form1::on_exit}, shortcut::ctrl_q};\n  menu_item file_menu_item {"&File", {file_exit_menu_item}};\n  main_menu main_menu1 {{file_menu_item}};\n};\n\nauto main() -> int {\n  application::run(form1 {});\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'menu_item file_exit_menu_item {"&Quit", {*this, &form1::on_exit}, shortcut::ctrl_q};\n')),(0,a.kt)("p",null,"We create an ",(0,a.kt)("inlineCode",{parentName:"p"},"exit")," menu item with the menu item text as the first parameter.\nThe second parameter is the event handler associated with the menu item.\nThe third parameter is the shortcut key for calling the menu item from the keyboard.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"&")," character creates an accelerator key. The character that follows the ",(0,a.kt)("inlineCode",{parentName:"p"},"&")," is underlined."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'menu_item file_menu_item {"&File", {file_exit_menu_item}};\n')),(0,a.kt)("p",null,"We create the submenu item in the file with the menu item text as the first parameter.\nThe second parameter is a vector of menu items. In this case, it contains only the ",(0,a.kt)("inlineCode",{parentName:"p"},"exit")," menu item. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"main_menu main_menu1 {file_menu_item};\n")),(0,a.kt)("p",null,"Finally, we create the main menu, which will be placed in the form's menu bar.\nIt contains the list of submenus, in this case the ",(0,a.kt)("inlineCode",{parentName:"p"},"file")," submenu."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Screenshot",src:o(75907).Z,width:"202",height:"194"})),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Figure: Simple menu example")),(0,a.kt)("h2",{id:"submenus"},"Submenus"),(0,a.kt)("p",null,"Each menu can also have a submenu.\nThis way we can group similar commands into groups.\nFor example we can place commands that hide or show various toolbars like personal bar, address bar, status bar, or navigation bar into a submenu called toolbars.\nWithin a menu, we can separate commands with a separator.\nIt is a simple line. It is common practice to separate commands like new, open, save from commands like print, print preview with a single separator.\nIn our example we see, how we can create submenus and menu separators."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::forms;\n\nclass form1 final : public form {\npublic:\n  form1() {\n    center_to_screen();\n    menu(main_menu1);\n    size({200, 180});\n    text("Submenu");\n  }\n\nprivate:\n  auto on_exit(object& sender, const event_args& e) noexcept -> void {\n    close();\n  }\n  \n  menu_item file_new_menu_item {"&New"};\n  menu_item file_open_menu_item {"Open"};\n  menu_item file_save_menu_item {"&Save"};\n  menu_item file_separator1_menu_item {"-"};\n  menu_item file_import_newsfeed_menu_item {"Import newsfeed list..."};\n  menu_item file_import_bookmarks_menu_item {"Import bookmarks..."};\n  menu_item file_import_mails_menu_item {"Import mails..."};\n  menu_item file_import_menu_item {"Import", {file_import_newsfeed_menu_item, file_import_bookmarks_menu_item, file_import_mails_menu_item}};\n  menu_item file_separator2_menu_item {"-"};\n  menu_item file_exit_menu_item {"&Quit", {*this, &form1::on_exit}, shortcut::ctrl_q};\n  menu_item file_menu_item {"&File", {file_new_menu_item, file_open_menu_item, file_save_menu_item, file_separator1_menu_item, file_import_menu_item, file_separator2_menu_item, file_exit_menu_item}};\n  main_menu main_menu1 {{file_menu_item}};\n};\n\nauto main() -> int {\n  application::run(form1 {});\n}\n')),(0,a.kt)("p",null,"We created one submenu in a file menu. It is an import submenu, which can be seen in Opera web browser."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'menu_item file_separator1_menu_item {"-"};\n')),(0,a.kt)("p",null,'A menu separator line is created calling it with "-" as text.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'  menu_item file_import_newsfeed_menu_item {"Import newsfeed list..."};\n  menu_item file_import_bookmarks_menu_item {"Import bookmarks..."};\n  menu_item file_import_mails_menu_item {"Import mails..."};\n  menu_item file_import_menu_item {"Import", {file_import_newsfeed_menu_item, file_import_bookmarks_menu_item, file_import_mails_menu_item}};\n')),(0,a.kt)("p",null,"A submenu is created in the same way as a normal menu. Items are added as a second parameter as a menu_item vector."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Screenshot",src:o(72811).Z,width:"416",height:"247"})),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Figure: Submenu")),(0,a.kt)("h2",{id:"toolbars"},"Toolbars"),(0,a.kt)("p",null,"Menus group all commands that we can use in an application. Toolbars provide a quick access to the most frequently used commands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"xtd::forms::tool_bar xtd::forms::tool_bar::create(...);\n")),(0,a.kt)("p",null,"To create a system toolbar, we call the ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1form.html#a2745bb47e63653ddccb5893db2cf2e39"},"xtd::forms::form::tool_bar")," method of the ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1form.html"},"xtd::forms::form")," control."),(0,a.kt)("h3",{id:"a-simple-toolbar"},"A simple toolbar"),(0,a.kt)("p",null,"Our first example will create a simple toolbar."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::forms;\n\nclass form1 final : public form {\npublic:\n  form1() {\n    center_to_screen();\n    text("Toolbar");\n    tool_bar(tool_bar1);\n\n    tool_bar1.button_click += {*this, &form1::on_tool_bar_button_click};\n  }\n\nprivate:\n  auto on_tool_bar_button_click(object& sender, const tool_bar_button_click_event_args& e) noexcept -> void {\n    if (e.button() == exit_tool_bar_button) close();\n  }\n  \n  tool_bar_button exit_tool_bar_button = tool_bar_button::create_push_button(0);\n  forms::tool_bar tool_bar1 = forms::tool_bar::create(*this, {tool_bar_images::file_exit()}, {exit_tool_bar_button});\n};\n\nauto main() -> int {\n  application::run(form1 {});\n}\n')),(0,a.kt)("p",null,"In our example, we create a toolbar and one tool button. Clicking on the toolbar button will terminate the application."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"tool_bar_button exit_tool_bar_button = tool_bar_button::create_push_button(0);\n")),(0,a.kt)("p",null,"We create a toolbar button."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"forms::tool_bar tool_bar1 = forms::tool_bar::create(*this, {tool_bar_images::file_exit()}, {exit_tool_bar_button});\n")),(0,a.kt)("p",null,"We create a toolbar and adding ",(0,a.kt)("inlineCode",{parentName:"p"},"exit")," toolbar button."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"tool_bar(tool_bar1);\n")),(0,a.kt)("p",null,"We add the toolbar we've created as the form's system toolbar."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Screenshot",src:o(50787).Z,width:"412",height:"432"})),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Figure: Toolbar")),(0,a.kt)("h3",{id:"toolbars-1"},"Toolbars"),(0,a.kt)("p",null,"If we want to have more than one toolbar, only one of the toolbars can be associated as the form's system toolbar. The other toolbars will be secondary toolbars that can be placed at the top, bottom, left or right of the form using the ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1tool__bar.html#af25fbe68eefb148e22e3d26173a33e73"},"xtd::forms::tool_bar::dock")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::forms;\n\nclass form1 final : public form {\npublic:\n  form1() {\n    center_to_screen();\n    text("Toolbar");\n    tool_bar(tool_bar1);\n\n    tool_bar1.button_click += {*this, &form1::on_tool_bar_button_click};\n    tool_bar2.button_click += {*this, &form1::on_tool_bar_button_click};\n  }\n\nprivate:\n  auto on_tool_bar_button_click(object& sender, const tool_bar_button_click_event_args& e) noexcept -> void {\n    if (e.button() == exit_tool_bar_button) close();\n  }\n  \n  tool_bar_button exit_tool_bar_button = tool_bar_button::create_push_button(0);\n  forms::tool_bar tool_bar1 = forms::tool_bar::create(*this, {tool_bar_images::file_exit()}, {exit_tool_bar_button});\n  tool_bar_button new_tool_bar_button = tool_bar_button::create_push_button(0);\n  tool_bar_button open_tool_bar_button = tool_bar_button::create_push_button(1);\n  tool_bar_button save_tool_bar_button = tool_bar_button::create_push_button(2);\n  forms::tool_bar tool_bar2 = forms::tool_bar::create(*this, {tool_bar_images::file_new(), tool_bar_images::file_open(), tool_bar_images::file_save()}, {new_tool_bar_button, open_tool_bar_button, save_tool_bar_button});\n};\n\nauto main() -> int {\n  application::run(form1 {});\n}\n')),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Screenshot",src:o(15350).Z,width:"412",height:"432"})),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Figure: Toolbars")),(0,a.kt)("h3",{id:"toolbar-at-bottom"},"Toolbar at bottom"),(0,a.kt)("p",null,"A toolbar can be placed on any border of the form or at any coordinate.\nSimply use the dock property of the toolbar."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::forms;\n\nclass form1 final : public form {\npublic:\n  form1() {\n    center_to_screen();\n    text("Toolbar on bottom");\n    tool_bar(tool_bar1);\n\n    tool_bar1.button_click += {*this, &form1::on_tool_bar_button_click};\n    tool_bar2.button_click += {*this, &form1::on_tool_bar_button_click};\n    tool_bar2.dock(dock_style::bottom);\n  }\n\nprivate:\n  auto on_tool_bar_button_click(object& sender, const tool_bar_button_click_event_args& e) noexcept -> void {\n    if (e.button() == exit_tool_bar_button) close();\n  }\n  \n  tool_bar_button exit_tool_bar_button = tool_bar_button::create_push_button(0);\n  forms::tool_bar tool_bar1 = forms::tool_bar::create(*this, {tool_bar_images::file_exit()}, {exit_tool_bar_button});\n  tool_bar_button new_tool_bar_button = tool_bar_button::create_push_button(0);\n  tool_bar_button open_tool_bar_button = tool_bar_button::create_push_button(1);\n  tool_bar_button save_tool_bar_button = tool_bar_button::create_push_button(2);\n  forms::tool_bar tool_bar2 = forms::tool_bar::create(*this, {tool_bar_images::file_new(), tool_bar_images::file_open(), tool_bar_images::file_save()}, {new_tool_bar_button, open_tool_bar_button, save_tool_bar_button});\n};\n\nauto main() -> int {\n  application::run(form1 {});\n}\n')),(0,a.kt)("p",null,"In this example, the toolbar is placed at the bottom of the form."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"tool_bar2.dock(dock_style::bottom);\n")),(0,a.kt)("p",null,"We set the dock property to xtd::formq::dock_style::button."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Screenshot",src:o(52504).Z,width:"412",height:"432"})),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Figure: Toolbar at bottom")),(0,a.kt)("h3",{id:"toolbar-anywhere"},"Toolbar anywhere"),(0,a.kt)("p",null,"To place the toolbar anywhere on the form, simply change the dock property to xtd::formq::dock_style::none and modify the toolbar location.\nThe toolbar behaves exactly like any other control, except that it can be a system toolbar."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::forms;\n\nclass form1 final : public form {\npublic:\n  form1() {\n    center_to_screen();\n    text("Toolbar anywhere");\n    tool_bar(tool_bar1);\n\n    tool_bar1.button_click += {*this, &form1::on_tool_bar_button_click};\n    tool_bar2.button_click += {*this, &form1::on_tool_bar_button_click};\n    tool_bar2.dock(dock_style::none);\n    tool_bar2.location({80, 100});\n  }\n\nprivate:\n  auto on_tool_bar_button_click(object& sender, const tool_bar_button_click_event_args& e) noexcept -> void {\n    if (e.button() == exit_tool_bar_button) close();\n  }\n  \n  tool_bar_button exit_tool_bar_button = tool_bar_button::create_push_button(0);\n  forms::tool_bar tool_bar1 = forms::tool_bar::create(*this, {tool_bar_images::file_exit()}, {exit_tool_bar_button});\n  tool_bar_button new_tool_bar_button = tool_bar_button::create_push_button(0);\n  tool_bar_button open_tool_bar_button = tool_bar_button::create_push_button(1);\n  tool_bar_button save_tool_bar_button = tool_bar_button::create_push_button(2);\n  forms::tool_bar tool_bar2 = forms::tool_bar::create(*this, {tool_bar_images::file_new(), tool_bar_images::file_open(), tool_bar_images::file_save()}, {new_tool_bar_button, open_tool_bar_button, save_tool_bar_button});\n};\n\nauto main() -> int {\n  application::run(form1 {});\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"tool_bar2.dock(dock_style::none);\ntool_bar2.location({80, 100});\n")),(0,a.kt)("p",null,"We set the dock property to none and set the location to 80 pixels to the left and 100 pixels to the top."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Screenshot",src:o(15214).Z,width:"412",height:"432"})),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Figure: Toolbar anywhere")),(0,a.kt)("p",null,"In this part of the xtd tutorial, we have covered menus and toolbars."),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/documentation/eBook"},"eBook"))))}u.isMDXComponent=!0},75907:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/simple_menu-3808c555f565ce96004c722a9cc16878.png"},72811:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/submenu-af793b11b248dcddf73c6c8f6ff8b966.png"},50787:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/toolbar-de6b1d99ece1602bdb6def35297cffd3.png"},15214:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/toolbar_anywhere-1c4a53e6191e956eb2c76e175d9a3b47.png"},52504:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/toolbar_at_bottom-f38298a76469891b17ec0a793c2b61a5.png"},15350:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/toolbars-8f3abd48dbb227ee9674ebb8e3d3de2f.png"}}]);