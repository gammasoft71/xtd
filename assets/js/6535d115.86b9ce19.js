"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[6309],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},l=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(r),m=o,v=l["".concat(c,".").concat(m)]||l[m]||u[m]||i;return r?n.createElement(v,a(a({ref:t},d),{},{components:r})):n.createElement(v,a({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=l;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}l.displayName="MDXCreateElement"},32975:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const i={},a="Parse strings in xtd",s={unversionedId:"documentation/Guides/xtd.core/Parse/overview",id:"documentation/Guides/xtd.core/Parse/overview",title:"Parse strings in xtd",description:"A parsing operation converts a string that represents a xtd base type into that base type.",source:"@site/docs/documentation/Guides/xtd.core/Parse/overview.md",sourceDirName:"documentation/Guides/xtd.core/Parse",slug:"/documentation/Guides/xtd.core/Parse/overview",permalink:"/xtd/docs/documentation/Guides/xtd.core/Parse/overview",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Parsing Other Strings in xtd",permalink:"/xtd/docs/documentation/Guides/xtd.core/Parse/other_strings"},next:{title:"Type conversion in xtd",permalink:"/xtd/docs/documentation/Guides/xtd.core/Types overview/Type conversion/overview"}},c={},p=[{value:"In This Section",id:"in-this-section",level:2},{value:"Related Sections",id:"related-sections",level:2}],d={toc:p};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"parse-strings-in-xtd"},"Parse strings in xtd"),(0,o.kt)("p",null,"A parsing operation converts a string that represents a xtd base type into that base type.\nFor example, a parsing operation is used to convert a string to a floating-point number or to a date-and-time value.\nThe method most commonly used to perform a parsing operation is the ",(0,o.kt)("inlineCode",{parentName:"p"},"parse")," method.\nBecause parsing is the reverse operation of formatting (which involves converting a base type into its string representation), many of the same rules and conventions apply.\nJust as formatting uses an object that implements the IFormatProvider interface to provide culture-sensitive formatting information, parsing also uses an object that implements the IFormatProvider interface to determine how to interpret a string representation.\nFor more information, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Format%20number%20dates%20other%20types/overview"},"Format types"),"."),(0,o.kt)("h2",{id:"in-this-section"},"In This Section"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Parse/numeric_strings"},"Parsing Numeric Strings")," Describes how to convert strings into .NET numeric types."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Parse/date_and_time_strings"},"Parsing Date and Time Strings")," Describes how to convert strings into .NET DateTime types."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Parse/other_strings"},"Parsing Other Strings")," Describes how to convert strings into Char, Boolean, and Enum types."),(0,o.kt)("h2",{id:"related-sections"},"Related Sections"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Format%20number%20dates%20other%20types/overview"},"Formatting Types")," Describes basic formatting concepts like format specifiers and format providers."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Types%20overview/Type%20conversion/overview"},"Type Conversion in xtd")," Describes how to convert types."),(0,o.kt)("h1",{id:"see-also"},"See also"),(0,o.kt)("p",null,"\u200b"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/documentation/Guides/Overview/Tutorials"},"Tutorials")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}u.isMDXComponent=!0}}]);