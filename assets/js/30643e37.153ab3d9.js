"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[3017],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>p});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),i=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),u=i(n),p=r,_=u["".concat(c,".").concat(p)]||u[p]||h[p]||o;return n?a.createElement(_,s(s({ref:t},l),{},{components:n})):a.createElement(_,s({ref:t},l))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var d={};for(var c in t)hasOwnProperty.call(t,c)&&(d[c]=t[c]);d.originalType=e,d.mdxType="string"==typeof e?e:r,s[1]=d;for(var i=2;i<o;i++)s[i]=n[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},55793:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>i});var a=n(87462),r=(n(67294),n(3905));const o={},s="Raise and consume events",d={unversionedId:"documentation/Guides/xtd.core/Events/raise_and_consume_events",id:"documentation/Guides/xtd.core/Events/raise_and_consume_events",title:"Raise and consume events",description:"The examples in this topic show how to work with events.",source:"@site/docs/documentation/Guides/xtd.core/Events/raise_and_consume_events.md",sourceDirName:"documentation/Guides/xtd.core/Events",slug:"/documentation/Guides/xtd.core/Events/raise_and_consume_events",permalink:"/xtd/docs/documentation/Guides/xtd.core/Events/raise_and_consume_events",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Handle and raise events",permalink:"/xtd/docs/documentation/Guides/xtd.core/Events/overview"},next:{title:"How to create user-defined exception (xtd.core)",permalink:"/xtd/docs/documentation/Guides/xtd.core/Exceptions/How-tos/create_user_defined_exceptions"}},c={},i=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2}],l={toc:i};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"raise-and-consume-events"},"Raise and consume events"),(0,r.kt)("p",null,"The examples in this topic show how to work with events.\nThey include examples of the ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga0b1801aa17fa22ddacfdcccd7b25316b"},"xtd::event_handler")," delegate, the ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga531b610b74cb14c6047fb0843ab686b4"},"xtd::generic_event_handler<event_args_t>")," delegate, and a custom delegate, to illustrate events with and without data."),(0,r.kt)("p",null,"The examples use concepts described in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Events/overview"},"events")," article."),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("p",null,"The first example shows how to raise and consume an event that doesn't have data.\nIt contains a class named ",(0,r.kt)("inlineCode",{parentName:"p"},"counter")," that has an event named ",(0,r.kt)("inlineCode",{parentName:"p"},"threshold_reached"),".\nThis event is raised when a counter value equals or exceeds a threshold value.\nThe ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga0b1801aa17fa22ddacfdcccd7b25316b"},"xtd::event_handler")," delegate is associated with the event, because no event data is provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nnamespace console_application1 {\n  class counter : public object {\n  private:\n    int threshold;\n    int total;\n    \n  public:\n    counter(int passed_threshold) {\n      threshold = passed_threshold;\n    }\n    \n    void add(int x) {\n      total += x;\n      if (total >= threshold) {\n        if (!threshold_reached.is_empty()) threshold_reached.invoke(*this, event_args::empty);\n      }\n    }\n    \n    event<counter, event_handler> threshold_reached;\n  };\n\n  class program {\n  public:\n    static auto main(const argument_collection& args) {\n      counter c(xtd::random().next(10));\n      c.threshold_reached += c_threshold_reached;\n      \n      console::write_line("press \'a\' key to increase total");\n      while (console::read_key(true).key_char() == \'a\') {\n        console::write_line("adding one");\n        c.add(1);\n      }\n    }\n    \n    static void c_threshold_reached(object& sender, const event_args& e) {\n      console::write_line("The threshold was reached.");\n      environment::exit(0);\n    }\n  };\n}\n\nstartup_(console_application1::program::main);\n')),(0,r.kt)("h2",{id:"example-2"},"Example 2"),(0,r.kt)("p",null,"The next example shows how to raise and consume an event that provides data.\nThe ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga531b610b74cb14c6047fb0843ab686b4"},"xtd::generic_event_handler<event_args_t>")," delegate is associated with the event, and an instance of a custom event data object is provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nnamespace console_application1 {\n  class threshold_reached_event_args : public xtd::event_args {\n  public:\n    int threshold() const {return threshold_;}\n    void threshold(int value) {threshold_ = value;}\n    \n    const date_time& time_reached() const {return time_reached_;}\n    void time_reached(const datte_time& value) {time_reached_ = value;}\n    \n  private:\n    int threshold_ = 0;\n    date_time time_reached_;\n  };\n\n  class counter : public object {\n  private:\n    int threshold;\n    int total;\n    \n  public:\n    counter(int passed_threshold) {\n      threshold = passed_threshold;\n    }\n    \n    void add(int x) {\n      total += x;\n      if (total >= threshold) {\n        threshold_reached_event_args args;\n        args.threshold(threshold);\n        args.time_reached(date_time::now());\n        on_threshold_reached(args);\n      }\n    }\n    \n  protected:\n    virtual void on_threshold_reached(const threshold_reached_event_args& e) {\n      generic_event_handler<const threshold_reached_event_args&> handler = threshold_reached;\n      if (!handler.is_empty()) {\n        handler(*this, e);\n      }\n    }\n    \n  public:\n    event<counter, generic_event_handler<const threshold_reached_event_args&>> threshold_reached;\n  };\n\n  class program {\n  public:\n    static auto main(const argument_collection& args) {\n      counter c(xtd::random().next(10));\n      c.threshold_reached += c_threshold_reached;\n      \n      console::write_line("press \'a\' key to increase total");\n      while (console::read_key(true).key_char() == \'a\') {\n        console::write_line("adding one");\n        c.add(1);\n      }\n    }\n    \n    static void c_threshold_reached(object& sender, const threshold_reached_event_args& e) {\n      console::write_line("The threshold of {0} was reached at {1}.", e.threshold(),  e.time_reached());\n      environment::exit(0);\n    }\n  };\n}\n\nstartup_(console_application1::program::main);\n')),(0,r.kt)("h2",{id:"example-3"},"Example 3"),(0,r.kt)("p",null,"The next example shows how to declare a delegate for an event.\nThe delegate is named ",(0,r.kt)("inlineCode",{parentName:"p"},"threshold_reached_event_handler"),".\nThis is just an illustration. Typically, you do not have to declare a delegate for an event, because you can use either the ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga0b1801aa17fa22ddacfdcccd7b25316b"},"xtd::event_handler")," or the ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga531b610b74cb14c6047fb0843ab686b4"},"xtd::generic_event_handler<event_args_t>")," delegate.\nYou should declare a delegate only in rare scenarios, such as making your class available to legacy code that cannot use generics."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nnamespace console_application1 {\n  class threshold_reached_event_args : public xtd::event_args {\n  public:\n    int threshold() const {return threshold_;}\n    void threshold(int value) {threshold_ = value;}\n    \n    const date_time& time_reached() const {return time_reached_;}\n    void time_reached(coonst date_time& value) {time_reached_ = value;}\n    \n  private:\n    int threshold_ = 0;\n    date_time time_reached_;\n  };\n  \n  using threshold_reached_event_handler = delegate<void(object&, const threshold_reached_event_args&)>;\n\n  class counter : public object {\n  private:\n    int threshold;\n    int total;\n    \n  public:\n    counter(int passed_threshold) {\n      threshold = passed_threshold;\n    }\n    \n    void add(int x) {\n      total += x;\n      if (total >= threshold) {\n        threshold_reached_event_args args;\n        args.threshold(threshold);\n        args.time_reached(date_time::now());\n        on_threshold_reached(args);\n      }\n    }\n    \n  protected:\n    virtual void on_threshold_reached(const threshold_reached_event_args& e) {\n      generic_event_handler<const threshold_reached_event_args&> handler = threshold_reached;\n      if (!handler.is_empty()) {\n        handler(*this, e);\n      }\n    }\n    \n  public:\n    threshold_reached_event_handler threshold_reached;\n  };\n\n  class program {\n  public:\n    static auto main(const argument_collection& args) {\n      counter c(xtd::random().next(10));\n      c.threshold_reached += c_threshold_reached;\n      \n      console::write_line("press \'a\' key to increase total");\n      while (console::read_key(true).key_char() == \'a\') {\n        console::write_line("adding one");\n        c.add(1);\n      }\n    }\n    \n    static void c_threshold_reached(object& sender, const threshold_reached_event_args& e) {\n      console::write_line("The threshold of {0} was reached at {1}.", e.threshold(),  e.time_reached());\n      environment::exit(0);\n    }\n  };\n}\n\nstartup_(console_application1::program::main);\n')),(0,r.kt)("h1",{id:"see-also"},"See also"),(0,r.kt)("p",null,"\u200b"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/documentation/Guides"},"Guides")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}h.isMDXComponent=!0}}]);