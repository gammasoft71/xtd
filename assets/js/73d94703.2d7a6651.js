"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[2072],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),s=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=s(r),d=n,f=u["".concat(c,".").concat(d)]||u[d]||p[d]||a;return r?o.createElement(f,l(l({ref:t},m),{},{components:r})):o.createElement(f,l({ref:t},m))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},48971:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=r(87462),n=(r(67294),r(3905));const a={},l="Ambient properties",i={unversionedId:"documentation/Guides/xtd.forms/Overview/ambient_properties",id:"documentation/Guides/xtd.forms/Overview/ambient_properties",title:"Ambient properties",description:"In This Section",source:"@site/docs/documentation/Guides/xtd.forms/Overview/ambient_properties.md",sourceDirName:"documentation/Guides/xtd.forms/Overview",slug:"/documentation/Guides/xtd.forms/Overview/ambient_properties",permalink:"/xtd/docs/documentation/Guides/xtd.forms/Overview/ambient_properties",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Events overview (xtd.forms)",permalink:"/xtd/docs/documentation/Guides/xtd.forms/Forms/event_handlers"},next:{title:"Application overview",permalink:"/xtd/docs/documentation/Guides/xtd.forms/Overview/application_overview"}},c={},s=[{value:"In This Section",id:"in-this-section",level:2},{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:3},{value:"See also",id:"see-also",level:2}],m={toc:s};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"ambient-properties"},"Ambient properties"),(0,n.kt)("h2",{id:"in-this-section"},"In This Section"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#overview"},"Overview"))),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"An ambient property is a property on a control that, if not set, is retrieved from the parent control. "),(0,n.kt)("p",null,"If the control does not have a parent and the property is not set, the control sets the ambient property with its own default value."),(0,n.kt)("p",null,"Some objects derived from the ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1control.html"},"xtd::forms::control")," class might set the property even if you do not. "),(0,n.kt)("p",null,"For example, the ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1form.html"},"xtd::forms::form")," class always sets the ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1control.html"},"xtd::forms::control::fore_color")," and ",(0,n.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1control.html"},"xtd::forms::control::back_color")," properties."),(0,n.kt)("p",null,"List of ambient properties :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1control.html"},"xtd::forms::control::back_color")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1control.html"},"xtd::forms::control::cursor")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1control.html"},"xtd::forms::control::font")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1control.html"},"xtd::forms::control::fore_color")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1control.html"},"xtd::forms::control::right_to_left"))),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("p",null,"The following example shows the back_color and fore_color ambient properties in action :"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::drawing;\nusing namespace xtd::forms;\n\nclass main_form : public form {\npublic:\n  main_form() {\n    controls().push_back_range({change_color_button, label1, label2});\n    client_size({400, 200});\n  \n    change_color_button.auto_size(true);\n    change_color_button.location({10, 10});\n    change_color_button.text("Change color");\n    change_color_button.click += [&] {\n      back_color(color::from_argb(rand.next<uint8>(), rand.next<uint8>(), rand.next<uint8>()));\n      fore_color(color::from_argb(rand.next<uint8>(), rand.next<uint8>(), rand.next<uint8>()));\n      label1.text(string::format("back_color = {}\\nfore_color = {}", label1.back_color(), label1.fore_color()));\n      label2.text(string::format("back_color = {}\\nfore_color = {}", label2.back_color(), label2.fore_color()));\n    };\n    \n    label1.auto_size(true);\n    label1.location({10, 50});\n    label1.text(string::format("back_color = {}\\nfore_color = {}", label1.back_color(), label1.fore_color()));\n    \n    label2.auto_size(true);\n    label2.back_color(color::dark_cyan);\n    label2.fore_color(color::black);\n    label2.location({10, 110});\n    label2.text(string::format("back_color = {}\\nfore_color = {}", label2.back_color(), label2.fore_color()));\n  }\n  \nprivate:\n  xtd::random rand;\n  button change_color_button;\n  label label1;\n  label label2;\n};\n\nauto main() -> int {\n  application::run(main_form());\n}\n')),(0,n.kt)("h2",{id:"see-also"},"See also"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/documentation/Guides"},"Guides")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}p.isMDXComponent=!0}}]);