"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[6508],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(67294);function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,u=function(e,t){if(null==e)return{};var n,a,u={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(u[n]=e[n]);return u}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(u[n]=e[n])}return u}var o=a.createContext({}),i=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=i(e.components);return a.createElement(o.Provider,{value:t},e.children)},_={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,u=e.mdxType,r=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=i(n),c=u,d=p["".concat(o,".").concat(c)]||p[c]||_[c]||r;return n?a.createElement(d,l(l({ref:t},m),{},{components:n})):a.createElement(d,l({ref:t},m))}));function c(e,t){var n=arguments,u=t&&t.mdxType;if("string"==typeof e||u){var r=n.length,l=new Array(r);l[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:u,l[1]=s;for(var i=2;i<r;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2266:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>_,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var a=n(87462),u=(n(67294),n(3905));const r={},l="enum, enum class and enum struct",s={unversionedId:"documentation/Guides/xtd.core/Types overview/enum_class",id:"documentation/Guides/xtd.core/Types overview/enum_class",title:"enum, enum class and enum struct",description:"In This section",source:"@site/docs/documentation/Guides/xtd.core/Types overview/enum_class.md",sourceDirName:"documentation/Guides/xtd.core/Types overview",slug:"/documentation/Guides/xtd.core/Types overview/enum_class",permalink:"/xtd/docs/documentation/Guides/xtd.core/Types overview/enum_class",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Delegates",permalink:"/xtd/docs/documentation/Guides/xtd.core/Types overview/delegates"},next:{title:"Events",permalink:"/xtd/docs/documentation/Guides/xtd.core/Types overview/events"}},o={},i=[{value:"In This section",id:"in-this-section",level:2},{value:"Overview",id:"overview",level:2},{value:"External libraries",id:"external-libraries",level:2},{value:"Examples",id:"examples",level:3},{value:"xtd::enum_register",id:"xtdenum_register",level:2},{value:"Note",id:"note",level:3},{value:"Examples",id:"examples-1",level:3},{value:"xtd::enum_set_attribute",id:"xtdenum_set_attribute",level:2},{value:"flags_attribute_",id:"flags_attribute_",level:3},{value:"Warning",id:"warning",level:4},{value:"Format",id:"format",level:2},{value:"Note",id:"note-1",level:3},{value:"Parse",id:"parse",level:2},{value:"Introspection",id:"introspection",level:2},{value:"Warning",id:"warning-1",level:3},{value:"enum_",id:"enum_",level:3},{value:"enum_ut_",id:"enum_ut_",level:3},{value:"enum_class_",id:"enum_class_",level:3},{value:"enum_class_ut_",id:"enum_class_ut_",level:3},{value:"enum_struct_",id:"enum_struct_",level:3},{value:"enum_struct_ut_",id:"enum_struct_ut_",level:3}],m={toc:i};function _(e){let{components:t,...n}=e;return(0,u.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h1",{id:"enum-enum-class-and-enum-struct"},"enum, enum class and enum struct"),(0,u.kt)("h2",{id:"in-this-section"},"In This section"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#overview"},"Overview")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#external-libraries"},"External libraries")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#xtd-enum-register"},"xtd::enum_register")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#xtd-enum_set-attribute"},"xtd::enum_set_attribute")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#format"},"Format")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#parse"},"Parse")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"#introspection"},"Introspection"))),(0,u.kt)("h2",{id:"overview"},"Overview"),(0,u.kt)("p",null,'An enumeration is a distinct type whose value is restricted to a range of values (see below for details), which may include several explicitly named constants ("enumerators"). The values of the constants are values of an integral type known as the underlying type of the enumeration.\nFor more information about c++ enumeration see ',(0,u.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/enum"},"Enumeration declaration"),"."),(0,u.kt)("p",null,(0,u.kt)("inlineCode",{parentName:"p"},"enum"),", ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class")," and ",(0,u.kt)("inlineCode",{parentName:"p"},"enum struct")," in c++11 have two problems:"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"Displaying in a string the name of the enum value either for debugging or simply to qualify some values as for example in ",(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1drawing_1_1color.html#a0b74e93ea5582716bde7104b84177a77"},"xtd::drawing::color::name"),"."),(0,u.kt)("li",{parentName:"ul"},"There is no flags attribute. You have to add the bitwise operators for each ",(0,u.kt)("inlineCode",{parentName:"li"},"enum"),", ",(0,u.kt)("inlineCode",{parentName:"li"},"enum class")," or ",(0,u.kt)("inlineCode",{parentName:"li"},"enum struct"),". Enum flags pose an additional problem for displaying the value names in a string due to bitwise flags.")),(0,u.kt)("h2",{id:"external-libraries"},"External libraries"),(0,u.kt)("p",null,"Several external libraries solve theses problems with elegance. Here is a non-exhaustive list:"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://github.com/aantron/better-enums"},"better_enums")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://github.com/BlackMATov/enum.hpp"},"enum.hpp")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://github.com/Neargye/magic_enum"},"magic_enum")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://github.com/codeinred/nav"},"nav")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://github.com/quicknir/wise_enum"},"wise_enum")),(0,u.kt)("li",{parentName:"ul"},"And probably still others...")),(0,u.kt)("p",null,"In the context of xtd, after testing these different external libraries, none of them was chosen for various reasons such as limitations and others."),(0,u.kt)("p",null,"xtd has therefore its own enumeration management"),(0,u.kt)("p",null,"This does not prevent you, of course, from using them in your own projects. As xtd is non-intrusive, you can easily combine them with xtd and with some xtd enum class definitions (if the limitations of the library do not prevent this)."),(0,u.kt)("h3",{id:"examples"},"Examples"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://github.com/Neargye/magic_enum"},"magic_enum"))),(0,u.kt)("p",null,"The following code shows how to use ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class")," with magic_enum and xtd:"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <magic_enum/magic_enum.hpp>\n#include <xtd/xtd>\n\nusing namespace magic_enum;\nusing namespace xtd;\n\nenum class enum_test {\n  value_one,\n  value_two,\n  value_three,\n  value_four\n};\n\nauto main() -> int {\n  console::write_line("name = {}", enum_name<enum_test>(enum_test::value_four));\n  console::write_line("value = {}", enum_integer<enum_test>(enum_test::value_four));\n  console::write_line("as<int> = {}", as<int>(enum_test::value_four));\n  console::write_line("values = [{}]", string::join(", ", enum_values<enum_test>()));\n  console::write_line("names = {}", enum_names<enum_test>());\n  console::write("entries = [");\n  for (auto entry : enum_entries<enum_test>()) {\n    static auto index = 0;\n    console::write("{}({}, {})", index++ == 0 ? "" : ", ", as<int>(entry.first), entry.second);\n  }\n  console::write_line("]");\n}\n')),(0,u.kt)("p",null,"Output :"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"name = value_four\nvalue = 3\nas<int> = 3\nvalues = [0, 1, 2, 3]\nnames = [value_one, value_two, value_three, value_four]\nentries = [(0, value_one), (1, value_two), (2, value_three), (3, value_four)]\n")),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://github.com/codeinred/nav"},"nav")," with xtd")),(0,u.kt)("p",null,"The following code shows how to use ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class")," with nav and xtd:"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <nav/nav_core.hpp>\n#include <xtd/xtd>\n\nusing namespace nav;\nusing namespace xtd;\n\nnav_declare_enum(enum_test, int,\n  value_one,\n  value_two,\n  value_three,\n  value_four\n);\n\nauto main() -> int {\n  console::write_line("name = {}", enum_test::value_four);\n  console::write_line("as<int> = {}", as<int>(enum_test::value_four));\n  console::write_line("values = {}", string::join(", ", enum_values<enum_test>));\n  console::write_line("names = {}", string::join(", ", enum_names<enum_test>));\n  console::write("entries = [");\n  for (size_t num_state = 0; num_state < num_states<enum_test>; ++num_state)\n    console::write("{}({}, {})", num_state == 0 ? "" : ", ", enum_values<enum_test>[num_state], enum_names<enum_test>[num_state]);\n  console::write_line("]");\n}\n')),(0,u.kt)("p",null,"Output :"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"name = 3\nas<int> = 3\nvalues = 0, 1, 2, 3\nnames = value_one, value_two, value_three, value_four\nentries = [(0, value_one), (1, value_two), (2, value_three), (3, value_four)]\n")),(0,u.kt)("h2",{id:"xtdenum_register"},"xtd::enum_register"),(0,u.kt)("p",null,"xtd can introspect ",(0,u.kt)("inlineCode",{parentName:"p"},"enum"),", ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class")," and ",(0,u.kt)("inlineCode",{parentName:"p"},"enum struct")," with ",(0,u.kt)("a",{parentName:"p",href:"#introspection"},"introspection helper macros")," or simply register the ",(0,u.kt)("inlineCode",{parentName:"p"},"enum")," class with the ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/structxtd_1_1enum__register.html"},"xtd::enum_register")," class.\nThe advantage is that it has no limitation and the disadvantage is that it is more verbose."),(0,u.kt)("h3",{id:"note"},"Note"),(0,u.kt)("p",null,"  If in your own project you do not register your ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class"),", there is no problem you can use it normally.\nBut when you want to display the value of the ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class"),", it will always be displayed as an integer value and you can't do any parsing on it."),(0,u.kt)("h3",{id:"examples-1"},"Examples"),(0,u.kt)("p",null,"The following code shows how to use ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class")," with ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/structxtd_1_1enum__register.html"},"xtd::enum_register"),":"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nenum class enum_test {\n  value_one,\n  value_two,\n  value_three,\n  value_four\n};\n\ntemplate<> struct xtd::enum_register<enum_test> {\n  explicit operator auto() const noexcept {return xtd::enum_collection<enum_test> {{enum_test::value_one,  "value_one"}, {enum_test::value_two,  "value_two"}, {enum_test::value_three,  "value_three"}, {enum_test::value_four,  "value_four"}};}\n};\n\nauto main() -> int {\n  console::write_line("name = {}", enum_test::value_four);\n  console::write_line("value = {}", enum_object(enum_test::value_four).to_int32());\n  console::write_line("as<int> = {}", as<int>(enum_test::value_four));\n  console::write_line("values = {}", enum_object<>::get_values<enum_test>());\n  console::write_line("names = {}", enum_object<>::get_names<enum_test>());\n  console::write("entries = [");\n  for (auto entry : enum_object<>::get_entries<enum_test>()) {\n    static auto index = 0;\n    console::write("{}({}, {})", index++ == 0 ? "" : ", ", as<int>(entry.first), entry.second);\n  }\n  console::write_line("]");\n}\n')),(0,u.kt)("p",null,"Output :"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"name = value_four\nvalue = 3\nas<int> = 3\nvalues = [0, 1, 2, 3]\nnames = [value_one, value_two, value_three, value_four]\nentries = [(0, value_one), (1, value_two), (2, value_three), (3, value_four)]\n")),(0,u.kt)("h2",{id:"xtdenum_set_attribute"},"xtd::enum_set_attribute"),(0,u.kt)("p",null,"The ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/structxtd_1_1enum__set__attribute.html"},"xtd::enum_set_attribute")," class is used to qualify an enum class attribute. "),(0,u.kt)("p",null,"There are two types of attributes:"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga21077f4832fc4718f7095d1a560a89cd"},"xtd::enum_attribute::standard")," : Enum standard attribute. The default value."),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#gga21077f4832fc4718f7095d1a560a89cda4e5868d676cb634aa75b125a0f741abf"},"xtd::enum_attribute::fmagts")," : Enum flags attribute.")),(0,u.kt)("p",null,"The class ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/structxtd_1_1enum__set__attribute.html"},"xtd::enum_set_attribute")," is only used when we want to qualify the enumeration with the attribute flags."),(0,u.kt)("p",null,"Write the following code to set the attribute of an enum class :"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},"enum class enum_flags { /*...*/; }\n\ntemplate<> struct xtd::enum_set_attribute<enum_flags> {\n  explicit operator auto() const noexcept {return xtd::enum_attribute::flags;}\n};\n")),(0,u.kt)("p",null,"This does not dispense with writing the operators necessary to perform bitwise operations, but is necessary to display the values of the enum class correctly."),(0,u.kt)("p",null,"Let's take the following example and see what happens with and without setting the attribute flag to ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga21077f4832fc4718f7095d1a560a89cd"},"xtd::enum_attribute::flags")," :"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},"enum class test_enum {\n  value_one = 0,\n  value_two = 1,\n  value_three = 2,\n  value_four = 4\n};\n\ntest_enum operator|(test_enum lhs, test_enum rhs) {return static_cast<test_enum>(static_cast<std::underlying_type<test_enum>::type>(lhs) | static_cast<std::underlying_type<test_enum>::type>(rhs));}\n")),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"With setting the attribute flag to ",(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga21077f4832fc4718f7095d1a560a89cd"},"xtd::enum_attribute::flags")," :")),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd.core.h>\n\nusing namespace xtd;\n\nenum class test_enum {\n  value_one = 0,\n  value_two = 1,\n  value_three = 2,\n  value_four = 4\n};\n\ntest_enum operator |(test_enum lhs, test_enum rhs) {return static_cast<test_enum>(static_cast<std::underlying_type<test_enum>::type>(lhs) | static_cast<std::underlying_type<test_enum>::type>(rhs));}\n\ntemplate<> struct xtd::enum_set_attribute<test_enum> {\n  explicit operator auto() const noexcept {return xtd::enum_attribute::flags;}\n};\n\ntemplate<> struct xtd::enum_register<test_enum> {\n  explicit operator auto() const noexcept {return xtd::enum_collection<test_enum> {{test_enum::value_one, "value_one"}, {test_enum::value_two, "value_two"}, {test_enum::value_three, "value_three"}, {test_enum::value_four, "value_four"}};}\n};\n\nauto main() -> int {\n  auto value = test_enum::value_two | test_enum::value_three;\n  console::write_line("value = {}", value);\n}\n')),(0,u.kt)("p",null,"output:"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"value = value_two, value_three\n")),(0,u.kt)("p",null,"Ok, this is the expected value."),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"Without setting the attribute flag to ",(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga21077f4832fc4718f7095d1a560a89cd"},"xtd::enum_attribute::flags")," :")),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd.core.h>\n\nusing namespace xtd;\n\nenum class test_enum {\n  value_one = 0,\n  value_two = 1,\n  value_three = 2,\n  value_four = 4\n};\n\ntest_enum operator |(test_enum lhs, test_enum rhs) {return static_cast<test_enum>(static_cast<std::underlying_type<test_enum>::type>(lhs) | static_cast<std::underlying_type<test_enum>::type>(rhs));}\n\ntemplate<> struct xtd::enum_register<test_enum> {\n  explicit operator auto() const noexcept {return xtd::enum_collection<test_enum> {{test_enum::value_one, "value_one"}, {test_enum::value_two, "value_two"}, {test_enum::value_three, "value_three"}, {test_enum::value_four, "value_four"}};}\n};\n\nauto main() -> int {\n  auto value = test_enum::value_two | test_enum::value_three;\n  console::write_line("value = {}", value);\n}\n')),(0,u.kt)("p",null,"output:"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"value = 3\n")),(0,u.kt)("p",null,"Error, this is not the expected value.\nIndeed, when the ",(0,u.kt)("inlineCode",{parentName:"p"},"value")," is displayed, there is no member variable in ",(0,u.kt)("inlineCode",{parentName:"p"},"enum_test")," that corresponds to ",(0,u.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,u.kt)("h3",{id:"flags_attribute_"},"flags","_","attribute","_"),(0,u.kt)("p",null,"To facilitate the writing of the flags attribute, there is the ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#gaea49fae71107df8769685efb159c181a"},"flags_attribute helper"),"."),(0,u.kt)("p",null,"The ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#gaea49fae71107df8769685efb159c181a"},"flags_attribute helper")," helper sets the ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/structxtd_1_1enum__set__attribute.html"},"xtd::enum_set_attribute")," with the ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#gga21077f4832fc4718f7095d1a560a89cda4e5868d676cb634aa75b125a0f741abf"},"xtd::enum_attribute::flags")," atribute and implements the following operators for enum flags:"),(0,u.kt)("table",null,(0,u.kt)("thead",{parentName:"table"},(0,u.kt)("tr",{parentName:"thead"},(0,u.kt)("th",{parentName:"tr",align:null},"Operator"),(0,u.kt)("th",{parentName:"tr",align:null},"Name"))),(0,u.kt)("tbody",{parentName:"table"},(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"^="),(0,u.kt)("td",{parentName:"tr",align:null},"Bitwise XOR assignment")),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"&="),(0,u.kt)("td",{parentName:"tr",align:null},"Bitwise AND assignment")),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"|","="),(0,u.kt)("td",{parentName:"tr",align:null},"Bitwise OR assignment")),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"+="),(0,u.kt)("td",{parentName:"tr",align:null},"Addition assignment")),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"-="),(0,u.kt)("td",{parentName:"tr",align:null},"Subtraction assignment")),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"^"),(0,u.kt)("td",{parentName:"tr",align:null},"Bitwise XOR")),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"&"),(0,u.kt)("td",{parentName:"tr",align:null},"Bitwise AND")),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"|"),(0,u.kt)("td",{parentName:"tr",align:null},"Bitwise OR")),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"+"),(0,u.kt)("td",{parentName:"tr",align:null},"Addition")),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"-"),(0,u.kt)("td",{parentName:"tr",align:null},"Subtraction")),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"~"),(0,u.kt)("td",{parentName:"tr",align:null},"Bitwise NOT")))),(0,u.kt)("p",null,"See ",(0,u.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/operators"},"operators")," for more information about operators."),(0,u.kt)("p",null,"The following code shows how to use ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#gaea49fae71107df8769685efb159c181a"},"flags",(0,u.kt)("em",{parentName:"a"},"attribute"))," helper."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd.core.h>\n\nusing namespace xtd;\n\nenum class test_enum {\n  value_one = 0,\n  value_two = 1,\n  value_three = 2,\n  value_four = 4\n};\n\nflags_attribute(, test_enum);\n\ntemplate<> struct xtd::enum_register<test_enum> {\n  explicit operator auto() const noexcept {return xtd::enum_collection<test_enum> {{test_enum::value_one, "value_one"}, {test_enum::value_two, "value_two"}, {test_enum::value_three, "value_three"}, {test_enum::value_four, "value_four"}};}\n};\n\nauto main() -> int {\n  auto value = test_enum::value_two | test_enum::value_three;\n  console::write_line("value = {}", value);\n}\n')),(0,u.kt)("p",null,"output:"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"value = value_two, value_three\n")),(0,u.kt)("h4",{id:"warning"},"Warning"),(0,u.kt)("p",null,"The ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#gaea49fae71107df8769685efb159c181a"},"flags",(0,u.kt)("em",{parentName:"a"},"attribute"))," helper has one limitiation :"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"The enum's flags cannot be in a class or struct. The enum must be in the global namespace or in a namespace hierarchy. If the enum flags is in a class or struct, add operators manually and use ",(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga21077f4832fc4718f7095d1a560a89cd"},"xtd::enum_set_attribute")," to register the ",(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#gga21077f4832fc4718f7095d1a560a89cda4e5868d676cb634aa75b125a0f741abf"},"xtd::enum_attribute::flags")," attribute.")),(0,u.kt)("h2",{id:"format"},"Format"),(0,u.kt)("p",null,"You can use the ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1enum__object.html#a7e0bc388bc8f4ec019e586fb2e5ad998"},"xtd::enum_object::to_string")," method to create a new string object that represents the numeric, hexadecimal, or string value of an enumeration member. This method takes one of the enumeration formatting strings to specify the value that you want returned."),(0,u.kt)("p",null,"See ",(0,u.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Format%20number%20dates%20other%20types/enumeration_format_strings"},"Enumeraton format strings")," for more information about enum class format."),(0,u.kt)("p",null,"The following code shows how to use ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class")," with format."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nenum class week_day {\n  monday,\n  tuesday,\n  wednesday,\n  thursday,\n  friday,\n  saturday,\n  sunday\n};\n\ntemplate<> struct xtd::enum_register<week_day> {\n  explicit operator auto() const noexcept {return xtd::enum_collection<week_day> {{week_day::monday, "monday"}, {week_day::tuesday, "tuesday"}, {week_day::wednesday, "wednesday"}, {week_day::thursday, "thursday"}, {week_day::friday, "friday"}, {week_day::saturday, "saturday"}, {week_day::sunday, "sunday"}};}\n};\n\nauto main() -> int {\n  console::write_line("{}", week_day::saturday);\n  console::write_line("0b{:b}", week_day::saturday);\n  console::write_line("0b{:B}", week_day::saturday);\n  console::write_line("{:d}", week_day::saturday);\n  console::write_line("{:D}", week_day::saturday);\n  console::write_line("{:g}", week_day::saturday);\n  console::write_line("{:G}", week_day::saturday);\n  console::write_line("0{:o}", week_day::saturday);\n  console::write_line("0{:O}", week_day::saturday);\n  console::write_line("0x{:x}", week_day::saturday);\n  console::write_line("0x{:X}", week_day::saturday);\n}\n')),(0,u.kt)("p",null,"output:"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"saturday\n0b101\n0b101\n5\n5\nsaturday\nsaturday\n05\n05\n0x5\n0x5\n")),(0,u.kt)("h3",{id:"note-1"},"Note"),(0,u.kt)("p",null,"  xtd can display a string representing a member of an ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class")," as long as it is registered. If it is not registered then the numeric value will be displayed."),(0,u.kt)("h2",{id:"parse"},"Parse"),(0,u.kt)("p",null,"To parse an ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class")," with xtd, the enum class must be registered."),(0,u.kt)("p",null,"The folowwing example shows how to parse an ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class")," with ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1enum__object_3_01std_1_1nullptr__t_01_4.html#a159422352085070f5d77c6f814e68693"},"xtd::enum_object::parse")," method."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nenum class enum_test {\n  value_one,\n  value_two,\n  value_three,\n  value_four\n};\n\ntemplate<> struct xtd::enum_register<enum_test> {\n  explicit operator auto() const noexcept {return xtd::enum_collection<enum_test> {{enum_test::value_one,  "value_one"}, {enum_test::value_two,  "value_two"}, {enum_test::value_three,  "value_three"}, {enum_test::value_four,  "value_four"}};}\n};\n\nauto main() -> int {\n  console::write_line("result = {}", enum_object<>::parse<enum_test>("value_two"));\n  console::write_line("result = {}", enum_object<>::parse<enum_test>("VaLuE_fOuR", true));\n  try {\n    console::write_line("result = {}", enum_object<>::parse<enum_test>("value_five"));\n  } catch(const xtd::system_exception& e) {\n    console::write_line("enum_test::value_five does not exists!");\n  }\n\n  enum_test result;\n  if (enum_object<>::try_parse<enum_test>("value_three", result)) console::write_line("result = {}", result);\n  if (enum_object<>::try_parse<enum_test>("vAlUe_OnE", true, result)) console::write_line("result = {}", result);\n  if (enum_object<>::try_parse<enum_test>("value_six", result)) console::write_line("result = {}", result);\n  else console::write_line("enum_test::value_six does not exists!");\n}\n')),(0,u.kt)("p",null,"Output :"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"result = value_two\nresult = value_four\nenum_test::value_five does not exists!\nresult = value_three\nresult = value_one\nenum_test::value_six does not exists!\n")),(0,u.kt)("h2",{id:"introspection"},"Introspection"),(0,u.kt)("p",null,"Registering an ",(0,u.kt)("inlineCode",{parentName:"p"},"enum"),", ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class")," or an ",(0,u.kt)("inlineCode",{parentName:"p"},"enum struct")," is unfortunately verbose. "),(0,u.kt)("p",null,"There are some introspection helpers in xtd to facilitate the work:"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#ga6c6a896cbec833fa1fac13b700cf8691"},"enum_")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#gabe13d52c924723772f27878f606210cd"},"enum",(0,u.kt)("em",{parentName:"a"},"ut"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#gade4794e2743558ee1eb5bbad10c7f6d4"},"enum",(0,u.kt)("em",{parentName:"a"},"class"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#ga6918e267c2970d28460e6c42a3b03f4a"},"enum",(0,u.kt)("em",{parentName:"a"},"class_ut"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#ga85a4f5366ae461ca1e20872d39a0b440"},"enum",(0,u.kt)("em",{parentName:"a"},"struct"))),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#ga341342381ae697a142233d256948df84"},"enum",(0,u.kt)("em",{parentName:"a"},"struct_ut")))),(0,u.kt)("h3",{id:"warning-1"},"Warning"),(0,u.kt)("p",null,"The introspection helpers have one limitiation :"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"The enumeration cannot be in a class or struct. The enumeration must be in the global namespace or in a namespace hierarchy. If the enumumeration is in a class or struct, add operators manually and use ",(0,u.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/structxtd_1_1enum__register.html"},"xtd::enum_register")," to register the enumeration.")),(0,u.kt)("h3",{id:"enum_"},"enum_"),(0,u.kt)("p",null,"This helper provides the registration struct for ",(0,u.kt)("inlineCode",{parentName:"p"},"enum"),"."),(0,u.kt)("p",null,"Thr following example shows how to use ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#ga6c6a896cbec833fa1fac13b700cf8691"},"enum_")," helper."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nenum_(, enum_test,\n  value_one,\n  value_two,\n  value_three,\n  value_four\n);\n\nauto main() -> int {\n  console::write_line("name = {}", enum_test::value_four);\n  console::write_line("value = {}", enum_object(enum_test::value_four).to_int32());\n  console::write_line("as<int> = {}", as<int>(enum_test::value_four));\n  console::write_line("values = {}", enum_object<>::get_values_as_int32<enum_test>());\n  console::write_line("names = {}", enum_object<>::get_names<enum_test>());\n  console::write_line("entries = {}", enum_object<>::get_entries_as_int32<enum_test>());\n}\n\n// This code produces the following output :\n//\n// name = value_four\n// value = 3\n// as<int> = 3\n// values = [0, 1, 2, 3]\n// names = [value_one, value_two, value_three, value_four]\n// entries = [(0, value_one), (1, value_two), (2, value_three), (3, value_four)]\n')),(0,u.kt)("h3",{id:"enum_ut_"},"enum","_","ut","_"),(0,u.kt)("p",null,"This helper provides the registration struct for ",(0,u.kt)("inlineCode",{parentName:"p"},"enum")," with specified underlying type."),(0,u.kt)("p",null,"Thr following example shows how to use ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#gabe13d52c924723772f27878f606210cd"},"enum",(0,u.kt)("em",{parentName:"a"},"ut"))," helper."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nenum_ut_(, enum_test, byte,\n  value_one,\n  value_two,\n  value_three,\n  value_four\n);\n\nauto main() -> int {\n  console::write_line("name = {}", enum_test::value_four);\n  console::write_line("value = {}", enum_object(enum_test::value_four).to_byte());\n  console::write_line("as<byte> = {}", as<byte>(enum_test::value_four));\n  console::write_line("values = {}", enum_object<>::get_values_as_int32<enum_test>());\n  console::write_line("names = {}", enum_object<>::get_names<enum_test>());\n  console::write_line("entries = {}", enum_object<>::get_entries_as_int32<enum_test>());\n}\n\n// This code produces the following output :\n//\n// name = value_four\n// value = 3\n// as<byte> = 3\n// values = [0, 1, 2, 3]\n// names = [value_one, value_two, value_three, value_four]\n// entries = [(0, value_one), (1, value_two), (2, value_three), (3, value_four)]\n')),(0,u.kt)("h3",{id:"enum_class_"},"enum","_","class","_"),(0,u.kt)("p",null,"This helper provides the registration struct for ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class"),"."),(0,u.kt)("p",null,"Thr following example shows how to use ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#gade4794e2743558ee1eb5bbad10c7f6d4"},"enum",(0,u.kt)("em",{parentName:"a"},"class"))," helper."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nenum_class_(, enum_test,\n  value_one,\n  value_two,\n  value_three,\n  value_four\n);\n\nauto main() -> int {\n  console::write_line("name = {}", enum_test::value_four);\n  console::write_line("value = {}", enum_object(enum_test::value_four).to_int32());\n  console::write_line("as<int> = {}", as<int>(enum_test::value_four));\n  console::write_line("values = {}", enum_object<>::get_values_as_int32<enum_test>());\n  console::write_line("names = {}", enum_object<>::get_names<enum_test>());\n  console::write_line("entries = {}", enum_object<>::get_entries_as_int32<enum_test>());\n}\n\n// This code produces the following output :\n//\n// name = value_four\n// value = 3\n// as<int> = 3\n// values = [0, 1, 2, 3]\n// names = [value_one, value_two, value_three, value_four]\n// entries = [(0, value_one), (1, value_two), (2, value_three), (3, value_four)]\n')),(0,u.kt)("h3",{id:"enum_class_ut_"},"enum","_","class_ut","_"),(0,u.kt)("p",null,"This helper provides the registration struct for ",(0,u.kt)("inlineCode",{parentName:"p"},"enum class")," with specified underlying type."),(0,u.kt)("p",null,"Thr following example shows how to use ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#ga6918e267c2970d28460e6c42a3b03f4a"},"enum",(0,u.kt)("em",{parentName:"a"},"class_ut"))," helper."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nenum_class_ut_(, enum_test, byte,\n  value_one,\n  value_two,\n  value_three,\n  value_four\n);\n\nauto main() -> int {\n  console::write_line("name = {}", enum_test::value_four);\n  console::write_line("value = {}", enum_object(enum_test::value_four).to_byte());\n  console::write_line("as<byte> = {}", as<byte>(enum_test::value_four));\n  console::write_line("values = {}", enum_object<>::get_values_as_int32<enum_test>());\n  console::write_line("names = {}", enum_object<>::get_names<enum_test>());\n  console::write_line("entries = {}", enum_object<>::get_entries_as_int32<enum_test>());\n}\n\n// This code produces the following output :\n//\n// name = value_four\n// value = 3\n// as<byte> = 3\n// values = [0, 1, 2, 3]\n// names = [value_one, value_two, value_three, value_four]\n// entries = [(0, value_one), (1, value_two), (2, value_three), (3, value_four)]\n')),(0,u.kt)("h3",{id:"enum_struct_"},"enum","_","struct","_"),(0,u.kt)("p",null,"This helper provides the registration struct for ",(0,u.kt)("inlineCode",{parentName:"p"},"enum struct"),"."),(0,u.kt)("p",null,"Thr following example shows how to use ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#ga85a4f5366ae461ca1e20872d39a0b440"},"enum",(0,u.kt)("em",{parentName:"a"},"struct"))," helper."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nenum_class_(, enum_test,\n  value_one,\n  value_two,\n  value_three,\n  value_four\n);\n\nauto main() -> int {\n  console::write_line("name = {}", enum_test::value_four);\n  console::write_line("value = {}", enum_object(enum_test::value_four).to_int32());\n  console::write_line("as<int> = {}", as<int>(enum_test::value_four));\n  console::write_line("values = {}", enum_object<>::get_values_as_int32<enum_test>());\n  console::write_line("names = {}", enum_object<>::get_names<enum_test>());\n  console::write_line("entries = {}", enum_object<>::get_entries_as_int32<enum_test>());\n}\n\n// This code produces the following output :\n//\n// name = value_four\n// value = 3\n// as<int> = 3\n// values = [0, 1, 2, 3]\n// names = [value_one, value_two, value_three, value_four]\n// entries = [(0, value_one), (1, value_two), (2, value_three), (3, value_four)]\n')),(0,u.kt)("h3",{id:"enum_struct_ut_"},"enum","_","struct","_","ut","_"),(0,u.kt)("p",null,"This helper provides the registration struct for ",(0,u.kt)("inlineCode",{parentName:"p"},"enum struct")," with specified underlying type."),(0,u.kt)("p",null,"Thr following example shows how to use ",(0,u.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__keywords.html#ga341342381ae697a142233d256948df84"},"enum",(0,u.kt)("em",{parentName:"a"},"struct_ut"))," helper."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nenum_struct_ut_(, enum_test, byte,\n  value_one,\n  value_two,\n  value_three,\n  value_four\n);\n\nauto main() -> int {\n  console::write_line("name = {}", enum_test::value_four);\n  console::write_line("value = {}", enum_object(enum_test::value_four).to_byte());\n  console::write_line("as<byte> = {}", as<byte>(enum_test::value_four));\n  console::write_line("values = {}", enum_object<>::get_values_as_int32<enum_test>());\n  console::write_line("names = {}", enum_object<>::get_names<enum_test>());\n  console::write_line("entries = {}", enum_object<>::get_entries_as_int32<enum_test>());\n}\n\n// This code produces the following output :\n//\n// name = value_four\n// value = 3\n// as<byte> = 3\n// values = [0, 1, 2, 3]\n// names = [value_one, value_two, value_three, value_four]\n// entries = [(0, value_one), (1, value_two), (2, value_three), (3, value_four)]\n')),(0,u.kt)("h1",{id:"see-also"},"See also"),(0,u.kt)("p",null,"\u200b"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/documentation/Guides/Overview/Tutorials"},"Tutorials")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}_.isMDXComponent=!0}}]);