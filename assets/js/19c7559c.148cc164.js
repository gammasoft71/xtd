"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[8275],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},s=Object.keys(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=a.createContext({}),d=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},c=function(t){var e=d(t.components);return a.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,s=t.originalType,l=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),u=d(n),m=r,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||s;return n?a.createElement(g,i(i({ref:e},c),{},{components:n})):a.createElement(g,i({ref:e},c))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var d=2;d<s;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},53218:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const s={},i="string",o={unversionedId:"documentation/Guides/xtd.core/Types overview/string",id:"documentation/Guides/xtd.core/Types overview/string",title:"string",description:"The xtd::string class represents text as a sequence of UTF-8 code units.",source:"@site/docs/documentation/Guides/xtd.core/Types overview/string.md",sourceDirName:"documentation/Guides/xtd.core/Types overview",slug:"/documentation/Guides/xtd.core/Types overview/string",permalink:"/xtd/docs/documentation/Guides/xtd.core/Types overview/string",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Preprocessor Symbols",permalink:"/xtd/docs/documentation/Guides/xtd.core/Types overview/preprocessor_symbols"},next:{title:"Types in xtd",permalink:"/xtd/docs/documentation/Guides/xtd.core/Types overview/types"}},l={},d=[{value:"xtd::string vs std::string",id:"xtdstring-vs-stdstring",level:2},{value:"Additional methods",id:"additional-methods",level:2},{value:"String conversions",id:"string-conversions",level:2},{value:"xtd::convert_string",id:"xtdconvert_string",level:3},{value:"Remarks",id:"remarks",level:4},{value:"Examples",id:"examples",level:4},{value:"as operator",id:"as-operator",level:3},{value:"Remarks",id:"remarks-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"xtd::string literal operators",id:"xtdstring-literal-operators",level:2}],c={toc:d};function p(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"string"},"string"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html"},"xtd::string")," class represents text as a sequence of UTF-8 code units."),(0,r.kt)("p",null,"A string is a sequential collection of characters that's used to represent text.\nAn ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html"},"xtd::string")," object is a sequential collection of ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," that represent a string;\na ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," corresponds to a UTF-8 code unit.\nThe value of the ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html"},"xtd::string")," object is the content of the sequential collection of ",(0,r.kt)("inlineCode",{parentName:"p"},"char"),", and unlike ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/string/basic_string"},"std::string")," that value is immutable (that is, it is read-only)."),(0,r.kt)("h2",{id:"xtdstring-vs-stdstring"},"xtd::string vs std::string"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html"},"xtd::string")," is an immutable ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/string/basic_string"},"std::string"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/cpp/string/basic_string"},"std::string")," is inherited from ",(0,r.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/cpp/string/basic_string"},"std::basic_string\\<char",">"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html"},"xtd::string")," is inherited from ",(0,r.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/cpp/string/basic_string"},"std::basic_string\\<char",">")," too and thus offers the immutable API of ",(0,r.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/cpp/string/basic_string"},"std::string")," with some functions missing from std::string.")),(0,r.kt)("h2",{id:"additional-methods"},"Additional methods"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html#a9d492d6b9ce2f2e38661a5062009a32f"},"xtd::string::concat")," concatenates two, three or four specified instances of string or string array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__format__parse.html#ga3afd6d163bc6391a48a1f84f28a68ffd"},"xtd::string::format")," writes the text representation of the specified arguments list, to string using the specified format information. See ",(0,r.kt)("a",{parentName:"li",href:"/docs/documentation/Guides/xtd.core/Format%20number%20dates%20other%20types/overview"},"format")," for more information."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html#a95694998a854ba65dde682b879eec355"},"xtd::string::join")," concatenates a specified separator string between each element of a specified object array, yielding a single concatenated string."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html#a90aeac5b1761195838734b45d1268dd3"},"xtd::string::parse")," converts a string into a value_t type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html#a96a729c2b591760cb0971d43418b3804"},"xtd::string::split")," splits this string into a maximum number of substrings based on the characters in an array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html#a0975a450a98f2c65f5649d2144a0bf0e"},"xtd::string::try_parse")," Try to convert a string into a value_t type."),(0,r.kt)("li",{parentName:"ul"},"End more, see ",(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html"},"xtd::string")," reference guide for a complete list of methods.")),(0,r.kt)("h2",{id:"string-conversions"},"String conversions"),(0,r.kt)("h3",{id:"xtdconvert_string"},"xtd::convert_string"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1convert__string.html"},"xtd::convert_string")," class represents API to convert string containers."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1convert__string.html"},"xtd::convert_string")," class is used to convert string container to another."),(0,r.kt)("h4",{id:"remarks"},"Remarks"),(0,r.kt)("p",null,"The content of the string must be encoded in UTF-8 (65001) format. Make sure it is, otherwise the result will be uncertain."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The following code shows how to convert ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html"},"xtd::string")," to ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/string/basic_string"},"std::u32string")," and writes the converted string to the console output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace std;\nusing namespace xtd;\n\nauto main() -> int {\n  string s1 = "UTF-8 (65001) string value";\n  \n  auto s2 = convert_string::to_u32string(s1);\n  console::write_line(s2);\n}\n')),(0,r.kt)("p",null,"This example is one of N. You can convert any string container to any other string container."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Types%20overview/Type%20conversion/overview"},"type convertion")," for more information and ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1convert__string.html"},"xtd::convert_string")," class for a complete list of conversion methods."),(0,r.kt)("h3",{id:"as-operator"},"as operator"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga09e01287b655c20807cdb73d993ba13d"},"xtd::as<...>")," operators cast a type into another type."),(0,r.kt)("h4",{id:"remarks-1"},"Remarks"),(0,r.kt)("p",null,"The content of the string must be encoded in UTF-8 (65001) format. Make sure it is, otherwise the result will be uncertain."),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("p",null,"The following code shows how to convert ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/string/basic_string"},"std::u16string")," to ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1string.html"},"xtd::string")," and writes the converted string to the console output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace std;\nusing namespace xtd;\n\nauto main() -> int {\n  u16string s1 = u"UTF-8 (65001) string value";\n  \n  auto s2 = as<string>(s1);\n  console::write_line(s2);\n}\n')),(0,r.kt)("p",null,"This example is one of N. You can convert any string container to any other string container."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Types%20overview/Type%20conversion/overview"},"type convertion")," for more information and ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga19379a1158ccd320e208b362f11295b7"},"xtd::as<...>")," operators for a complete list of conversion operators."),(0,r.kt)("h2",{id:"xtdstring-literal-operators"},"xtd::string literal operators"),(0,r.kt)("p",null,"There are some literals operators for xtd::string:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga3159a02c625a6b416d84cc09109fa1bb"},"_s")," literal operator is used to convert specified value into xtd::string.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = "This is a "_s + "simple string"_s;\n  console::write_line(s);\n}\n// output: This is a simple string\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga43c09451f4b809ab7efd4fc5bdaeda84"},"_sb")," literal operator is used to convert the specified value to xtd::string with a binary format.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sb;\n  console::write_line("0b{}", s);\n}\n// output: 0b101010\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga7eaf7f69ff2304bf1bab94827e109610"},"_sb2")," literal operator is used to convert the specified value to xtd::string with a binary format with two digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 1_sb2;\n  console::write_line("0b{}", s);\n}\n// output: 0b01\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga856739797e253190afd27ba2dadcd713"},"_sb4")," literal operator is used to convert the specified value to xtd::string with a binary format with four digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 3_sb4;\n  console::write_line("0b{}", s);\n}\n// output: 0b0011\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga27bc00f6bf6ca69c610a2dab13115a82"},"_sb8")," literal operator is used to convert the specified value to xtd::string with a binary format with eight digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sb8;\n  console::write_line("0b{}", s);\n}\n// output: 0b00101010\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#gaf72922be81431716b63f621451dca9fc"},"_sb16")," literal operator is used to convert the specified value to xtd::string with a binary format with sixteen digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sb16;\n  console::write_line("0b{}", s);\n}\n// output: 0b0000000000101010\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga2722ffae5eaa8668ce66ae53309d7cf9"},"_sb32")," literal operator is used to convert the specified value to xtd::string with a binary format with thirty two digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sb32;\n  console::write_line("0b{}", s);\n}\n// output: 0b00000000000000000000000000101010\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga3d69af37baeea27aba64561e5aa7411a"},"_sb64")," literal operator is used to convert the specified value to xtd::string with a binary format with sixty four digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sb64;\n  console::write_line("0b{}", s);\n}\n// output: 0b0000000000000000000000000000000000000000000000000000000000101010\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#gac756c19a09319ef9a70df4405f70fcd8"},"_sd")," literal operator is used to convert specified value into xtd::string with a decimal format.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sd;\n  console::write_line(s);\n}\n// output: 42\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga599899d6e78170e7a369e83378d14a1a"},"_sd")," literal operator is used to convert specified value into xtd::string with a decimal format.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 4.2_sd;\n  console::write_line(s);\n}\n// output: 4.2\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#gae46364777b448e80daadf66ae77f1fbf"},"_sx")," literal operator is used to convert the specified value to xtd::string with a hexa format.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sx;\n  console::write_line("0x{}", s);\n}\n// output: 0x2a\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#gae9616d36a82e9e5b5600328ca76a5471"},"_sx2")," literal operator is used to convert the specified value to xtd::string with a hexa format with two digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 10_sx2;\n  console::write_line("0x{}", s);\n}\n// output: 0x0a\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#gaf288cd786089a9f4ec3d02466707e3c5"},"_sx4")," literal operator is used to convert the specified value to xtd::string with a hexa format with four digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sx4;\n  console::write_line("0x{}", s);\n}\n// output: 0x002a\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#gaa4acf7c9bbc764e2254c67196630c434"},"_sx8")," literal operator is used to convert the specified value to xtd::string with a hexa format with eight digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sx8;\n  console::write_line("0x{}", s);\n}\n// output: 0x0000002a\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga47c03a571d078d7dfeed1af05baa0fe2"},"_sX")," literal operator is used to convert the specified value to xtd::string with a hexa format.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sX;\n  console::write_line("0x{}", s);\n}\n// output: 0x2A\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga246c6f5fcf4b5f23fd4f54512d1e25dd"},"_sX2")," literal operator is used to convert the specified value to xtd::string with a hexa format with two digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 10_sX2;\n  console::write_line("0x{}", s);\n}\n// output: 0x0A\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#ga7f98753adb927ff671f9b7c0f505ce95"},"_sX4")," literal operator is used to convert the specified value to xtd::string with a hexa format with four digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sX4;\n  console::write_line("0x{}", s);\n}\n// output: 0x002A\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html#gaca78174d0fd95202301f20582ab3c19a"},"_sX8")," literal operator is used to convert the specified value to xtd::string with a hexa format with eight digits.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\n\nauto main() -> int {\n  string s = 42_sX8;\n  console::write_line("0x{}", s);\n}\n// output: 0x0000002A\n')),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/literal_operators"},"lietarl operators")," for more information."),(0,r.kt)("h1",{id:"see-also"},"See also"),(0,r.kt)("p",null,"\u200b\u200b"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/documentation/Guides/Overview/Tutorials"},"Tutorials")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}p.isMDXComponent=!0}}]);