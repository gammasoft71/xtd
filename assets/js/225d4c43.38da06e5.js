"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[106],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,k=d["".concat(i,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(k,s(s({ref:t},c),{},{components:n})):a.createElement(k,s({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84307:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},s="Coding Conventions Guidelines",l={unversionedId:"documentation/Design Guidelines/coding_conventions_guidelines",id:"documentation/Design Guidelines/coding_conventions_guidelines",title:"Coding Conventions Guidelines",description:"Folders and files organization",source:"@site/docs/documentation/Design Guidelines/coding_conventions_guidelines.md",sourceDirName:"documentation/Design Guidelines",slug:"/documentation/Design Guidelines/coding_conventions_guidelines",permalink:"/xtd/docs/documentation/Design Guidelines/coding_conventions_guidelines",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Struct Design",permalink:"/xtd/docs/documentation/Design Guidelines/Type Design Guidelines/struct_design"},next:{title:"Release Notes",permalink:"/xtd/docs/documentation/release_notes"}},i={},p=[{value:"Folders and files organization",id:"folders-and-files-organization",level:2},{value:"Folders hierarchy",id:"folders-hierarchy",level:4},{value:"File names",id:"file-names",level:4},{value:"File extensions",id:"file-extensions",level:4},{value:"Diagrams",id:"diagrams",level:2},{value:"UML diagrams",id:"uml-diagrams",level:2},{value:"Editor",id:"editor",level:2},{value:"Order of parts in a class or struct declarations",id:"order-of-parts-in-a-class-or-struct-declarations",level:2},{value:"First order is on protection type :",id:"first-order-is-on-protection-type-",level:4},{value:"Second order for each protection type :",id:"second-order-for-each-protection-type-",level:4},{value:"#define",id:"define",level:2},{value:"header file :",id:"header-file-",level:6},{value:"source file :",id:"source-file-",level:6},{value:"Globals",id:"globals",level:2},{value:"Global methods",id:"global-methods",level:4},{value:"global variables",id:"global-variables",level:4},{value:"Comments",id:"comments",level:2},{value:"Documentation",id:"documentation",level:2},{value:"Indentation",id:"indentation",level:2},{value:"New lines",id:"new-lines",level:2},{value:"New line options for braces",id:"new-line-options-for-braces",level:4},{value:"New line options for keywords",id:"new-line-options-for-keywords",level:4},{value:"New line options for expressions",id:"new-line-options-for-expressions",level:4},{value:"Spacing",id:"spacing",level:2},{value:"Set spacing for method declarations",id:"set-spacing-for-method-declarations",level:4},{value:"Set spacing for method calls",id:"set-spacing-for-method-calls",level:4},{value:"Set other spacing options",id:"set-other-spacing-options",level:4},{value:"Set spacing for square brackets",id:"set-spacing-for-square-brackets",level:4},{value:"Set spacing for brackets",id:"set-spacing-for-brackets",level:4},{value:"See also",id:"see-also",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"coding-conventions-guidelines"},"Coding Conventions Guidelines"),(0,r.kt)("h2",{id:"folders-and-files-organization"},"Folders and files organization"),(0,r.kt)("h4",{id:"folders-hierarchy"},"Folders hierarchy"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Respect the project hierarchy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"root\n  +- build\n  +- docs\n  |   +- diagrams\n  |   |   +- uml\n  |   +- pictures\n  |   +- tutorials\n  |   +- movies\n  +- examples\n  |   +- xtd.forms\n  |   |   +- application\n  |   |   +- common_dialogs\n  |   |   +- components\n  |   |   +- ...\n  |   +- ...\n  +- locale\n  |   +- af\n  |   +- am\n  |   +- ...\n  +- resources\n  |   + countries\n  |   + cursors\n  |   + ...\n  +- scripts\n  |   +- cmake\n  |   +- install\n  |   +- ...\n  +- src\n  |   +- xtd.forms\n  |   |   +- include\n  |   |   |   +- xtd\n  |   |   |       +- forms\n  |   |   |       |   +- layout\n  |   |   |       |   +- ...\n  |   |   |\xa0      +- ...\n  |   |   +- src\n  |   |       +- xtd\n  |   |           +- forms\n  |   |           |   +- layout\n  |   |           |   +- ...\n  |   |     \xa0     +- ...\n  |   +- ...\n  +- tests\n  |   +- xtd.forms.manual_tests\n  |   +- xtd.forms.unit_tests\n  |   |   +- xtd\n  |   |       +- forms\n  |   |       |   +- ...\n  |   |       +- ...\n  |   +- ...\n  +- themes\n  +- tools\n      +- guidgen\n      +- guidgen-gui\n      +- ...\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root")," folder is the project folder where xtd project was extracted or cloned."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/build")," folder contains the build result. This folder will automatically created during the installation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/docs")," folder contains markdown documentations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/docs/diagrams")," folder contains the diagrams used to illustrate the markdown documentation and website."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/docs/diagrams/uml")," folder contains the UML diagrams used to illustrate the markdown documentation and website."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/docs/pictures")," folder contains the pictures used to illustrate the markdown documentation and website."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/docs/tutorials")," folder contains the xtd tutorials."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/docs/movies")," folder contains the movies used to demonstrate how to use xtd."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/examples")," folder contains examples to show how to used xtd libraries organized by library and example theme."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/locale")," folder contains rlocale files organized by language."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/resources")," folder contains resource files organized by theme."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/scripts")," folder contains developer helper scripts."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/scripts/appveyor")," folder contains scripts needed by appveyor CI."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/scripts/cmake"),"  folder contains scripts needed by cmake."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/scripts/install")," folder contains installation scripts."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/scripts/travis")," folder contains scripts needed by travis CI."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root/src")," folder contains source files organized by library.")),(0,r.kt)("p",null,"For each library the hierarchy is identical :"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"root/xtd.library.name/include")," folder contains include files for xtd.library_name library."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"root/xtd.library.name/include/namespace1/namespace2/...")," folder contains include files for xtd.library.name library organized by namespace."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"root/xtd.library.name/src")," folder contains source files for xtd.library.name library."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"root/xtd.library.name/src/namespace1/namespace2/...")," folder contains source files for xtd.library.name library organized by namespace."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"root/tests")," folder contains tests organized by library and namespaces."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"root/themes")," folder contains default css theme files."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"root/tools")," folder contains xtd tools."),(0,r.kt)("p",null,"For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"root/src/xtd.forms")," folder contains xtd library source files and the ",(0,r.kt)("inlineCode",{parentName:"p"},"root/src/xtd.forms.native.win32")," folder contains xtd.forms.native.win32 library source files."),(0,r.kt)("p",null,"For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"root/tests/xtd.forms.unit_tests")," contains xtd.forms library unit tests."),(0,r.kt)("p",null,"For example, if a xtd.forms library header file contains :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n\n#include <xtd/event_args.h>\n#include "close_reason.h"\n\nnamespace xtd {\n  namespace forms {\n    class form_closed_event_args : public event_args {\n    public:\n      form_closed_event_args() = default;\n      form_closed_event_args(forms::close_reason close_reason) : close_reason_(close_reason) {};\n\n      /// @cond\n      form_closed_event_args(const form_closed_event_args& form_closed_event_args) = default;\n      form_closed_event_args& operator =(const form_closed_event_args& form_closed_event_args) = default;\n      /// @endcond\n\n      forms::close_reason close_reason() const {return close_reason_;}\n\n    private:\n      forms::close_reason close_reason_ = forms::close_reason::none;\n    };\n  }\n}\n')),(0,r.kt)("p",null,"The file will be in root/src/xtd.forms/include/xtd/forms/ path"),(0,r.kt)("h4",{id:"file-names"},"File names"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Name file with same name of the class, struct, enum, delegate or event that contains."),(0,r.kt)("p",null,"For example, if file contains :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n\n#include <xtd/event_handler.h>\n#include "form_closed_event_args.h"\n\nnamespace xtd {\n  namespace forms {\n    template<typename type_t>\n    using form_closed_event_handler = delegate<void(const type_t& sender, const form_closed_event_args& e)>;\n  }\n}\n')),(0,r.kt)("p",null,"The file will be named to ",(0,r.kt)("em",{parentName:"p"},"form_closed_event_handler.h"),"."),(0,r.kt)("h4",{id:"file-extensions"},"File extensions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Use .h for header files."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Use .cpp for source files."),(0,r.kt)("h2",{id:"diagrams"},"Diagrams"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Diagrams are generated by ",(0,r.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/drawio-desktop/pebppomjfocnoigkeepgbmcifnnlndla?hl=en-GB"},"Draw.IO Desktop"),". Draw.IO Desktop is a Google Chrome extension."),(0,r.kt)("h2",{id:"uml-diagrams"},"UML diagrams"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," UML diagrams are generated by ",(0,r.kt)("a",{parentName:"p",href:"http://plantuml.com"},"plantUML"),"."),(0,r.kt)("h2",{id:"editor"},"Editor"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Replace tab character with double spaces in your editor or IDE properties."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Use two space for indentation. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class my_control : public xtd::forms::control {\npublic:\n  my_control() = default;\n  my_control(const my_control&) = default;\n};\n")),(0,r.kt)("h2",{id:"order-of-parts-in-a-class-or-struct-declarations"},"Order of parts in a class or struct declarations"),(0,r.kt)("h4",{id:"first-order-is-on-protection-type-"},"First order is on protection type :"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Put public members in first."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Put protected members in second."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," And finally put private members at least."),(0,r.kt)("h4",{id:"second-order-for-each-protection-type-"},"Second order for each protection type :"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Put inner classes and structs in first."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Put constructors / Destructor / Copy operator in seconds."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Put properties in third."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Put events in fourth."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Put methods in fifth."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," And put members in last."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Organize properties, events, methods and member in alphabetic order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'class my_control : public xtd::forms::control {\npublic:\n  my_control() = default;\n  my_control(const my_control&) = default;\n  my_control& my_control& operator =(const my_control& my_control);\n  \n  const std::string base_name() const {return base_name_;}\n  intptr_t handle() const {return handle_;}\n  \n  xtd::event<my_control, event_handler<xtd::forms::control>> name_changed;\n  \n  std::string to_string() const override {return name_generator();}\n\nprotected:\n  virtual std::string name_generator() const {return base_name_;}\n\n  intptr_t handle_ = 0;\n  \nprivate:\n  my_control(intptr_t handle);\n\n  std::string base_name_ = "BaseName";\n};\n')),(0,r.kt)("h2",{id:"define"},"#define"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Use #define for any good or bad reason."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," But instead use ",(0,r.kt)("em",{parentName:"p"},"static constexpr")," or ",(0,r.kt)("em",{parentName:"p"},"static const")," for constants."),(0,r.kt)("h6",{id:"header-file-"},"header file :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class my_class {\npublic:\n  static constexpr int max_value = std::numeric_limits<int>::max();\n  static const xtd::version min_version;\n};\n")),(0,r.kt)("h6",{id:"source-file-"},"source file :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const xtd::version my_class::min_version(2, 1, 0);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f Do")," All macro can be replaced by template method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class math {\npublic:\nmath() = delete;\n  // equivalent : #define max(value1, value2) (value1 >= value2 ? value1 : value2)\n  template<typename T>\n  static T max(T value1, T value2) {return value1 >= value2 ? value1 : value2;}\n};\n")),(0,r.kt)("h2",{id:"globals"},"Globals"),(0,r.kt)("h4",{id:"global-methods"},"Global methods"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Use global methods. All methods are in class. If necessary creates container class like xtd::forms:cursors to group static methods."),(0,r.kt)("h4",{id:"global-variables"},"global variables"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Use global variables. All variables are in class. If necessary a global or static variable can create in a source files (.cpp) but it can't visible in the header file (.h)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Uses ",(0,r.kt)("a",{parentName:"p",href:"/docs/documentation/Design%20Guidelines/Common%20Design%20Patterns/factory_method"},"factory_method"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/documentation/Design%20Guidelines/Common%20Design%20Patterns/builder"},"builder")," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/documentation/Design%20Guidelines/Common%20Design%20Patterns/singleton"},"singleton")," patterns to create unique object."),(0,r.kt)("h2",{id:"comments"},"Comments"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Using always simple line comment ",(0,r.kt)("strong",{parentName:"p"},"//")," instead block comment /* */"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// This is my\n// multiline comment\nint x = 3;\n")),(0,r.kt)("h2",{id:"documentation"},"Documentation"),(0,r.kt)("p",null,"The documentation is generated by Doxygen."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Write Doxygen documentation only in header file (",(0,r.kt)("strong",{parentName:"p"},".h"),")."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," All documentation comment must start by triple slash ",(0,r.kt)("strong",{parentName:"p"},"///")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"/// @brief my_class do something\nclass my_class {\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Doxygen command start with at-sign ",(0,r.kt)("strong",{parentName:"p"},"@")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"/// @brief my_func do something\n/// @param name A string that contains the name.\n/// @remarks The name must be begin by a uppercase; otherwise std::invalid_argument throws.\n/// @exception std::invalid_argument name not started by uppercase.\nvoid my_func(const std::string& name) {\n};\n")),(0,r.kt)("p",null,"This example of doxygen documented class (application_context.h) shows some doxygen commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#pragma once\n#include \"form.h\"\n\n/// @brief The xtd namespace contains all fundamental classes to access Hardware, Os, System, and more.\nnamespace xtd {\n  /// @brief The xtd::forms namespace contains classes for creating Windows-based applications that take full advantage of the rich user interface features available in the Microsoft Windows operating system, Apple macOS and Linux like Ubuntu operating system.\n  namespace forms {\n    /// @cond\n    class application;\n    /// @endcond\n    \n    /// @brief Specifies the contextual information about an application thread.\n    /// @remarks You can use the application_context class to redefine the circumstances that cause a message loop to exit. By default, the application_context listens to the closed event on the application's main form, then exits the thread's message loop.\n    /// @par Examples\n    /// The following code example demonstrates the use of application and application_context classes.\n    /// @include application_context.cpp\n    class application_context {\n    public:\n      /// @brief Initializes a new instance of the application_context class with no context.\n      application_context() = default;\n      /// @brief Initializes a new instance of the application_context class with the specified Form.\n      /// @param main_form The main form of the application to use for context.\n      /// @remarks If on_main_form_closed is not overridden, the message loop of the thread terminates when main_form is closed.\n      explicit application_context(const form& main_form) {this->main_form(main_form);}\n\n      /// @cond\n      virtual ~application_context() {\n        if (main_form_ != nullptr) main_form_->handle_destroyed -= {*this, &application_context::on_main_form_closed};\n      }\n      /// @endcond\n      \n      /// @brief Gets the form to use as context.\n      /// @return The form to use as context.\n      /// @remarks This property determines the main form for this context. This property can change at any time. If on_main_form_closed is not overridden, the message loop of the thread terminates when the main_form parameter closes.\n      const form& main_form() const {return *main_form_;}\n      /// @brief Gets or sets the Form to use as context.\n      /// @return The form to use as context.\n      /// @remarks This property determines the main form for this context. This property can change at any time. If on_main_form_closed is not overridden, the message loop of the thread terminates when the main_form parameter closes.\n      form& main_form() {return *main_form_;}\n      /// @brief Sets the Form to use as context.\n      /// @param main_form The form to use as context.\n      /// @remarks This property determines the main form for this context. This property can change at any time. If on_main_form_closed is not overridden, the message loop of the thread terminates when the main_form parameter closes.\n      void main_form(const form& main_form) {\n        if (main_form_ != nullptr) main_form_->handle_destroyed -= {*this, &application_context::on_main_form_closed};\n        main_form_ = const_cast<form*>(&main_form);\n        main_form_->handle_destroyed += {*this, &application_context::on_main_form_closed};\n      }\n\n      /// @brief Gets an object that contains data about the control.\n      /// @return A std::any that contains data about the control. The default is empty.\n      /// @remarks Any type of class can be assigned to this property.\n      /// @remarks A common use for the tag property is to store data that is closely associated with the control. For example, if you have a control that displays information about a customer, you might store a data_set that contains the customer's order history in that control's tag property so the data can be accessed quickly.\n      std::any tag() const {return tag_;}\n      /// @brief Sets an object that contains data about the control.\n      /// @param tag A std::any that contains data about the control. The default is empty.\n      /// @remarks Any type of class can be assigned to this property.\n      /// @remarks A common use for the tag property is to store data that is closely associated with the control. For example, if you have a control that displays information about a customer, you might store a data_set that contains the customer's order history in that control's tag property so the data can be accessed quickly.\n      void tag(std::any tag) {tag_ = tag;}\n\n      /// @brief Occurs when the message loop of the thread should be terminated, by calling exit_thread().\n      event<application_context, event_handler<const application_context&>> thread_exit;\n      \n      /// @brief Terminates the message loop of the thread.\n      /// @remarks This method calls exit_thread_core.\n      /// @note exit_thread and exit_thread_core do not actually cause the thread to terminate. These methods raise the thread_exit event to which the Application object listens. The Application object then terminates the thread.\n      void exit_thread() {exit_thread_core();}\n      \n    protected:\n      /// @brief Terminates the message loop of the thread.\n      /// @remarks This method is called from exit_thread.\n      /// @note exit_thread and exit_thread_core do not actually cause the thread to terminate. These methods raise the thread_exit event to which the Application object listens. The Application object then terminates the thread.\n      virtual void exit_thread_core() {thread_exit(*this, event_args::empty);}\n      \n      /// @brief Calls ExitThreadCore(), which raises the ThreadExit event.\n      /// @param sender The object that raised the event.\n      /// @param e The event_args that contains the event data.\n      /// @remarks The default implementation of this method calls exit_thread_core.\n      virtual void on_main_form_closed(const control& sender, const event_args& e) {\n        if (!main_form_->recreating_handle()) {\n          main_form_->handle_destroyed -= {*this, &application_context::on_main_form_closed};\n          exit_thread_core();\n        }\n      }\n      \n    private:\n      /// @cond\n      friend class application;\n      /// @endcond\n      form* main_form_ = nullptr;\n      std::any tag_;\n    };\n  }\n}\n")),(0,r.kt)("p",null,"For more commands see ",(0,r.kt)("a",{parentName:"p",href:"http://www.stack.nl/~dimitri/doxygen/manual/commands.html"},"Doxygen Special commands")," and for more informations see ",(0,r.kt)("a",{parentName:"p",href:"http://www.stack.nl/~dimitri/doxygen/manual/index.html"},"Doxygen Manual"),"."),(0,r.kt)("h2",{id:"indentation"},"Indentation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Indent block contents"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace test {\n  class aclass {\n    void method() {\n      int x;\n      int y;\n    }\n  };\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Indent open and close braces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class aclass {\n  int afield;\n\n  void method() {\n  }\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Indent switch sections"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class aclass {\n  void method(int x) {\n    switch (x) {\n    case 1:\n      break;\n    }\n  }\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Indent case sections"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class aclass {\n  void method(int x) {\n    switch (x) {\n    case 1:\n      break;\n    }\n  }\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Indent label"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'class test {\n  void method() {\n  label:\n    console::write_line("Hello World");\n  }\n};\n')),(0,r.kt)("h2",{id:"new-lines"},"New lines"),(0,r.kt)("h4",{id:"new-line-options-for-braces"},"New line options for braces"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Place open brace on new line for types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class example {\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Place open brace on new line for methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Place open brace on new line for lambda expressions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  auto del = [](int i, int j) {\n  };\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Place open brace on new line for control blocks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  if (true) {\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Place open brace on new line for object initializers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  std::vector<int> array_list {\n    42, 24, 84\n  };\n}\n")),(0,r.kt)("h4",{id:"new-line-options-for-keywords"},"New line options for keywords"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT"),' Place "else" on new line'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  if (true) {\n    // ...\n  } else {\n    // ...\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT"),' Place "catch" on new line'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  try {\n    // ...\n  } catch(...) {\n    // ...\n  }\n}\n")),(0,r.kt)("h4",{id:"new-line-options-for-expressions"},"New line options for expressions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Place member object initializers on new line"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  xtd::drawing::point p {\n    10, 24\n  };\n}\n")),(0,r.kt)("h2",{id:"spacing"},"Spacing"),(0,r.kt)("h4",{id:"set-spacing-for-method-declarations"},"Set spacing for method declarations"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space between method name and its opening parenthesis"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space within argument list parentheses"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example(int i, int j) {\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space within empty argument list parentheses"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n}\n")),(0,r.kt)("h4",{id:"set-spacing-for-method-calls"},"Set spacing for method calls"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space between method name and its opening parenthesis"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  test();\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space within argument list parentheses"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  test(int i, int j);\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space within empty argument list parentheses"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  test();\n}\n")),(0,r.kt)("h4",{id:"set-other-spacing-options"},"Set other spacing options"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Insert space after keywords in control flow statements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  if (condition) {\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space within parentheses of expressions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  i = (5 + 3) * 2;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space within parentheses of type casts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  test = (const itest&)o;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space within parentheses of control flow statements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  if (condition) {\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space after casts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  test = (const itest&)o;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Insert space in declaration statements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  int x = 5;\n}\n")),(0,r.kt)("h4",{id:"set-spacing-for-square-brackets"},"Set spacing for square brackets"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space before open square bracket"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  i[5] = 3;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space within empty square brackets"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  test(int[] {1, 2});\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space within square brackets"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  i[5] = 3;\n}\n")),(0,r.kt)("h4",{id:"set-spacing-for-brackets"},"Set spacing for brackets"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Insert space after colon for base or interface in type declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class foo : public bar {\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Insert space after comma"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  int i = 0, j = 15;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space after dot"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  foo.bar().test();\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space after structure or class dereference"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  foo->bar()->test();\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO"),' Insert space after semicolon in "for" statement'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  for (int i = 0; i < 10; i++) {\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Insert space before colon for base or interface in type declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class foo : public bar {\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space before dot"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  foo.bar().test();\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT")," Insert space before structure or class dereference"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  foo->bar()->test();\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u274c DO NOT"),' Insert space before semicolon in "for" statement'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  for (int i = 0; i < 10; i++) {\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f DO")," Set spacing for operators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void example() {\n  i = (5 + 3) * 2;\n}\n")),(0,r.kt)("h2",{id:"see-also"},"See also"),(0,r.kt)("p",null,"\u200b"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/documentation/Design%20Guidelines"},"Design Guidelines")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}m.isMDXComponent=!0}}]);