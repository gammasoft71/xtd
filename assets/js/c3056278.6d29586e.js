"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[3909],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(f,s(s({ref:t},p),{},{components:n})):o.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},92928:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const a={},s="Console classes",i={unversionedId:"documentation/eBook/console_classes",id:"documentation/eBook/console_classes",title:"Console classes",description:"As mentioned in introduction xtd.forms is a part of xtd.",source:"@site/docs/documentation/eBook/console_classes.md",sourceDirName:"documentation/eBook",slug:"/documentation/eBook/console_classes",permalink:"/xtd/docs/documentation/eBook/console_classes",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"eBook",permalink:"/xtd/docs/documentation/eBook/"},next:{title:"Controls",permalink:"/xtd/docs/documentation/eBook/controls"}},l={},c=[{value:"console.cpp",id:"consolecpp",level:2},{value:"console_write_line.cpp",id:"console_write_linecpp",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"console-classes"},"Console classes"),(0,r.kt)("p",null,"As mentioned in ",(0,r.kt)("a",{parentName:"p",href:"/docs/documentation/eBook/introduction"},"introduction")," ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__forms.html"},"xtd.forms")," is a part of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gammasoft71/xtd"},"xtd"),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/gammasoft71/xtd"},"xtd")," and ",(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__forms.html"},"xtd.forms")," consist of a large group of helper classes that help programmers to do their job. These include classes for working with strings, files, streams, console, unit testing, or network. Here we will show only a tiny drop of the whole lake."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__core.html"},"xtd.core")," library can be used to create console applications. In this chapter, we will illustrate some of the helper classes in console based applications."),(0,r.kt)("h1",{id:"xtdconsole"},"xtd::console"),(0,r.kt)("p",null,"This is a simple console application. The application puts some text into the console window."),(0,r.kt)("h2",{id:"consolecpp"},"console.cpp"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd.core>\n\nauto main(int argc, char* argv[]) -> int {\n  xtd::console::write_line("A xtd console application");\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A xtd console application\n")),(0,r.kt)("p",null,"This is the output."),(0,r.kt)("h2",{id:"console_write_linecpp"},"console_write_line.cpp"),(0,r.kt)("p",null,"The application puts some formatted texts into the console window."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd.core>\n\nauto main(int argc, char* argv[]) -> int {\n  auto number = 1024;\n  \n  xtd::console::write_line("number \'{}\' :", number);\n  xtd::console::write_line("  binary 0b{:B16}", number);\n  xtd::console::write_line("  octal \\\\{:O}", number);\n  xtd::console::write_line("  decimal {:D}", number);\n  xtd::console::write_line("  hexa 0x{:X4}", number);\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"number '1024' :\n  binary 0b0000010000000000\n  octal \\2000\n  decimal 1024\n  hexa 0x0400\n")),(0,r.kt)("p",null,"This is the output"),(0,r.kt)("h1",{id:"xtdenvironment"},"xtd::environment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd.core>\n\nusing namespace std::literals;\n\nauto main(int argc, char* argv[]) -> int {\n  auto str1 = xtd::environment::os_version().desktop_environment();\n  auto str2 = "desktop"s;\n  auto str3 = "environment"s;\n\n  xtd::console::write_line(xtd::strings::join(" ", {str1, str2, str3}));\n}\n')),(0,r.kt)("h1",{id:"xtdstrings"},"xtd::strings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd.core>\n\nusing namespace std::literals;\n\nauto main(int argc, char* argv[]) -> int {\n  auto str1 = xtd::environment::os_version().desktop_environment();\n  auto str2 = "desktop"s;\n  auto str3 = "environment"s;\n\n  xtd::console::write_line(xtd::strings::join(" ", {str1, str2, str3}));\n}\n')),(0,r.kt)("h1",{id:"see-also"},"See also"),(0,r.kt)("p",null,"\u200b\nOther Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/documentation/eBook"},"eBook"))))}u.isMDXComponent=!0}}]);