"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[1689],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>p});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(r),p=a,f=u["".concat(l,".").concat(p)]||u[p]||m[p]||o;return r?n.createElement(f,i(i({ref:t},d),{},{components:r})):n.createElement(f,i({ref:t},d))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},81250:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={},i="How to: Write a Text File",s={unversionedId:"documentation/Guides/xtd.core/Common I:O tasks/write_a_text_file",id:"documentation/Guides/xtd.core/Common I:O tasks/write_a_text_file",title:"How to: Write a Text File",description:"The following code example demonstrates how to create a text file and write text to it using the xtd::stream_writer constructor argument).",source:"@site/docs/documentation/Guides/xtd.core/Common I:O tasks/write_a_text_file.md",sourceDirName:"documentation/Guides/xtd.core/Common I:O tasks",slug:"/documentation/Guides/xtd.core/Common I:O tasks/write_a_text_file",permalink:"/xtd/docs/documentation/Guides/xtd.core/Common I:O tasks/write_a_text_file",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"File and stream I/O",permalink:"/xtd/docs/documentation/Guides/xtd.core/Common I:O tasks/file_and_stream_io"},next:{title:"main function and startup_ keyword",permalink:"/xtd/docs/documentation/Guides/xtd.core/Entry point/main_and_startup"}},l={},c=[{value:"See also",id:"see-also",level:2}],d={toc:c};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-write-a-text-file"},"How to: Write a Text File"),(0,a.kt)("p",null,"The following code example demonstrates how to create a text file and write text to it using the xtd::io::stream_writer class, which is defined in the ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/namespacextd_1_1io.html"},"xtd::io")," namespace. The ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1io_1_1stream__writer.html"},"xtd::io::stream_writer")," constructor takes the name of the file to be created. If the file exists, it is overwritten (unless you pass ",(0,a.kt)("em",{parentName:"p"},"true")," as the second ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1io_1_1stream__writer.html"},"xtd::io::stream_writer")," constructor argument).\nThe file is then filed using the ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1io_1_1text__writer.html#a8d13fc012efd84779130b80a0d6ddb1c"},"xtd::io::stream_writer::write")," and ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1io_1_1text__writer.html#a4c3a56d538a98adb83dc4b9f32aeacd8"},"xtd::io::stream_writer::write_line")," functions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::io;\n\nclass program {\npublic:\n  static auto main() {\n    string file_name = "textfile.txt";\n    \n    stream_writer sw(file_name);\n    sw.write_line("A text file is born!");\n    sw.write("You can use write_line");\n    sw.write_line("...or just write");\n    sw.write_line("and do {0} output too.", "formatted");\n    sw.write_line("You can also send non-text objects:");\n    sw.write_line(date_time::now());\n    sw.close();\n    console::write_line("a new file (\'{0}\') has been written", file_name);\n  }\n};\n\nstartup_(program::main);\n')),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/documentation/Guides/xtd.core/Common%20I%3AO%20tasks"},"Common I/O Tasks")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/documentation/Guides/Overview/Tutorials"},"Tutorials")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}m.isMDXComponent=!0}}]);