"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[7182],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=c(n),p=o,h=m["".concat(l,".").concat(p)]||m[p]||u[p]||r;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},53106:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={},s="Control and events",i={unversionedId:"documentation/Guides/xtd.forms/Overview/control_events",id:"documentation/Guides/xtd.forms/Overview/control_events",title:"Control and events",description:"As in all GUI frameworks, an xtd application is event based.",source:"@site/docs/documentation/Guides/xtd.forms/Overview/control_events.md",sourceDirName:"documentation/Guides/xtd.forms/Overview",slug:"/documentation/Guides/xtd.forms/Overview/control_events",permalink:"/xtd/docs/documentation/Guides/xtd.forms/Overview/control_events",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Control appearance",permalink:"/xtd/docs/documentation/Guides/xtd.forms/Overview/control_appearance"},next:{title:"Controls",permalink:"/xtd/docs/documentation/Guides/xtd.forms/Overview/controls"}},l={},c=[{value:"Remarks",id:"remarks",level:2},{value:"Here is a Win32 example of a basic application",id:"here-is-a-win32-example-of-a-basic-application",level:2},{value:"Remarks",id:"remarks-1",level:3},{value:"How to respond to an event",id:"how-to-respond-to-an-event",level:2},{value:"event_handler",id:"event_handler",level:3},{value:"Overriding the protected method associated with the event",id:"overriding-the-protected-method-associated-with-the-event",level:3},{value:"Remarks",id:"remarks-2",level:3}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"control-and-events"},"Control and events"),(0,o.kt)("p",null,"As in all GUI frameworks, an xtd application is event based."),(0,o.kt)("p",null,"Events are either generated by the system or by a user action (for example when a property changed)."),(0,o.kt)("p",null,"The event system of xtd is based on the Windows event system. This means that native toolkits have to convert their events to match Windows events. This is not important for the end user of xtd but for the developers of xtd."),(0,o.kt)("h1",{id:"basic-operation"},"Basic Operation"),(0,o.kt)("p",null,"The Operating System uses an event loop to send and receive events."),(0,o.kt)("p",null,"This is how the Windows event loop works."),(0,o.kt)("p",null,"In main we will create the different controls necessary for the application and then we will create an event loop that will send and receive events until we quit the application.\nFor each created control we will assign a method (usually called ",(0,o.kt)("inlineCode",{parentName:"p"},"WndProc"),") as well as a fallback method (usually called ",(0,o.kt)("inlineCode",{parentName:"p"},"DefWndProc"),") to receive the events related to the control.\nThe fallback method is necessary to be able to use the default event handling for"),(0,o.kt)("h2",{id:"remarks"},"Remarks"),(0,o.kt)("p",null,"Some events like WM_COMMAND, WM_NOTIFY, ... are not sent to the control directly but to the parent control."),(0,o.kt)("h2",{id:"here-is-a-win32-example-of-a-basic-application"},"Here is a Win32 example of a basic application"),(0,o.kt)("p",null,"In the example below, we will just create a window with two buttons and two static texts.\nWe will associate a WndProc only to the window because pressing the button results in a WM_COMMAND event that is sent to the parent control (in this case the window).\nAt the end of the main function we will execute the event loop until the window is closed by the user."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma comment(linker,"\\"/manifestdependency:type=\'win32\' name=\'Microsoft.Windows.Common-Controls\' version=\'6.0.0.0\' processorArchitecture=\'*\' publicKeyToken=\'6595b64144ccf1df\' language=\'*\'\\"")\n\n#include <string>\n#include <Windows.h>\n#include <CommCtrl.h>\n\nusing namespace std;\nusing namespace std::literals;\n\n// Handles of controls\nHWND window = nullptr;\nHWND button1 = nullptr;\nHWND button2 = nullptr;\nHWND staticText1 = nullptr;\nHWND staticText2 = nullptr;\nWNDPROC defWndProc = nullptr;\n\n// Window close event\nLRESULT OnWindowClose(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {\n  PostQuitMessage(0);\n  return CallWindowProc(defWndProc, hwnd, message, wParam, lParam);\n}\n\n// button1 click event\nLRESULT OnButton1Click(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {\n  static auto buttonClicked = 0;\n  auto result = L"button1 clicked "s + to_wstring(++buttonClicked) + L" times"s;\n  SendMessage(staticText1, WM_SETTEXT, 0, reinterpret_cast<LPARAM>(result.c_str()));\n  return CallWindowProc(defWndProc, hwnd, message, wParam, lParam);\n}\n\n// button2 click event\nLRESULT OnButton2Click(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {\n  static auto buttonClicked = 0;\n  auto result = L"button2 clicked "s + to_wstring(++buttonClicked) + L" times"s;\n  SendMessage(staticText2, WM_SETTEXT, 0, reinterpret_cast<LPARAM>(result.c_str()));\n  return CallWindowProc(defWndProc, hwnd, message, wParam, lParam);\n}\n\n// WNndProc associate to the Window\nLRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {\n  if (message == WM_CLOSE && hwnd == window) return OnWindowClose(hwnd, message, wParam, lParam);\n  if (message == WM_COMMAND && HIWORD(wParam) == BN_CLICKED && reinterpret_cast<HWND>(lParam) == button1) return OnButton1Click(hwnd, message, wParam, lParam);\n  if (message == WM_COMMAND && HIWORD(wParam) == BN_CLICKED && reinterpret_cast<HWND>(lParam) == button2) return OnButton2Click(hwnd, message, wParam, lParam);\n  return CallWindowProc(defWndProc, hwnd, message, wParam, lParam);\n}\n\n// Main entry point\nauto main() -> int {\n  // Controls creation\n  window = CreateWindowEx(0, WC_DIALOG, L"Button example", WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 300, 300, nullptr, nullptr, nullptr, nullptr);\n  button1 = CreateWindowEx(0, WC_BUTTON, L"button1", WS_CHILD | WS_VISIBLE, 50, 50, 75, 25, window, nullptr, nullptr, nullptr);\n  button2 = CreateWindowEx(0, WC_BUTTON, L"button2", WS_CHILD | WS_VISIBLE, 50, 100, 200, 75, window, nullptr, nullptr, nullptr);\n  staticText1 = CreateWindowEx(0, WC_STATIC, L"button1 clicked 0 times", WS_CHILD | WS_VISIBLE, 50, 200, 200, 23, window, nullptr, nullptr, nullptr);\n  staticText2 = CreateWindowEx(0, WC_STATIC, L"button2 clicked 0 times", WS_CHILD | WS_VISIBLE, 50, 230, 200, 23, window, nullptr, nullptr, nullptr);\n  \n  // WndProc association to the window and assignment of the defWndProc\n  defWndProc = reinterpret_cast<WNDPROC>(SetWindowLongPtr(window, GWLP_WNDPROC, reinterpret_cast<LONG_PTR>(WndProc)));\n  \n  // Displays window\n  ShowWindow(window, SW_SHOW);\n\n  // Run Windows loop message until window closed\n  MSG message = {0};\n  while (GetMessage(&message, nullptr, 0, 0)) {\n    TranslateMessage(&message);\n    DispatchMessage(&message);\n  }\n}\n')),(0,o.kt)("p",null,"The following code show the same example with xtd"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::forms;\n\n// Main entry point\nauto main() -> int {\n  // Controls creation\n  form form1;\n  form1.text("Button example");\n  button button1;\n  button1.parent(form1).text("button 1").bounds({50, 50, 75, 25});\n  button button2;\n  button2.parent(form1).text("button 2").bounds({50, 100, 200, 75});\n  label label1;\n  label1.parent(form1).text("button1 clicked 0 times").bounds({50, 200, 200, 20});\n  label label2;\n  label2.parent(form1).text("button2 clicked 0 times").bounds({50, 230, 200, 20});\n  \n  // button1 click event\n  button1.click += [&] {\n    static auto button_clicked = 0;\n    label1.text(string::format("button1 clicked {} times", ++button_clicked));\n  };\n\n  // button2 click event\n  button2.click += [&] {\n    static auto button_clicked = 0;\n    label2.text(string::format("button2 clicked {} times", ++button_clicked));\n  };\n\n  // Displays form and run Windows loop message until form closed\n  application::run(form1);\n}\n')),(0,o.kt)("p",null,"What can we see apart from the verbosity and the c++ lambda functions?"),(0,o.kt)("p",null,"The code is based on the same model.\nIndeed, even if you can't see it when reading the code, the ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1application.html#ad9f33fc4a9bfe8735d80ebabdeb7f3f2"},"application::run(const form& main_form)")," method actually hides the Windows message loop and the display of the form passed to it as a parameter."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga651752ad0a3ec381983aa0b367291a68"},"control::click")," events of xtd are also based on the ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1control.html#ac75d78bfc73154decabddc734cd28096"},"control::wnd_proc")," and ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1control.html#a186a0852ce6b39c2b741c1690ecf2f4d"},"control::def_wnd_proc"),"] functions which are protected member functions of the ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1control.html"},"control")," class."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga67bf4e48a317782b99524b8e25bce608"},"form::form_closed")," event automatically closes the application because it is considered to be the main window when passed as a parameter to the ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1application.html#ad9f33fc4a9bfe8735d80ebabdeb7f3f2"},"application::run(const form& main_form)")," method. "),(0,o.kt)("h3",{id:"remarks-1"},"Remarks"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This behavior can be changed by using the ",(0,o.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1application__context.html"},"application_context")," class and  the ",(0,o.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1application.html#ab79aa8eba69cde497bae6657cb11eab8"},"application::run(application_context& context")," method."),(0,o.kt)("li",{parentName:"ul"},"Although the event model is based on the Windows model, xtd works on Windows, macOS and Linux operating systems. Indeed the role of the native abstraction library allows to convert the toolkit event model into the Windows event model.")),(0,o.kt)("h2",{id:"how-to-respond-to-an-event"},"How to respond to an event"),(0,o.kt)("p",null,"Two possible methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Respond to an event by associating an ",(0,o.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga0b1801aa17fa22ddacfdcccd7b25316b"},"event_handler"),". This method is the most ripid and usually the default choice."),(0,o.kt)("li",{parentName:"ul"},"By overriding the protected method associated with the event in a derived class. This method is recommended when creating a custom control.")),(0,o.kt)("h3",{id:"event_handler"},"event_handler"),(0,o.kt)("p",null,"Let's take a simple example of a ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga651752ad0a3ec381983aa0b367291a68"},"click")," on a ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1button.html"},"button"),"."),(0,o.kt)("p",null,"The following code shows how to associate an ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga0b1801aa17fa22ddacfdcccd7b25316b"},"event_handler")," to the ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga651752ad0a3ec381983aa0b367291a68"},"control::click")," event."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd::forms;\n\nclass form1 : public form {\npublic:\n  form1() {\n    button1.parent(*this);\n    button1.text("Button 1");\n    button1.location({10, 10});\n    button1.click += [&] {\n      message_box::show("Button clicked!");\n    };\n  }\n  \nprivate:\n  button button1;\n};\n\nauto main() -> int {\n  application::run(form1 {});\n}\n')),(0,o.kt)("p",null,"In this example we use a lambda function, but we could as well have associated an external function to the class ",(0,o.kt)("inlineCode",{parentName:"p"},"form1")," or an internal method. We could also have specified the arguments of the ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga651752ad0a3ec381983aa0b367291a68"},"click")," event if we needed them."),(0,o.kt)("p",null,"The following example uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"form1::on_button_click")," member function with event ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga651752ad0a3ec381983aa0b367291a68"},"click")," arguments. Even if we don't need the arguments it's just for the example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::forms;\n\nclass form1 : public form {\npublic:\n  form1() {\n    button1.parent(*this);\n    button1.text("Button 1");\n    button1.location({10, 10});\n    button1.click += {*this, &form1::on_button1_click};\n  }\n  \nprivate:\n  void on_button1_click(object& sender, const event_args& e) {\n    message_box::show("Button clicked!");\n  }\n  \n  button button1;\n};\n\nauto main() -> int {\n  application::run(form1 {});\n}\n')),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Types%20overview/delegates"},"delegates")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/documentation/Guides/xtd.core/Types%20overview/events"},"events")," for more information."),(0,o.kt)("h3",{id:"overriding-the-protected-method-associated-with-the-event"},"Overriding the protected method associated with the event"),(0,o.kt)("p",null,"Let's take the previous example but overload the ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga0127de8590b04dd14561ba777bd8a615"},"on_click")," method associated to the ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__events.html#ga651752ad0a3ec381983aa0b367291a68"},"click")," event. To do this we need to create a class derived from the ",(0,o.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1button.html"},"button")," class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::forms;\n\nclass my_button : public button {\npublic:\n  my_button() = default;\n  \nprotected:\n  void on_click(const event_args& e) override {\n    button::on_click(e);\n    message_box::show("Button clicked!");\n  }\n};\n\nclass form1 : public form {\npublic:\n  form1() {\n    button1.parent(*this);\n    button1.text("Button 1");\n    button1.location({10, 10});\n  }\n  \nprivate:\n  my_button button1;\n};\n\nauto main() -> int {\n  application::run(form1 {});\n}\n')),(0,o.kt)("h3",{id:"remarks-2"},"Remarks"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Each event has an associated protected method that starts with ",(0,o.kt)("inlineCode",{parentName:"li"},"on_")," followed by the event name."),(0,o.kt)("li",{parentName:"ul"},"When you override a method, don't forget to call the method of the inherited class."),(0,o.kt)("li",{parentName:"ul"},"Each control has its own events or not and also has those of the inherited class.")),(0,o.kt)("h1",{id:"see-also"},"See also"),(0,o.kt)("p",null,"\u200b"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/documentation/Guides"},"Guides")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}u.isMDXComponent=!0}}]);