"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[4999],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),v=r,m=d["".concat(c,".").concat(v)]||d[v]||p[v]||o;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},94578:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:16},l="Class organization",i={unversionedId:"documentation/Internal/class_organization",id:"documentation/Internal/class_organization",title:"Class organization",description:"Classic C++",source:"@site/docs/documentation/Internal/class_organization.md",sourceDirName:"documentation/Internal",slug:"/documentation/Internal/class_organization",permalink:"/xtd/docs/documentation/Internal/class_organization",draft:!1,tags:[],version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"xtd in numbers (last update 2024-10-13)",permalink:"/xtd/docs/documentation/Internal/some_numbers"},next:{title:"Continuous Integration build status",permalink:"/xtd/docs/documentation/Internal/CI build status"}},c={},s=[{value:"Classic C++",id:"classic-c",level:2},{value:"Proposal for xtd",id:"proposal-for-xtd",level:2},{value:"PRO",id:"pro",level:2},{value:"CON",id:"con",level:2},{value:"Conclusion",id:"conclusion",level:2}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"class-organization"},"Class organization"),(0,r.kt)("h2",{id:"classic-c"},"Classic C++"),(0,r.kt)("p",null,"In c++ classqiue, members are organized by their access level: public, protected and private like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class my_class {\npublic:\n  my_class(int value_a, int value_b) : value_a(value_a), value_b_(value_b) {}\n  my_class(const my_class&) = default;\n  \n  int value_a() const noexcept {return value_a_;}\n  \n  int value_b() const noexcept {return value_b_;}\n  \nprotected:\n  my_class() = default;\n  \n  void value_a(int value) noexcept {value_a_ = value;}\n  void value_b(int value) noexcept {value_b_ = value;}\n  \nprivate:\n  int value_a_ = 0;\n  int value_b_ = 0;\n};\n")),(0,r.kt)("h2",{id:"proposal-for-xtd"},"Proposal for xtd"),(0,r.kt)("p",null,"It would make more sense to group mebmres by functionality and not by access. I imagine something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class my_class {\n  protected_ my_class() = default;\n  public_ my_class(int value_a, int value_b) : value_a(value_a), value_b_(value_b) {}\n  public_ my_class(const my_class&) = default;\n  \n  private_ int value_a_ = 0;\n  public_ int value_a() const noexcept {return value_a_;}\n  protected_ void value_a(int value) noexcept {value_a_ = value;}\n  \n  private_ int value_b_ = 0;\n  public_ int value_b() const noexcept {return value_b_;}\n  protected_ void value_b(int value) noexcept {value_b_ = value;}    \n};\n")),(0,r.kt)("p",null,"To be able to write a class like above, you obviously need three more keywords (there are already some like abastract",(0,r.kt)("em",{parentName:"p"},", interface"),", ...)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#define private_ private:\n#define protected_ protected:\n#define public_ public:\n")),(0,r.kt)("h2",{id:"pro"},"PRO"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"More concise"),(0,r.kt)("li",{parentName:"ul"},"In a big class with a lot of people and a lot of documents, you can see the type of access.")),(0,r.kt)("h2",{id:"con"},"CON"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"if you forget one of the keywords to a member, it is the keyword of the previous member that will be applied")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"It changes the way of writing but the organization is much clearer.\nIt looks much more like a modern language like Java or CSharp."),(0,r.kt)("p",null,'But the change is too "disruptive", and that it risks to disturb too much the habits of c++ developers. '),(0,r.kt)("p",null,"It will remain only conceptual."))}p.isMDXComponent=!0}}]);