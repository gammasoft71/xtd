"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[1342],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var l=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,l,o=function(e,t){if(null==e)return{};var n,l,o={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=l.createContext({}),u=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=u(e.components);return l.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,b=p["".concat(s,".").concat(m)]||p[m]||c[m]||i;return n?l.createElement(b,a(a({ref:t},d),{},{components:n})):l.createElement(b,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,a[1]=r;for(var u=2;u<i;u++)a[u]=n[u];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}p.displayName="MDXCreateElement"},47364:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>u});var l=n(87462),o=(n(67294),n(3905));const i={sidebar_position:11},a="Investigations to speed up the build of xtd (**Internal use only**)",r={unversionedId:"documentation/Internal/speedup_build",id:"documentation/Internal/speedup_build",title:"Investigations to speed up the build of xtd (**Internal use only**)",description:"Multiple process build flags",source:"@site/docs/documentation/Internal/speedup_build.md",sourceDirName:"documentation/Internal",slug:"/documentation/Internal/speedup_build",permalink:"/xtd/docs/documentation/Internal/speedup_build",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Theme (**Internal use only**)",permalink:"/xtd/docs/documentation/Internal/theme"},next:{title:"iOS build (**Internal use only**)",permalink:"/xtd/docs/documentation/Internal/ios_build"}},s={},u=[{value:"Multiple process build flags",id:"multiple-process-build-flags",level:2},{value:"Windows",id:"windows",level:3},{value:"Conclusions",id:"conclusions",level:4},{value:"macOS",id:"macos",level:3},{value:"Linux",id:"linux",level:3},{value:"example make",id:"example-make",level:4},{value:"example cmake",id:"example-cmake",level:4},{value:"Conclusions",id:"conclusions-1",level:4},{value:"Cotire",id:"cotire",level:2},{value:"xtd install script",id:"xtd-install-script",level:3},{value:"Time to install xtd on linux Unbuntu (4 cores and 8 Gb memory)",id:"time-to-install-xtd-on-linux-unbuntu-4-cores-and-8-gb-memory",level:3},{value:"Time to install xtd on linux Unbuntu (4 cores and 8 Gb memory) with cotire",id:"time-to-install-xtd-on-linux-unbuntu-4-cores-and-8-gb-memory-with-cotire",level:3},{value:"Conclusions",id:"conclusions-2",level:3}],d={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"investigations-to-speed-up-the-build-of-xtd-internal-use-only"},"Investigations to speed up the build of xtd (",(0,o.kt)("strong",{parentName:"h1"},"Internal use only"),")"),(0,o.kt)("h2",{id:"multiple-process-build-flags"},"Multiple process build flags"),(0,o.kt)("h3",{id:"windows"},"Windows"),(0,o.kt)("p",null,"Visuall Studio has a ",(0,o.kt)("strong",{parentName:"p"},'"/MP"')," flag that allows you to run builds in parallel on different processes."),(0,o.kt)("p",null,"A new option ",(0,o.kt)("strong",{parentName:"p"},"XTD_SET_COMPILER_OPTION_BUILD_ON_MULTIPLE_PROCESSES ")," is added in xtd and number of precessorrs are dettected by CMake and addded to MSVC comile flags."),(0,o.kt)("h4",{id:"conclusions"},"Conclusions"),(0,o.kt)("p",null,"Currently, the flag is doing the job, but in full build, Windows freeze completely ..."),(0,o.kt)("p",null,"We contunue the investigation for more information. (Bader)"),(0,o.kt)("h3",{id:"macos"},"macOS"),(0,o.kt)("p",null,"Xcode build in multi processes natively."),(0,o.kt)("p",null,"Remarks : For command line tools see ",(0,o.kt)("a",{parentName:"p",href:"#linux"},"Linux")),(0,o.kt)("p",null,"The build seems optimized. (Gammasof)"),(0,o.kt)("h3",{id:"linux"},"Linux"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To build multi porcess add specific flag ",(0,o.kt)("strong",{parentName:"li"},'"-j N"')," to make command (N : number of precesses)."),(0,o.kt)("li",{parentName:"ul"},"To build multi porcess add specific flag ",(0,o.kt)("strong",{parentName:"li"},'"-- -j N"')," to cmake command (N : number of precesses)."),(0,o.kt)("li",{parentName:"ul"},"Generally we can use ",(0,o.kt)("strong",{parentName:"li"},'"nproc"')," command to know the number roof proocessosrs.")),(0,o.kt)("h4",{id:"example-make"},"example make"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"make -j 8\n")),(0,o.kt)("p",null,"or with nproc"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"make -j $(naproc)\n")),(0,o.kt)("h4",{id:"example-cmake"},"example cmake"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cmake -- -j 8\n")),(0,o.kt)("p",null,"or with nproc"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cmake-- -j $(naproc)\n")),(0,o.kt)("h4",{id:"conclusions-1"},"Conclusions"),(0,o.kt)("p",null,"The build seems optimized. (Gammasof)"),(0,o.kt)("h2",{id:"cotire"},"Cotire"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/sakra/cotire"},"Cotire")," (compile time reducer) is a CMake module that speeds up the build process of CMake based build "),(0,o.kt)("p",null,"We investigate to add cotire to build of xtd."),(0,o.kt)("h3",{id:"xtd-install-script"},"xtd install script"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"git clone wxWidgets 3.2.2.1"),(0,o.kt)("li",{parentName:"ul"},"build and install wxWidgets in Debug and Release."),(0,o.kt)("li",{parentName:"ul"},"build and install xtd (without unit tests) in Debug and Release.")),(0,o.kt)("h3",{id:"time-to-install-xtd-on-linux-unbuntu-4-cores-and-8-gb-memory"},"Time to install xtd on linux Unbuntu (4 cores and 8 Gb memory)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"real    34m30,458s\nuser    109m8,613s\nsys 8m32,720s\n")),(0,o.kt)("h3",{id:"time-to-install-xtd-on-linux-unbuntu-4-cores-and-8-gb-memory-with-cotire"},"Time to install xtd on linux Unbuntu (4 cores and 8 Gb memory) with cotire"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"real    34m52,459s\nuser    102m18,172s\nsys 9m31,467s\n")),(0,o.kt)("p",null,"Exactly the same time for both builds.\nWe can see the log lines of the cotire and that it is doing its job... but it doesn't speed up the time."),(0,o.kt)("h3",{id:"conclusions-2"},"Conclusions"),(0,o.kt)("p",null,"The result is not convincing."),(0,o.kt)("p",null,"We stop the investigation (Gammasoft)"))}c.isMDXComponent=!0}}]);