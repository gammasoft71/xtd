"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[3578],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>c});var o=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function r(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=o.createContext({}),m=function(t){var e=o.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=m(t.components);return o.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},_=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,s=t.parentName,d=r(t,["components","mdxType","originalType","parentName"]),_=m(n),c=a,p=_["".concat(s,".").concat(c)]||_[c]||u[c]||i;return n?o.createElement(p,l(l({ref:e},d),{},{components:n})):o.createElement(p,l({ref:e},d))}));function c(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,l=new Array(i);l[0]=_;var r={};for(var s in e)hasOwnProperty.call(e,s)&&(r[s]=e[s]);r.originalType=t,r.mdxType="string"==typeof t?t:a,l[1]=r;for(var m=2;m<i;m++)l[m]=n[m];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}_.displayName="MDXCreateElement"},61909:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>m});var o=n(87462),a=(n(67294),n(3905));const i={},l="Form",r={unversionedId:"documentation/Guides/Overview/Tutorials/form",id:"documentation/Guides/Overview/Tutorials/form",title:"Form",description:"In This Section",source:"@site/docs/documentation/Guides/Overview/Tutorials/form.md",sourceDirName:"documentation/Guides/Overview/Tutorials",slug:"/documentation/Guides/Overview/Tutorials/form",permalink:"/xtd/docs/documentation/Guides/Overview/Tutorials/form",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Current stack frame (cst)",permalink:"/xtd/docs/documentation/Guides/Overview/Tutorials/csf"},next:{title:"Ignore test method (ignore_test_method)",permalink:"/xtd/docs/documentation/Guides/Overview/Tutorials/ingore_test_method"}},s={},m=[{value:"In This Section",id:"in-this-section",level:2},{value:"Overview",id:"overview",level:2},{value:"Show",id:"show",level:3},{value:"Remarks",id:"remarks",level:4},{value:"Example",id:"example",level:4},{value:"Start position",id:"start-position",level:3},{value:"Window state",id:"window-state",level:3},{value:"Examples",id:"examples",level:4},{value:"Form",id:"form-1",level:2},{value:"MDI and child",id:"mdi-and-child",level:2},{value:"Dialog",id:"dialog",level:2},{value:"Examples",id:"examples-1",level:3},{value:"See also",id:"see-also",level:2}],d={toc:m};function u(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"form"},"Form"),(0,a.kt)("h2",{id:"in-this-section"},"In This Section"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#overview"},"Overview"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#show"},"Show")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#start-position"},"Start position")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#window-state"},"Window state")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#form"},"Form")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#mdi-and-child"},"MDI and child")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#dialog"},"dialog"))),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The forms are what we call top level controls."),(0,a.kt)("p",null,"There are three types of forms:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"form"),(0,a.kt)("li",{parentName:"ul"},"MDI and child"),(0,a.kt)("li",{parentName:"ul"},"dialog")),(0,a.kt)("h3",{id:"show"},"Show"),(0,a.kt)("p",null,"These forms can be displayed in different ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Show normal : shows ",(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1form.html"},"xtd::forms::form")," normally."),(0,a.kt)("li",{parentName:"ul"},"Show modeless : shows modeless dialog on a ",(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1form.html"},"xtd::forms::form")," (specified by handle from ",(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1iwin32__window.html"},"xtd::forms::iw32_window"),") or on application."),(0,a.kt)("li",{parentName:"ul"},"Show top most : shows top most form on application."),(0,a.kt)("li",{parentName:"ul"},"Show modal : shows modal dialog on a form (specified by handle from ",(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1iwin32__window.html"},"xtd::forms::iw32_window"),") or on application."),(0,a.kt)("li",{parentName:"ul"},"Show sheet : Shows sheet dialog on a form (specified by handle from ",(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1iwin32__window.html"},"xtd::forms::iw32_window"),")."),(0,a.kt)("li",{parentName:"ul"},"Show sheet modal : Shows sheet modal dialog on a form (specified by handle from ",(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1iwin32__window.html"},"xtd::forms::iw32_window"),").")),(0,a.kt)("h4",{id:"remarks"},"Remarks"),(0,a.kt)("p",null,"Sheet is a special dialog mode on macOS :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"TThe dialog is shown centered on form (if form is specifed) without title."),(0,a.kt)("li",{parentName:"ul"},"The method is not blocking and you must retrieve the result of the dialog at the closing event."),(0,a.kt)("li",{parentName:"ul"},"On other platforms than macOS, is a normal dialog, but you must also retrieve the result of the dialog on the close event but the method is blocking (this can be changed in the future). ")),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("p",null,"The following example demonstates the different ways to display a ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1form.html"},"xtd::forms::form"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace std;\nusing namespace xtd;\nusing namespace xtd::drawing;\nusing namespace xtd::forms;\n\nnamespace example {\n  class form1 : public form {\n  public:\n    form1() {\n      client_size({320, 610});\n      controls().push_back(layout_panel);\n      padding(5);\n      text("Form show example");\n\n      layout_panel.dock(dock_style::fill);\n      layout_panel.controls().push_back_range({button_normal, button_modeless, button_top_most, button_modal, button_sheet, button_sheet_modal});\n      layout_panel.control_layout_style(button_normal, {size_type::auto_size, true});\n      layout_panel.control_layout_style(button_modeless, {size_type::auto_size, true});\n      layout_panel.control_layout_style(button_top_most, {size_type::auto_size, true});\n      layout_panel.control_layout_style(button_modal, {size_type::auto_size, true});\n      layout_panel.control_layout_style(button_sheet, {size_type::auto_size, true});\n      layout_panel.control_layout_style(button_sheet_modal, {size_type::auto_size, true});\n\n      button_normal.text("Show normal");\n      button_normal.click += [&] {\n        auto dialog = make_unique<form>();\n        dialog->text("dialog show normal");\n        dialog->size({250, 100});\n        dialog->show();\n        dialogs.push_back(std::move(dialog));\n      };\n      \n      button_modeless.text("Show modeless");\n      button_modeless.click += [&] {\n        auto dialog = make_unique<form>();\n        dialog->text("dialog show modeless");\n        dialog->size({250, 100});\n        dialog->owner(*this).show();\n        dialogs.push_back(std::move(dialog));\n      };\n      \n      button_top_most.text("Show top most");\n      button_top_most.click += [&] {\n        auto dialog = make_unique<form>();\n        dialog->text("dialog top most");\n        dialog->size({250, 100});\n        dialog->top_most(true).show();\n        dialogs.push_back(std::move(dialog));\n      };\n      \n      button_modal.text("Show modal");\n      button_modal.click += [&] {\n        auto dialog = form::create("dialog show modal", size {250, 100});\n        dialog.show_dialog(*this);\n      };\n      \n      button_sheet.text("Show sheet");\n      button_sheet.click += [&] {\n        auto dialog = make_unique<form>();\n        dialog->text("dialog show sheet");\n        dialog->size({250, 100});\n        dialog->key_up += [&](object & control, key_event_args & e) {\n          if (e.key_code() == keys::escape) as<form&>(control).close();\n        };\n        dialog->show_sheet(*this);\n        dialogs.push_back(std::move(dialog));\n      };\n      \n      button_sheet_modal.text("Show sheet modal");\n      button_sheet_modal.click += [&] {\n        auto dialog = form::create("dialog show sheet modal", size {250, 100});\n        dialog.key_up += [&](object & control, key_event_args & e) {\n          if (e.key_code() == keys::escape) as<form&>(control).close();\n        };\n        dialog.show_sheet_dialog(*this);\n      };\n    }\n    \n    static auto main() {\n      application::run(form1());\n    }\n    \n  private:\n    vertical_layout_panel layout_panel;\n    button button_normal;\n    button button_modeless;\n    button button_top_most;\n    button button_modal;\n    button button_sheet;\n    button button_sheet_modal;\n    vector<shared_ptr<form>> dialogs;\n  };\n}\n\nstartup_(example::form1::main);\n')),(0,a.kt)("h3",{id:"start-position"},"Start position"),(0,a.kt)("p",null,"A form can be shown with different start positions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__forms.html#gac490ea79fddd26e2c8354e1e58701019"},"xtd::forms::form_start_postion::manual")," : The position of the form is determined by the Location property."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__forms.html#gac490ea79fddd26e2c8354e1e58701019"},"xtd::forms::form_start_postion::center_screen")," : The form is centered on the current display, and has the dimensions specified in the form's size."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__forms.html#gac490ea79fddd26e2c8354e1e58701019"},"xtd::forms::form_start_postion::windows_default_location")," : The form is positioned at the Windows default location and has the dimensions specified in the form's size."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__forms.html#gac490ea79fddd26e2c8354e1e58701019"},"xtd::forms::form_start_postion::windows_default_bounds")," : The form is positioned at the Windows default location and has the bounds determined by Windows default."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__forms.html#gac490ea79fddd26e2c8354e1e58701019"},"xtd::forms::form_start_postion::center_parent")," : The form is centered within the bounds of its parent form.")),(0,a.kt)("h3",{id:"window-state"},"Window state"),(0,a.kt)("p",null,"A form can be shown with different states:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__forms.html#ga8722681a872adc2cf18788bb45c4bce4"},"xtd::forms::form_window_state::normal")," : A default sized window."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__forms.html#ga8722681a872adc2cf18788bb45c4bce4"},"xtd::forms::form_window_state::minimized")," : A minimized window."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__forms.html#ga8722681a872adc2cf18788bb45c4bce4"},"xtd::forms::form_window_state::maximized")," : A maximized window."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/group__xtd__forms.html#ga8722681a872adc2cf18788bb45c4bce4"},"xtd::forms::form_window_state::full_screen")," : A full screen window.")),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"The folloing example demonstates the different ways to display a ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1form.html"},"xtd::forms::form"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#define TRACE\n#include <xtd/xtd>\n\nusing namespace xtd;\nusing namespace xtd::forms;\n\nclass form1 : public form {\npublic:\n  form1() {\n    *this << button_full_screen << button_maximize << button_minimize << button_normal;\n    text("Window state example");\n    resize += [&] {\n      button_full_screen.enabled(window_state() != form_window_state::full_screen && window_state() != form_window_state::maximized);\n      button_maximize.enabled(window_state() != form_window_state::maximized && window_state() != form_window_state::full_screen);\n      button_normal.enabled(window_state() != form_window_state::normal);\n      button_minimize.enabled(window_state() != form_window_state::minimized && window_state() != form_window_state::full_screen);\n\n      ctrace << string::format("resize: {}, {}", size(), window_state()) << std::endl;\n    };\n    client_size({410, 200});\n    window_state(form_window_state::maximized);\n    \n    button_full_screen.location({10, 10});\n    button_full_screen.text("Full screen");\n    button_full_screen.width(90);\n    button_full_screen.click += [&] {\n      window_state(form_window_state::full_screen);\n    };\n\n    button_maximize.location({110, 10});\n    button_maximize.text("Maximize");\n    button_maximize.width(90);\n    button_maximize.click += [&] {\n      window_state(form_window_state::maximized);\n    };\n    \n    button_normal.location({210, 10});\n    button_normal.text("Normal");\n    button_normal.width(90);\n    button_normal.click += [&] {\n      window_state(form_window_state::normal);\n    };\n\n    button_minimize.location({310, 10});\n    button_minimize.text("Minimize");\n    button_minimize.width(90);\n    button_minimize.click += [&] {\n      window_state(form_window_state::minimized);\n    };\n  }\n  \nprivate:\n  button button_full_screen;\n  button button_maximize;\n  button button_normal;\n  button button_minimize;\n};\n\nauto main() -> int {\n  application::run(form1());\n}\n')),(0,a.kt)("h2",{id:"form-1"},"Form"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1form.html"},"xtd::forms::form")," represents a window or dialog box that makes up an application's user interface."),(0,a.kt)("h2",{id:"mdi-and-child"},"MDI and child"),(0,a.kt)("p",null,"Not yet implemented."),(0,a.kt)("h2",{id:"dialog"},"Dialog"),(0,a.kt)("p",null,"A dialog does not have a defined type, it is a ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1forms_1_1form.html"},"xtd::forms::form"),"."),(0,a.kt)("p",null,"The only difference is that a dialog cannot have a menu, a toolbar or a status bar."),(0,a.kt)("p",null,"If any of the above elements are accidentally present, an ",(0,a.kt)("a",{parentName:"p",href:"https://gammasoft71.github.io/xtd/reference_guides/latest/classxtd_1_1invalid__operation__exception.html"},"xtd::invalid_operation_exception")," will be generated during the dialog show."),(0,a.kt)("h3",{id:"examples-1"},"Examples"),(0,a.kt)("p",null,"The following example demontrates how to create your own dialog :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <xtd/xtd>\n\nusing namespace std;\nusing namespace xtd;\nusing namespace xtd::forms;\n\nclass user_input_dialog : public form {\npublic:\n  user_input_dialog() {\n    accept_button(button_ok);\n    cancel_button(button_cancel);\n    client_size({200, 80});\n    form_border_style(forms::form_border_style::fixed_dialog);\n    minimize_box(false);\n    maximize_box(false);\n    show_icon(false);\n    start_position(form_start_position::center_parent);\n    text("User input dialog");\n    controls().push_back_range({input, button_ok, button_cancel});\n\n    input.location({10, 10});\n    input.width(180);\n\n    button_cancel.dialog_result(forms::dialog_result::cancel);\n    button_cancel.location({10, 50});\n    button_cancel.text("Cancel");\n    button_cancel.width(85);\n\n    button_ok.dialog_result(forms::dialog_result::ok);\n    button_ok.location({105, 50});\n    button_ok.text("OK");\n    button_ok.width(85);\n\n    active_control(input);\n  }\n  \n  virtual string input_text() const {return input.text();}\n  virtual user_input_dialog& input_text(const string& input_text) {\n    input.text(input_text);\n    return *this;\n  }\n\nprivate:\n  text_box input;\n  button button_cancel;\n  button button_ok;\n};\n\nclass form1 : public form {\npublic:\n  form1() {\n    controls().push_back_range({button_dialog, input_text});\n    size({800, 450});\n    text("User dialog exemple");\n    \n    input_text.auto_size(true);\n    input_text.location({10, 50});\n    input_text.text("User input text");\n    \n    button_dialog.location({10, 10});\n    button_dialog.text("Dialog...");\n    button_dialog.click += [&] {\n      dialog.input_text(input_text.text());\n      if (dialog.show_dialog(*this) == forms::dialog_result::ok)\n        input_text.text(dialog.input_text());\n    };\n  }\n  \nprivate:\n  user_input_dialog dialog;\n  button button_dialog;\n  label input_text;\n};\n\nauto main() -> int {\n  application::run(form1());\n}\n')),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/documentation/Guides/Overview/Tutorials"},"Tutorials")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}u.isMDXComponent=!0}}]);