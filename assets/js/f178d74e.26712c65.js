"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[216],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(n),p=o,O=m["".concat(s,".").concat(p)]||m[p]||u[p]||r;return n?i.createElement(O,a(a({ref:t},d),{},{components:n})):i.createElement(O,a({ref:t},d))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6889:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=n(87462),o=(n(67294),n(3905));const r={sidebar_position:12},a="iOS build (**Internal use only**)",l={unversionedId:"documentation/Internal/ios_build",id:"documentation/Internal/ios_build",title:"iOS build (**Internal use only**)",description:"To building a remote trget iOS, we need to use a toolchain CMake.",source:"@site/docs/documentation/Internal/ios_build.md",sourceDirName:"documentation/Internal",slug:"/documentation/Internal/ios_build",permalink:"/xtd/docs/documentation/Internal/ios_build",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Investigations to speed up the build of xtd (**Internal use only**)",permalink:"/xtd/docs/documentation/Internal/speedup_build"},next:{title:"Wix Themes (**Internal use only**)",permalink:"/xtd/docs/documentation/Internal/wix_themes"}},s={},c=[{value:"CMake Toolchain",id:"cmake-toolchain",level:2},{value:"Commands to generate xtd",id:"commands-to-generate-xtd",level:2},{value:"Note : The options called *COMBINED (OS64COMBINED, TVOSCOMBINED and WATCHOSCOMBINED) will build complete FAT-libraries for the given platform. These FAT-libraries include slices for both device and simulator, making the distribution and usage of the library much more simple!",id:"note--the-options-called-combined-os64combined-tvoscombined-and-watchoscombined-will-build-complete-fat-libraries-for-the-given-platform-these-fat-libraries-include-slices-for-both-device-and-simulator-making-the-distribution-and-usage-of-the-library-much-more-simple",level:3},{value:"Check macOS and iOS target :",id:"check-macos-and-ios-target-",level:2},{value:"Prerequisites",id:"prerequisites",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ios-build-internal-use-only"},"iOS build (",(0,o.kt)("strong",{parentName:"h1"},"Internal use only"),")"),(0,o.kt)("p",null,"To building a remote trget iOS, we need to use a toolchain CMake."),(0,o.kt)("h2",{id:"cmake-toolchain"},"CMake Toolchain"),(0,o.kt)("p",null,"The toolchain for iOS is generate from project : ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/leetal/ios-cmake"},"https://github.com/leetal/ios-cmake")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/gammasoft71/xtd/tree/master/scripts/cmake/toolchain/ios.cmake"},"xtd io toolchain")),(0,o.kt)("h2",{id:"commands-to-generate-xtd"},"Commands to generate xtd"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For an iOS with the arm64 architecture.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir build-ios && cd buidl_ios\ncmake .. -DCMAKE_TOOLCHAIN_FILE=../scripts/cmake/toolchain/ios.cmake -DPLATFORM=OS64 -DXTD_BUILD_LIBRARIES_XTD_DRAWING=OFF -DXTD_BUILD_LIBRARIES_XTD_FORMS=OFF -DXTD_BUILD_TOOL_GUIDGEN_COMMAND_LINE=OFF -DXTD_BUILD_TOOL_GUIDGEN_GUI=OFF -DXTD_BUILD_TOOL_SLEEPFOR_COMMAND_LINE=OFF -DXTD_BUILD_TOOL_SLEEPFOR_COMMAND_LINE=OFF -DXTD_BUILD_TOOL_XTDC_GUI=OFF\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For a FAT-libraries for the given platform (OS64, TVOS and WATCHOS)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir build-ios && cd buidl_ios\ncmake .. -DCMAKE_TOOLCHAIN_FILE=../scripts/cmake/toolchain/ios.cmake -DPLATFORM=OS64 -DXTD_BUILD_LIBRARIES_XTD_DRAWING=OFF -DXTD_BUILD_LIBRARIES_XTD_FORMS=OFF -DXTD_BUILD_TOOL_GUIDGEN_COMMAND_LINE=OFF -DXTD_BUILD_TOOL_GUIDGEN_GUI=OFF -DXTD_BUILD_TOOL_SLEEPFOR_COMMAND_LINE=OFF -DXTD_BUILD_TOOL_SLEEPFOR_COMMAND_LINE=OFF -DXTD_BUILD_TOOL_XTDC_GUI=OFF\n")),(0,o.kt)("h3",{id:"note--the-options-called-combined-os64combined-tvoscombined-and-watchoscombined-will-build-complete-fat-libraries-for-the-given-platform-these-fat-libraries-include-slices-for-both-device-and-simulator-making-the-distribution-and-usage-of-the-library-much-more-simple"},"Note : The options called *COMBINED (OS64COMBINED, TVOSCOMBINED and WATCHOSCOMBINED) will build complete FAT-libraries for the given platform. These FAT-libraries include slices for both device and simulator, making the distribution and usage of the library much more simple!"),(0,o.kt)("h2",{id:"check-macos-and-ios-target-"},"Check macOS and iOS target :"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/5919996/how-to-detect-reliably-mac-os-x-ios-linux-windows-in-c-preprocessor"},"https://stackoverflow.com/questions/5919996/how-to-detect-reliably-mac-os-x-ios-linux-windows-in-c-preprocessor")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"std::filesystem::path is not supported on iOS."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For a full compatibility the following classes must be implemented",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"xtd::io::directory"),(0,o.kt)("li",{parentName:"ul"},"xtd::io::directory_info"),(0,o.kt)("li",{parentName:"ul"},"xtd::io::drive_info"),(0,o.kt)("li",{parentName:"ul"},"xtd::io::file_info  "))),(0,o.kt)("li",{parentName:"ul"},"Remove all references to std::filesystem::path in xtd implementation.")))}u.isMDXComponent=!0}}]);