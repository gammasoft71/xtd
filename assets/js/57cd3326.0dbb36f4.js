"use strict";(self.webpackChunkxtd=self.webpackChunkxtd||[]).push([[7127],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),f=c(t),p=r,m=f["".concat(l,".").concat(p)]||f[p]||d[p]||s;return t?i.createElement(m,o(o({ref:n},u),{},{components:t})):i.createElement(m,o({ref:n},u))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=f;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var c=2;c<s;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},95228:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=t(87462),r=(t(67294),t(3905));const s={},o="Non-final Classes",a={unversionedId:"documentation/Design Guidelines/Designing for Extensibility/non-final_classes",id:"documentation/Design Guidelines/Designing for Extensibility/non-final_classes",title:"Non-final Classes",description:"Final classes cannot be inherited from, and they prevent extensibility. In contrast, classes that can be inherited from are called non-final classes.",source:"@site/docs/documentation/Design Guidelines/Designing for Extensibility/non-final_classes.md",sourceDirName:"documentation/Design Guidelines/Designing for Extensibility",slug:"/documentation/Design Guidelines/Designing for Extensibility/non-final_classes",permalink:"/xtd/docs/documentation/Design Guidelines/Designing for Extensibility/non-final_classes",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Final",permalink:"/xtd/docs/documentation/Design Guidelines/Designing for Extensibility/final"},next:{title:"Protected Members",permalink:"/xtd/docs/documentation/Design Guidelines/Designing for Extensibility/protected_members"}},l={},c=[],u={toc:c};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"non-final-classes"},"Non-final Classes"),(0,r.kt)("p",null,"Final classes cannot be inherited from, and they prevent extensibility. In contrast, classes that can be inherited from are called non-final classes."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u2714\ufe0f CONSIDER")," using non-final classes with no added virtual or protected members as a great way to provide inexpensive yet much appreciated extensibility to a framework."),(0,r.kt)("p",null,"Developers often want to inherit from non-final classes so as to add convenience members such as custom constructors, new methods, or method overloads."),(0,r.kt)("p",null,"Classes are non-final by default in C++, and this is also the recommended default for most classes in frameworks.\nThe extensibility afforded by non-final types is much appreciated by framework users and quite inexpensive to provide because of relatively low test costs associated with non-final types."),(0,r.kt)("h1",{id:"see-also"},"See also"),(0,r.kt)("p",null,"\u200b"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/documentation/Design%20Guidelines/Designing%20for%20Extensibility"},"Design for Extensibility")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/documentation/Design%20Guidelines"},"Design Guidelines")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/documentation"},"Documentation"))))}d.isMDXComponent=!0}}]);