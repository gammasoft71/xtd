/// @file
/// @brief Contains xtd::isynchronize_invoke interface.
/// @copyright Copyright (c) 2025 Gammasoft. All rights reserved.
#pragma once
#include "any_object.hpp"
#include "array.hpp"
#include "delegate.hpp"
#include "async_result.hpp"
#include "interface.hpp"
#include "object_ref.hpp"
#include "optional.hpp"
#include <memory>
#include <vector>

/// @brief The xtd namespace contains all fundamental classes to access Hardware, Os, System, and more.
namespace xtd {
  /// @brief Provides a way to synchronously or asynchronously execute a delegate.
  /// @par Namespace
  /// xtd
  /// @par Library
  /// xtd.core
  /// @ingroup xtd_core interfaces
  /// @remarks The xtd::isynchronize_invoke interface provides synchronous and asynchronous communication between objects about the occurrence of an event. Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event. In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.
  /// @remarks The xtd::isynchronize_invoke class provides two ways to invoke a process:
  /// 1. Asynchronously, by using the xtd::isynchronize_invoke::begin_invoke method. xtd::isynchronize_invoke::begin_invoke starts a process and then returns immediately. Use xtd::isynchronize_invoke::end_invoke to wait until the process started by xtd::isynchronize_invoke::begin_invoke completes.
  /// 2. Synchronously, by using the xtd::isynchronize_invoke::invoke method. xtd::isynchronize_invoke::invoke starts a process, waits until it completes, and then returns. Use xtd::isynchronize_invoke::invoke when the control's main thread is different from the calling thread to marshal the call to the proper thread.
  class isynchronize_invoke interface_ {
  public:
    /// @name Public Properties
    
    /// @{
    /// @brief Gets a value indicating whether the caller must call Invoke(Delegate, Object[]) when calling an object that implements this interface.
    /// @return `true` if the caller must call xtd::isynchronize_invoke::invoke; otherwise, `false`.
    /// @remarks This property determines whether the caller must call xtd::isynchronize_invoke::invoke when making method calls to an object that implements this interface. Such objects are bound to a specific thread and are not thread-safe. If you are calling a method from a different thread, you must use the xtd::isynchronize_invoke::invoke method to marshal the call to the proper thread.
    virtual bool invoke_required() const noexcept = 0;
    /// @}
    
    /// @name Public Methods
    
    /// @{
    /// @brief Asynchronously executes the delegate on the thread that created this object.
    /// @param method A xtd::delegate to a method without paramter.
    /// @return An xtd::iasync_result interface that represents the asynchronous operation started by calling this method.
    /// @remarks The method delegate is executed on the thread that created the object, instead of the thread on which xtd::isynchronize_invoke::begin_invoke was called.
    /// @remarks The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread. If you need the return value from a process started with this method, call xtd::isynchronize_invoke::end_invoke to get the value.
    virtual xtd::async_result begin_invoke(delegate<void()> method) = 0;
    /// @brief Asynchronously executes the delegate on the thread that created this object.
    /// @param method A xtd::delegate to a method that takes parameters of the same number and type that are contained in args.
    /// @param args An array of type Object to pass as arguments to the given method. This can be empty if no arguments are needed.
    /// @return An xtd::iasync_result interface that represents the asynchronous operation started by calling this method.
    /// @remarks The method delegate is executed on the thread that created the object, instead of the thread on which xtd::isynchronize_invoke::begin_invoke was called.
    /// @remarks The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread. If you need the return value from a process started with this method, call xtd::isynchronize_invoke::end_invoke to get the value.
    virtual xtd::async_result begin_invoke(delegate<void(xtd::array<xtd::any_object>)> value, const xtd::array<xtd::any_object>& args) = 0;
    
    /// @brief Waits until the process started by calling xtd::isynchronize_invoke::begin_invoke completes, and then returns the value generated by the process.
    /// @param async An xtd::iasync_result interface that represents the asynchronous operation started by calling xtd::isynchronize_invoke::begin_invoke.
    /// @return An xtd::object that represents the return value generated by the asynchronous operation.
    /// @remarks This method gets the return value of the asynchronous operation represented by the xtd::iasync_result passed by this interface. If the asynchronous operation has not completed, this method will wait until the result is available.
    virtual std::optional<object_ref> end_invoke(xtd::async_result async) = 0;
    
    /// @brief Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.
    /// @param method A xtd::delegate that contains a method to call, in the context of the thread for the control.
    /// @return An xtd::object that represents the return value from the delegate being invoked, or null if the delegate has no return value.
    /// @remarks Unlike xtd::isynchronize_invoke::begin_invoke, this method operates synchronously, that is, it waits until the process completes before returning. Exceptions raised during the call are propagated back to the caller.
    /// @remarks Use this method when calling a method from a different thread to marshal the call to the proper thread.
    virtual std::optional<object_ref> invoke(delegate<void()> value) = 0;
    /// @brief Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.
    /// @param method A xtd::delegate that contains a method to call, in the context of the thread for the control.
    /// @param args An array of type xtd::object that represents the arguments to pass to the given method. This can be empty if no arguments are needed.
    /// @return An xtd::object that represents the return value from the delegate being invoked, or null if the delegate has no return value.
    /// @remarks Unlike xtd::isynchronize_invoke::begin_invoke, this method operates synchronously, that is, it waits until the process completes before returning. Exceptions raised during the call are propagated back to the caller.
    /// @remarks Use this method when calling a method from a different thread to marshal the call to the proper thread.
    virtual std::optional<object_ref> invoke(delegate<void(xtd::array<xtd::any_object>)> method, const xtd::array<xtd::any_object>& args) = 0;
    /// @brief Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.
    /// @param method A xtd::delegate that contains a method to call, in the context of the thread for the control.
    /// @param arg An xtd::object that represents the argument to pass to the given method.
    /// @return An xtd::object that represents the return value from the delegate being invoked, or null if the delegate has no return value.
    /// @remarks Unlike xtd::isynchronize_invoke::begin_invoke, this method operates synchronously, that is, it waits until the process completes before returning. Exceptions raised during the call are propagated back to the caller.
    /// @remarks Use this method when calling a method from a different thread to marshal the call to the proper thread.
    virtual std::optional<object_ref> invoke(delegate<void(xtd::array<xtd::any_object>)> method, const xtd::any_object& arg) = 0;
    /// @}
    
    /// @cond
    template<class delegate_t>
    xtd::async_result begin_invoke(delegate_t value, const xtd::array<xtd::any_object>& args) {return begin_invoke(delegate<void(xtd::array<xtd::any_object>)>(value), args);}
    
    template<class delegate_t>
    xtd::async_result begin_invoke(delegate_t value) {return begin_invoke(delegate<void(xtd::array<xtd::any_object>)>(value), {});}
    
    template<class delegate_t>
    void invoke(delegate_t value, const xtd::array<xtd::any_object>& args) {invoke(delegate<void(xtd::array<xtd::any_object>)>(value), args);}
    
    template<class delegate_t, class args_t>
    void invoke(delegate_t value, args_t args) {invoke(delegate<void(xtd::array<xtd::any_object>)>(value), xtd::any_object(args));}
    
    template<class delegate_t>
    void invoke(delegate_t value) {invoke(delegate<void(xtd::array<xtd::any_object>)>(value), xtd::array<xtd::any_object> {});}
    /// @endcond
  };
}
