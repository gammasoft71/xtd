/// @file
/// @brief Contains xtd::forms::light_buttons factory.
/// @copyright Copyright (c) 2025 Gammasoft. All rights reserved.
#pragma once
#include "light_button.hpp"

/// @brief The xtd namespace contains all fundamental classes to access Hardware, Os, System, and more.
namespace xtd {
  /// @brief The xtd::forms namespace contains classes for creating Windows-based applications that take full advantage of the rich user interface features available in the Microsoft Windows operating system, Apple macOS and Linux like Ubuntu operating system.
  namespace forms {
    /// @brief Provides a collection of light_button objects for use by a Windows Forms application.
    /// @par Header
    /// ```cpp
    /// #include <xtd/forms/light_buttons>
    /// ```
    /// @par Namespace
    /// xtd::forms
    /// @par Library
    /// xtd.forms
    /// @ingroup xtd_forms controls
    /// @par Examples
    /// The following code example demonstrates the use of light_buttons control factory.
    /// @include light_buttons.cpp
    class light_buttons final static_ {
    public:
      /// @name Public Static Methods
      
      /// @{
      /// @brief Create a system-defined light_button that represent abort light_button.
      /// @return The created light_button.
      static light_button abort();
      /// @brief Create a system-defined light_button that represent abort light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button abort(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent abort light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button abort(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent abort light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button abort(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent abort light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button abort(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent abort light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button abort(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent abort light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button abort(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent abort light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button abort(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent abort light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button abort(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent abort light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button abort(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent abort light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button abort(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent abort light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button abort(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button abort(const control& parent);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button abort(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button abort(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button abort(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button abort(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button abort(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button abort(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button abort(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button abort(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button abort(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button abort(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent abort light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button abort(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent about light_button.
      /// @return The created light_button.
      static light_button about();
      /// @brief Create a system-defined light_button that represent about light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button about(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent about light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button about(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent about light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button about(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent about light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button about(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent about light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button about(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent about light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button about(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent about light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button about(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent about light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button about(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent about light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button about(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent about light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button about(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent about light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button about(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button about(const control& parent);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button about(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button about(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button about(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button about(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button about(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button about(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button about(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button about(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button about(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button about(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent about light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button about(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent actual_size light_button.
      /// @return The created light_button.
      static light_button actual_size();
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button actual_size(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button actual_size(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button actual_size(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button actual_size(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button actual_size(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button actual_size(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button actual_size(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button actual_size(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button actual_size(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button actual_size(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button actual_size(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button actual_size(const control& parent);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button actual_size(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button actual_size(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button actual_size(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button actual_size(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button actual_size(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button actual_size(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button actual_size(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button actual_size(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button actual_size(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button actual_size(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent actual_size light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button actual_size(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent add light_button.
      /// @return The created light_button.
      static light_button add();
      /// @brief Create a system-defined light_button that represent add light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button add(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent add light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button add(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent add light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button add(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent add light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button add(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent add light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button add(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent add light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button add(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent add light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button add(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent add light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button add(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent add light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button add(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent add light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button add(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent add light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button add(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button add(const control& parent);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button add(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button add(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button add(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button add(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button add(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button add(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button add(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button add(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button add(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button add(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent add light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button add(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent alignment light_button.
      /// @return The created light_button.
      static light_button alignment();
      /// @brief Create a system-defined light_button that represent alignment light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button alignment(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button alignment(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button alignment(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button alignment(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button alignment(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button alignment(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button alignment(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button alignment(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button alignment(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button alignment(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button alignment(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button alignment(const control& parent);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button alignment(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button alignment(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button alignment(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button alignment(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button alignment(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button alignment(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button alignment(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button alignment(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button alignment(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button alignment(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent alignment light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button alignment(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent align_left light_button.
      /// @return The created light_button.
      static light_button align_left();
      /// @brief Create a system-defined light_button that represent align_left light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_left(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_left(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_left(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button align_left(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_left(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_left(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_left(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button align_left(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_left(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_left(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_left(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button align_left(const control& parent);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_left(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_left(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_left(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button align_left(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_left(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_left(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_left(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button align_left(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_left(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_left(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_left light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_left(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent align_right light_button.
      /// @return The created light_button.
      static light_button align_right();
      /// @brief Create a system-defined light_button that represent align_right light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_right(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_right(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_right(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button align_right(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_right(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_right(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_right(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button align_right(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_right(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_right(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_right(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button align_right(const control& parent);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_right(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_right(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_right(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button align_right(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_right(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_right(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_right(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button align_right(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button align_right(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button align_right(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent align_right light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button align_right(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent apply light_button.
      /// @return The created light_button.
      static light_button apply();
      /// @brief Create a system-defined light_button that represent apply light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button apply(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent apply light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button apply(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent apply light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button apply(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent apply light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button apply(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent apply light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button apply(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent apply light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button apply(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent apply light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button apply(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent apply light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button apply(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent apply light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button apply(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent apply light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button apply(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent apply light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button apply(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button apply(const control& parent);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button apply(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button apply(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button apply(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button apply(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button apply(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button apply(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button apply(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button apply(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button apply(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button apply(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent apply light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button apply(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent ascending light_button.
      /// @return The created light_button.
      static light_button ascending();
      /// @brief Create a system-defined light_button that represent ascending light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ascending(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ascending(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ascending(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ascending(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ascending(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ascending(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ascending(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ascending(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ascending(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ascending(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ascending(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button ascending(const control& parent);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ascending(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ascending(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ascending(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ascending(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ascending(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ascending(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ascending(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ascending(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ascending(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ascending(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ascending light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ascending(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent back light_button.
      /// @return The created light_button.
      static light_button back();
      /// @brief Create a system-defined light_button that represent back light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button back(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent back light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button back(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent back light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button back(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent back light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button back(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent back light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button back(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent back light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button back(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent back light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button back(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent back light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button back(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent back light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button back(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent back light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button back(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent back light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button back(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button back(const control& parent);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button back(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button back(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button back(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button back(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button back(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button back(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button back(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button back(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button back(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button back(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent back light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button back(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent bold light_button.
      /// @return The created light_button.
      static light_button bold();
      /// @brief Create a system-defined light_button that represent bold light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bold(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bold light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bold(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bold light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bold(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent bold light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button bold(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent bold light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bold(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bold light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bold(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bold light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bold(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent bold light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button bold(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent bold light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bold(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bold light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bold(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bold light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bold(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button bold(const control& parent);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bold(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bold(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bold(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button bold(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bold(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bold(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bold(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button bold(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bold(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bold(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bold light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bold(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent bottom light_button.
      /// @return The created light_button.
      static light_button bottom();
      /// @brief Create a system-defined light_button that represent bottom light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bottom(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bottom(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bottom(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button bottom(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bottom(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bottom(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bottom(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button bottom(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bottom(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bottom(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bottom(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button bottom(const control& parent);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bottom(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bottom(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bottom(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button bottom(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bottom(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bottom(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bottom(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button bottom(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button bottom(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button bottom(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent bottom light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button bottom(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent cancel light_button.
      /// @return The created light_button.
      static light_button cancel();
      /// @brief Create a system-defined light_button that represent cancel light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cancel(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cancel(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cancel(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cancel(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cancel(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cancel(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cancel(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cancel(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cancel(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cancel(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cancel(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button cancel(const control& parent);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cancel(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cancel(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cancel(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cancel(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cancel(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cancel(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cancel(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cancel(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cancel(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cancel(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cancel light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cancel(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent cdrom light_button.
      /// @return The created light_button.
      static light_button cdrom();
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cdrom(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cdrom(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cdrom(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cdrom(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cdrom(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cdrom(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cdrom(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cdrom(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cdrom(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cdrom(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cdrom(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button cdrom(const control& parent);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cdrom(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cdrom(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cdrom(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cdrom(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cdrom(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cdrom(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cdrom(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cdrom(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cdrom(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cdrom(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cdrom light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cdrom(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent centered light_button.
      /// @return The created light_button.
      static light_button centered();
      /// @brief Create a system-defined light_button that represent centered light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button centered(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent centered light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button centered(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent centered light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button centered(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent centered light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button centered(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent centered light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button centered(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent centered light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button centered(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent centered light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button centered(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent centered light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button centered(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent centered light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button centered(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent centered light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button centered(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent centered light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button centered(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button centered(const control& parent);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button centered(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button centered(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button centered(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button centered(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button centered(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button centered(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button centered(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button centered(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button centered(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button centered(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent centered light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button centered(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent clear light_button.
      /// @return The created light_button.
      static light_button clear();
      /// @brief Create a system-defined light_button that represent clear light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button clear(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent clear light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button clear(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent clear light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button clear(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent clear light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button clear(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent clear light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button clear(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent clear light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button clear(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent clear light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button clear(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent clear light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button clear(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent clear light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button clear(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent clear light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button clear(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent clear light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button clear(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button clear(const control& parent);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button clear(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button clear(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button clear(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button clear(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button clear(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button clear(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button clear(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button clear(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button clear(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button clear(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent clear light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button clear(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent close light_button.
      /// @return The created light_button.
      static light_button close();
      /// @brief Create a system-defined light_button that represent close light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button close(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent close light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button close(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent close light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button close(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent close light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button close(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent close light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button close(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent close light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button close(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent close light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button close(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent close light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button close(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent close light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button close(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent close light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button close(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent close light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button close(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button close(const control& parent);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button close(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button close(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button close(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button close(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button close(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button close(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button close(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button close(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button close(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button close(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent close light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button close(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent color light_button.
      /// @return The created light_button.
      static light_button color();
      /// @brief Create a system-defined light_button that represent color light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button color(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent color light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button color(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent color light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button color(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent color light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button color(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent color light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button color(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent color light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button color(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent color light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button color(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent color light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button color(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent color light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button color(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent color light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button color(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent color light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button color(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button color(const control& parent);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button color(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button color(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button color(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button color(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button color(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button color(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button color(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button color(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button color(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button color(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent color light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button color(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent contents light_button.
      /// @return The created light_button.
      static light_button contents();
      /// @brief Create a system-defined light_button that represent contents light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button contents(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent contents light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button contents(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent contents light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button contents(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent contents light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button contents(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent contents light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button contents(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent contents light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button contents(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent contents light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button contents(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent contents light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button contents(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent contents light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button contents(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent contents light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button contents(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent contents light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button contents(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button contents(const control& parent);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button contents(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button contents(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button contents(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button contents(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button contents(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button contents(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button contents(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button contents(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button contents(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button contents(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent contents light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button contents(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent convert light_button.
      /// @return The created light_button.
      static light_button convert();
      /// @brief Create a system-defined light_button that represent convert light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button convert(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent convert light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button convert(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent convert light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button convert(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent convert light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button convert(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent convert light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button convert(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent convert light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button convert(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent convert light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button convert(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent convert light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button convert(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent convert light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button convert(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent convert light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button convert(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent convert light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button convert(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button convert(const control& parent);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button convert(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button convert(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button convert(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button convert(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button convert(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button convert(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button convert(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button convert(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button convert(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button convert(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent convert light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button convert(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent copy light_button.
      /// @return The created light_button.
      static light_button copy();
      /// @brief Create a system-defined light_button that represent copy light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button copy(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent copy light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button copy(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent copy light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button copy(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent copy light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button copy(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent copy light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button copy(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent copy light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button copy(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent copy light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button copy(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent copy light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button copy(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent copy light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button copy(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent copy light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button copy(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent copy light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button copy(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button copy(const control& parent);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button copy(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button copy(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button copy(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button copy(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button copy(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button copy(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button copy(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button copy(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button copy(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button copy(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent copy light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button copy(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent customize light_button.
      /// @return The created light_button.
      static light_button customize();
      /// @brief Create a system-defined light_button that represent customize light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button customize(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent customize light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button customize(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent customize light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button customize(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent customize light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button customize(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent customize light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button customize(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent customize light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button customize(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent customize light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button customize(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent customize light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button customize(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent customize light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button customize(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent customize light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button customize(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent customize light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button customize(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button customize(const control& parent);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button customize(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button customize(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button customize(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button customize(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button customize(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button customize(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button customize(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button customize(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button customize(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button customize(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent customize light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button customize(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent cut light_button.
      /// @return The created light_button.
      static light_button cut();
      /// @brief Create a system-defined light_button that represent cut light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cut(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cut light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cut(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cut light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cut(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cut light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cut(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cut light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cut(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cut light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cut(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cut light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cut(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cut light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cut(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cut light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cut(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cut light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cut(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cut light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cut(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button cut(const control& parent);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cut(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cut(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cut(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cut(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cut(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cut(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cut(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button cut(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button cut(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button cut(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent cut light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button cut(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent del light_button.
      /// @return The created light_button.
      static light_button del();
      /// @brief Create a system-defined light_button that represent del light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button del(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent del light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button del(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent del light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button del(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent del light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button del(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent del light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button del(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent del light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button del(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent del light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button del(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent del light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button del(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent del light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button del(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent del light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button del(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent del light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button del(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button del(const control& parent);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button del(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button del(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button del(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button del(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button del(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button del(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button del(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button del(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button del(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button del(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent del light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button del(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent descending light_button.
      /// @return The created light_button.
      static light_button descending();
      /// @brief Create a system-defined light_button that represent descending light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button descending(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent descending light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button descending(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent descending light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button descending(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent descending light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button descending(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent descending light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button descending(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent descending light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button descending(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent descending light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button descending(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent descending light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button descending(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent descending light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button descending(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent descending light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button descending(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent descending light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button descending(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button descending(const control& parent);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button descending(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button descending(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button descending(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button descending(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button descending(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button descending(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button descending(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button descending(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button descending(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button descending(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent descending light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button descending(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent down light_button.
      /// @return The created light_button.
      static light_button down();
      /// @brief Create a system-defined light_button that represent down light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button down(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent down light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button down(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent down light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button down(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent down light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button down(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent down light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button down(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent down light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button down(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent down light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button down(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent down light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button down(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent down light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button down(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent down light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button down(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent down light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button down(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button down(const control& parent);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button down(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button down(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button down(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button down(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button down(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button down(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button down(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button down(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button down(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button down(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent down light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button down(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent edit light_button.
      /// @return The created light_button.
      static light_button edit();
      /// @brief Create a system-defined light_button that represent edit light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button edit(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent edit light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button edit(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent edit light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button edit(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent edit light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button edit(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent edit light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button edit(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent edit light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button edit(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent edit light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button edit(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent edit light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button edit(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent edit light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button edit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent edit light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button edit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent edit light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button edit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button edit(const control& parent);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button edit(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button edit(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button edit(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button edit(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button edit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button edit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button edit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button edit(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button edit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button edit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent edit light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button edit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent execute light_button.
      /// @return The created light_button.
      static light_button execute();
      /// @brief Create a system-defined light_button that represent execute light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button execute(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent execute light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button execute(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent execute light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button execute(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent execute light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button execute(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent execute light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button execute(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent execute light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button execute(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent execute light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button execute(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent execute light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button execute(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent execute light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button execute(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent execute light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button execute(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent execute light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button execute(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button execute(const control& parent);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button execute(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button execute(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button execute(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button execute(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button execute(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button execute(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button execute(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button execute(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button execute(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button execute(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent execute light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button execute(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent exit light_button.
      /// @return The created light_button.
      static light_button exit();
      /// @brief Create a system-defined light_button that represent exit light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button exit(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent exit light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button exit(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent exit light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button exit(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent exit light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button exit(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent exit light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button exit(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent exit light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button exit(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent exit light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button exit(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent exit light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button exit(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent exit light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button exit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent exit light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button exit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent exit light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button exit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button exit(const control& parent);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button exit(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button exit(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button exit(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button exit(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button exit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button exit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button exit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button exit(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button exit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button exit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent exit light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button exit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent file light_button.
      /// @return The created light_button.
      static light_button file();
      /// @brief Create a system-defined light_button that represent file light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button file(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent file light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button file(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent file light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button file(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent file light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button file(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent file light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button file(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent file light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button file(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent file light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button file(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent file light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button file(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent file light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button file(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent file light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button file(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent file light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button file(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button file(const control& parent);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button file(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button file(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button file(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button file(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button file(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button file(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button file(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button file(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button file(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button file(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent file light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button file(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent find light_button.
      /// @return The created light_button.
      static light_button find();
      /// @brief Create a system-defined light_button that represent find light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button find(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent find light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button find(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent find light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button find(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent find light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button find(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent find light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button find(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent find light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button find(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent find light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button find(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent find light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button find(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent find light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button find(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent find light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button find(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent find light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button find(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button find(const control& parent);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button find(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button find(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button find(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button find(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button find(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button find(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button find(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button find(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button find(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button find(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent find light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button find(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent first light_button.
      /// @return The created light_button.
      static light_button first();
      /// @brief Create a system-defined light_button that represent first light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button first(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent first light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button first(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent first light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button first(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent first light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button first(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent first light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button first(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent first light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button first(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent first light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button first(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent first light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button first(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent first light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button first(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent first light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button first(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent first light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button first(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button first(const control& parent);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button first(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button first(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button first(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button first(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button first(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button first(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button first(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button first(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button first(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button first(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent first light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button first(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent floppy light_button.
      /// @return The created light_button.
      static light_button floppy();
      /// @brief Create a system-defined light_button that represent floppy light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button floppy(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button floppy(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button floppy(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button floppy(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button floppy(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button floppy(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button floppy(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button floppy(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button floppy(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button floppy(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button floppy(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button floppy(const control& parent);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button floppy(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button floppy(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button floppy(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button floppy(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button floppy(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button floppy(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button floppy(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button floppy(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button floppy(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button floppy(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent floppy light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button floppy(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent font light_button.
      /// @return The created light_button.
      static light_button font();
      /// @brief Create a system-defined light_button that represent font light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button font(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent font light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button font(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent font light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button font(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent font light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button font(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent font light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button font(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent font light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button font(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent font light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button font(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent font light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button font(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent font light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button font(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent font light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button font(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent font light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button font(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button font(const control& parent);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button font(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button font(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button font(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button font(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button font(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button font(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button font(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button font(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button font(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button font(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent font light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button font(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent forward light_button.
      /// @return The created light_button.
      static light_button forward();
      /// @brief Create a system-defined light_button that represent forward light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button forward(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent forward light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button forward(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent forward light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button forward(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent forward light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button forward(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent forward light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button forward(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent forward light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button forward(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent forward light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button forward(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent forward light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button forward(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent forward light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button forward(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent forward light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button forward(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent forward light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button forward(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button forward(const control& parent);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button forward(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button forward(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button forward(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button forward(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button forward(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button forward(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button forward(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button forward(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button forward(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button forward(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent forward light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button forward(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent harddisk light_button.
      /// @return The created light_button.
      static light_button harddisk();
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button harddisk(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button harddisk(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button harddisk(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button harddisk(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button harddisk(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button harddisk(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button harddisk(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button harddisk(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button harddisk(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button harddisk(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button harddisk(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button harddisk(const control& parent);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button harddisk(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button harddisk(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button harddisk(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button harddisk(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button harddisk(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button harddisk(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button harddisk(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button harddisk(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button harddisk(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button harddisk(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent harddisk light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button harddisk(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent help light_button.
      /// @return The created light_button.
      static light_button help();
      /// @brief Create a system-defined light_button that represent help light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button help(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent help light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button help(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent help light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button help(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent help light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button help(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent help light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button help(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent help light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button help(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent help light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button help(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent help light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button help(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent help light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button help(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent help light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button help(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent help light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button help(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button help(const control& parent);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button help(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button help(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button help(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button help(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button help(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button help(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button help(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button help(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button help(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button help(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent help light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button help(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent home light_button.
      /// @return The created light_button.
      static light_button home();
      /// @brief Create a system-defined light_button that represent home light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button home(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent home light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button home(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent home light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button home(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent home light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button home(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent home light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button home(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent home light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button home(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent home light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button home(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent home light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button home(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent home light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button home(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent home light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button home(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent home light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button home(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button home(const control& parent);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button home(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button home(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button home(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button home(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button home(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button home(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button home(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button home(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button home(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button home(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent home light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button home(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent ignore light_button.
      /// @return The created light_button.
      static light_button ignore();
      /// @brief Create a system-defined light_button that represent ignore light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ignore(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ignore(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ignore(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ignore(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ignore(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ignore(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ignore(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ignore(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ignore(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ignore(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ignore(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button ignore(const control& parent);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ignore(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ignore(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ignore(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ignore(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ignore(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ignore(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ignore(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ignore(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ignore(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ignore(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ignore light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ignore(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent indent light_button.
      /// @return The created light_button.
      static light_button indent();
      /// @brief Create a system-defined light_button that represent indent light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button indent(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent indent light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button indent(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent indent light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button indent(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent indent light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button indent(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent indent light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button indent(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent indent light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button indent(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent indent light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button indent(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent indent light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button indent(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent indent light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button indent(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent indent light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button indent(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent indent light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button indent(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button indent(const control& parent);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button indent(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button indent(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button indent(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button indent(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button indent(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button indent(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button indent(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button indent(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button indent(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button indent(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent indent light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button indent(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent index light_button.
      /// @return The created light_button.
      static light_button index();
      /// @brief Create a system-defined light_button that represent index light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button index(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent index light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button index(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent index light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button index(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent index light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button index(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent index light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button index(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent index light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button index(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent index light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button index(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent index light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button index(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent index light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button index(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent index light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button index(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent index light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button index(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button index(const control& parent);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button index(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button index(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button index(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button index(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button index(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button index(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button index(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button index(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button index(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button index(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent index light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button index(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent info light_button.
      /// @return The created light_button.
      static light_button info();
      /// @brief Create a system-defined light_button that represent info light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button info(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent info light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button info(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent info light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button info(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent info light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button info(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent info light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button info(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent info light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button info(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent info light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button info(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent info light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button info(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent info light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button info(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent info light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button info(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent info light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button info(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button info(const control& parent);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button info(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button info(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button info(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button info(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button info(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button info(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button info(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button info(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button info(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button info(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent info light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button info(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent italic light_button.
      /// @return The created light_button.
      static light_button italic();
      /// @brief Create a system-defined light_button that represent italic light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button italic(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent italic light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button italic(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent italic light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button italic(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent italic light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button italic(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent italic light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button italic(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent italic light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button italic(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent italic light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button italic(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent italic light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button italic(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent italic light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button italic(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent italic light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button italic(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent italic light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button italic(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button italic(const control& parent);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button italic(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button italic(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button italic(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button italic(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button italic(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button italic(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button italic(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button italic(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button italic(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button italic(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent italic light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button italic(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent justified light_button.
      /// @return The created light_button.
      static light_button justified();
      /// @brief Create a system-defined light_button that represent justified light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button justified(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent justified light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button justified(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent justified light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button justified(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent justified light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button justified(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent justified light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button justified(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent justified light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button justified(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent justified light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button justified(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent justified light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button justified(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent justified light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button justified(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent justified light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button justified(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent justified light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button justified(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button justified(const control& parent);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button justified(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button justified(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button justified(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button justified(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button justified(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button justified(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button justified(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button justified(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button justified(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button justified(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent justified light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button justified(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent jump_to light_button.
      /// @return The created light_button.
      static light_button jump_to();
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button jump_to(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button jump_to(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button jump_to(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button jump_to(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button jump_to(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button jump_to(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button jump_to(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button jump_to(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button jump_to(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button jump_to(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button jump_to(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button jump_to(const control& parent);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button jump_to(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button jump_to(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button jump_to(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button jump_to(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button jump_to(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button jump_to(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button jump_to(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button jump_to(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button jump_to(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button jump_to(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent jump_to light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button jump_to(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent last light_button.
      /// @return The created light_button.
      static light_button last();
      /// @brief Create a system-defined light_button that represent last light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button last(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent last light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button last(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent last light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button last(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent last light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button last(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent last light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button last(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent last light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button last(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent last light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button last(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent last light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button last(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent last light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button last(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent last light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button last(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent last light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button last(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button last(const control& parent);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button last(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button last(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button last(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button last(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button last(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button last(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button last(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button last(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button last(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button last(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent last light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button last(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent network light_button.
      /// @return The created light_button.
      static light_button network();
      /// @brief Create a system-defined light_button that represent network light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button network(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent network light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button network(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent network light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button network(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent network light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button network(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent network light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button network(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent network light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button network(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent network light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button network(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent network light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button network(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent network light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button network(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent network light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button network(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent network light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button network(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button network(const control& parent);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button network(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button network(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button network(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button network(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button network(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button network(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button network(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button network(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button network(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button network(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent network light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button network(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent new_ light_button.
      /// @return The created light_button.
      static light_button new_();
      /// @brief Create a system-defined light_button that represent new_ light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button new_(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button new_(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button new_(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button new_(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button new_(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button new_(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button new_(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button new_(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button new_(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button new_(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button new_(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button new_(const control& parent);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button new_(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button new_(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button new_(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button new_(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button new_(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button new_(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button new_(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button new_(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button new_(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button new_(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent new_ light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button new_(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent next light_button.
      /// @return The created light_button.
      static light_button next();
      /// @brief Create a system-defined light_button that represent next light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button next(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent next light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button next(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent next light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button next(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent next light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button next(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent next light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button next(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent next light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button next(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent next light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button next(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent next light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button next(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent next light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button next(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent next light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button next(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent next light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button next(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button next(const control& parent);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button next(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button next(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button next(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button next(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button next(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button next(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button next(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button next(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button next(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button next(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent next light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button next(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent no light_button.
      /// @return The created light_button.
      static light_button no();
      /// @brief Create a system-defined light_button that represent no light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button no(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent no light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button no(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent no light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button no(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent no light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button no(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent no light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button no(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent no light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button no(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent no light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button no(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent no light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button no(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent no light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button no(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent no light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button no(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent no light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button no(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button no(const control& parent);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button no(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button no(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button no(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button no(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button no(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button no(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button no(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button no(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button no(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button no(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent no light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button no(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent ok light_button.
      /// @return The created light_button.
      static light_button ok();
      /// @brief Create a system-defined light_button that represent ok light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ok(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ok light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ok(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ok light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ok(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ok light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ok(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ok light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ok(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ok light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ok(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ok light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ok(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ok light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ok(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ok light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ok(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ok light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ok(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ok light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ok(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button ok(const control& parent);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ok(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ok(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ok(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ok(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ok(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ok(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ok(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button ok(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button ok(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button ok(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent ok light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button ok(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent open light_button.
      /// @return The created light_button.
      static light_button open();
      /// @brief Create a system-defined light_button that represent open light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button open(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent open light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button open(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent open light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button open(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent open light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button open(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent open light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button open(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent open light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button open(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent open light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button open(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent open light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button open(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent open light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button open(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent open light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button open(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent open light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button open(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button open(const control& parent);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button open(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button open(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button open(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button open(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button open(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button open(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button open(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button open(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button open(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button open(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent open light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button open(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent options light_button.
      /// @return The created light_button.
      static light_button options();
      /// @brief Create a system-defined light_button that represent options light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button options(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent options light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button options(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent options light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button options(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent options light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button options(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent options light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button options(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent options light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button options(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent options light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button options(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent options light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button options(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent options light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button options(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent options light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button options(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent options light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button options(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button options(const control& parent);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button options(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button options(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button options(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button options(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button options(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button options(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button options(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button options(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button options(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button options(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent options light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button options(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent paste light_button.
      /// @return The created light_button.
      static light_button paste();
      /// @brief Create a system-defined light_button that represent paste light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button paste(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent paste light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button paste(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent paste light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button paste(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent paste light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button paste(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent paste light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button paste(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent paste light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button paste(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent paste light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button paste(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent paste light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button paste(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent paste light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button paste(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent paste light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button paste(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent paste light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button paste(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button paste(const control& parent);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button paste(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button paste(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button paste(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button paste(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button paste(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button paste(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button paste(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button paste(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button paste(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button paste(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent paste light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button paste(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent preferences light_button.
      /// @return The created light_button.
      static light_button preferences();
      /// @brief Create a system-defined light_button that represent preferences light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button preferences(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button preferences(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button preferences(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button preferences(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button preferences(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button preferences(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button preferences(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button preferences(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button preferences(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button preferences(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button preferences(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button preferences(const control& parent);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button preferences(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button preferences(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button preferences(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button preferences(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button preferences(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button preferences(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button preferences(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button preferences(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button preferences(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button preferences(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent preferences light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button preferences(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent previous light_button.
      /// @return The created light_button.
      static light_button previous();
      /// @brief Create a system-defined light_button that represent previous light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button previous(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent previous light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button previous(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent previous light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button previous(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent previous light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button previous(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent previous light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button previous(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent previous light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button previous(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent previous light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button previous(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent previous light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button previous(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent previous light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button previous(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent previous light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button previous(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent previous light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button previous(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button previous(const control& parent);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button previous(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button previous(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button previous(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button previous(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button previous(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button previous(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button previous(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button previous(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button previous(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button previous(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent previous light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button previous(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent print light_button.
      /// @return The created light_button.
      static light_button print();
      /// @brief Create a system-defined light_button that represent print light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent print light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button print(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent print light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent print light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button print(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent print light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button print(const control& parent);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button print(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button print(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent print_preview light_button.
      /// @return The created light_button.
      static light_button print_preview();
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print_preview(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print_preview(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print_preview(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button print_preview(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print_preview(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print_preview(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print_preview(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button print_preview(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print_preview(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print_preview(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print_preview(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button print_preview(const control& parent);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print_preview(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print_preview(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print_preview(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button print_preview(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print_preview(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print_preview(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print_preview(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button print_preview(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button print_preview(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button print_preview(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent print_preview light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button print_preview(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent properties light_button.
      /// @return The created light_button.
      static light_button properties();
      /// @brief Create a system-defined light_button that represent properties light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button properties(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent properties light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button properties(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent properties light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button properties(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent properties light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button properties(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent properties light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button properties(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent properties light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button properties(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent properties light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button properties(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent properties light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button properties(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent properties light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button properties(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent properties light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button properties(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent properties light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button properties(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button properties(const control& parent);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button properties(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button properties(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button properties(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button properties(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button properties(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button properties(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button properties(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button properties(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button properties(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button properties(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent properties light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button properties(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent quit light_button.
      /// @return The created light_button.
      static light_button quit();
      /// @brief Create a system-defined light_button that represent quit light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button quit(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent quit light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button quit(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent quit light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button quit(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent quit light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button quit(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent quit light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button quit(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent quit light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button quit(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent quit light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button quit(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent quit light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button quit(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent quit light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button quit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent quit light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button quit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent quit light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button quit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button quit(const control& parent);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button quit(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button quit(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button quit(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button quit(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button quit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button quit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button quit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button quit(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button quit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button quit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent quit light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button quit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent redo light_button.
      /// @return The created light_button.
      static light_button redo();
      /// @brief Create a system-defined light_button that represent redo light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button redo(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent redo light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button redo(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent redo light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button redo(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent redo light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button redo(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent redo light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button redo(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent redo light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button redo(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent redo light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button redo(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent redo light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button redo(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent redo light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button redo(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent redo light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button redo(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent redo light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button redo(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button redo(const control& parent);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button redo(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button redo(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button redo(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button redo(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button redo(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button redo(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button redo(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button redo(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button redo(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button redo(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent redo light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button redo(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent refresh light_button.
      /// @return The created light_button.
      static light_button refresh();
      /// @brief Create a system-defined light_button that represent refresh light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button refresh(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button refresh(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button refresh(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button refresh(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button refresh(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button refresh(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button refresh(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button refresh(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button refresh(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button refresh(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button refresh(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button refresh(const control& parent);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button refresh(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button refresh(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button refresh(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button refresh(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button refresh(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button refresh(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button refresh(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button refresh(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button refresh(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button refresh(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent refresh light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button refresh(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent remove light_button.
      /// @return The created light_button.
      static light_button remove();
      /// @brief Create a system-defined light_button that represent remove light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button remove(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent remove light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button remove(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent remove light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button remove(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent remove light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button remove(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent remove light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button remove(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent remove light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button remove(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent remove light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button remove(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent remove light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button remove(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent remove light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button remove(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent remove light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button remove(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent remove light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button remove(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button remove(const control& parent);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button remove(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button remove(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button remove(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button remove(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button remove(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button remove(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button remove(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button remove(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button remove(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button remove(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent remove light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button remove(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent replace light_button.
      /// @return The created light_button.
      static light_button replace();
      /// @brief Create a system-defined light_button that represent replace light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button replace(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent replace light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button replace(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent replace light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button replace(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent replace light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button replace(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent replace light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button replace(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent replace light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button replace(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent replace light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button replace(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent replace light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button replace(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent replace light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button replace(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent replace light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button replace(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent replace light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button replace(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button replace(const control& parent);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button replace(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button replace(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button replace(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button replace(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button replace(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button replace(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button replace(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button replace(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button replace(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button replace(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent replace light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button replace(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent retry light_button.
      /// @return The created light_button.
      static light_button retry();
      /// @brief Create a system-defined light_button that represent retry light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button retry(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent retry light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button retry(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent retry light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button retry(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent retry light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button retry(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent retry light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button retry(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent retry light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button retry(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent retry light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button retry(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent retry light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button retry(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent retry light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button retry(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent retry light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button retry(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent retry light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button retry(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button retry(const control& parent);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button retry(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button retry(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button retry(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button retry(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button retry(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button retry(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button retry(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button retry(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button retry(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button retry(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent retry light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button retry(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent revert_to_saved light_button.
      /// @return The created light_button.
      static light_button revert_to_saved();
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button revert_to_saved(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button revert_to_saved(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button revert_to_saved(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button revert_to_saved(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button revert_to_saved(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent revert_to_saved light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button revert_to_saved(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent save light_button.
      /// @return The created light_button.
      static light_button save();
      /// @brief Create a system-defined light_button that represent save light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent save light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button save(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent save light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent save light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button save(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent save light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button save(const control& parent);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button save(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button save(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent save_as light_button.
      /// @return The created light_button.
      static light_button save_as();
      /// @brief Create a system-defined light_button that represent save_as light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save_as(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save_as(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save_as(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button save_as(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save_as(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save_as(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save_as(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button save_as(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save_as(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save_as(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save_as(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button save_as(const control& parent);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save_as(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save_as(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save_as(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button save_as(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save_as(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save_as(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save_as(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button save_as(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button save_as(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button save_as(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent save_as light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button save_as(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent search light_button.
      /// @return The created light_button.
      static light_button search();
      /// @brief Create a system-defined light_button that represent search light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button search(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent search light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button search(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent search light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button search(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent search light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button search(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent search light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button search(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent search light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button search(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent search light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button search(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent search light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button search(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent search light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button search(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent search light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button search(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent search light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button search(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button search(const control& parent);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button search(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button search(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button search(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button search(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button search(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button search(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button search(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button search(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button search(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button search(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent search light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button search(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent select_all light_button.
      /// @return The created light_button.
      static light_button select_all();
      /// @brief Create a system-defined light_button that represent select_all light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button select_all(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button select_all(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button select_all(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button select_all(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button select_all(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button select_all(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button select_all(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button select_all(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button select_all(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button select_all(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button select_all(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button select_all(const control& parent);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button select_all(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button select_all(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button select_all(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button select_all(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button select_all(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button select_all(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button select_all(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button select_all(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button select_all(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button select_all(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent select_all light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button select_all(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent settings light_button.
      /// @return The created light_button.
      static light_button settings();
      /// @brief Create a system-defined light_button that represent settings light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button settings(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent settings light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button settings(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent settings light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button settings(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent settings light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button settings(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent settings light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button settings(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent settings light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button settings(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent settings light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button settings(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent settings light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button settings(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent settings light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button settings(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent settings light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button settings(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent settings light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button settings(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button settings(const control& parent);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button settings(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button settings(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button settings(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button settings(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button settings(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button settings(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button settings(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button settings(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button settings(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button settings(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent settings light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button settings(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent spell_check light_button.
      /// @return The created light_button.
      static light_button spell_check();
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button spell_check(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button spell_check(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button spell_check(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button spell_check(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button spell_check(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button spell_check(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button spell_check(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button spell_check(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button spell_check(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button spell_check(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button spell_check(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button spell_check(const control& parent);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button spell_check(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button spell_check(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button spell_check(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button spell_check(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button spell_check(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button spell_check(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button spell_check(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button spell_check(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button spell_check(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button spell_check(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent spell_check light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button spell_check(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent stop light_button.
      /// @return The created light_button.
      static light_button stop();
      /// @brief Create a system-defined light_button that represent stop light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button stop(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent stop light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button stop(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent stop light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button stop(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent stop light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button stop(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent stop light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button stop(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent stop light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button stop(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent stop light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button stop(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent stop light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button stop(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent stop light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button stop(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent stop light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button stop(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent stop light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button stop(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button stop(const control& parent);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button stop(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button stop(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button stop(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button stop(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button stop(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button stop(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button stop(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button stop(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button stop(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button stop(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent stop light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button stop(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent strikeout light_button.
      /// @return The created light_button.
      static light_button strikeout();
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button strikeout(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button strikeout(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button strikeout(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button strikeout(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button strikeout(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button strikeout(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button strikeout(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button strikeout(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button strikeout(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button strikeout(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button strikeout(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button strikeout(const control& parent);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button strikeout(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button strikeout(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button strikeout(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button strikeout(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button strikeout(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button strikeout(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button strikeout(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button strikeout(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button strikeout(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button strikeout(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent strikeout light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button strikeout(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent tools light_button.
      /// @return The created light_button.
      static light_button tools();
      /// @brief Create a system-defined light_button that represent tools light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button tools(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent tools light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button tools(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent tools light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button tools(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent tools light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button tools(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent tools light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button tools(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent tools light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button tools(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent tools light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button tools(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent tools light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button tools(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent tools light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button tools(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent tools light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button tools(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent tools light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button tools(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button tools(const control& parent);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button tools(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button tools(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button tools(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button tools(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button tools(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button tools(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button tools(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button tools(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button tools(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button tools(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent tools light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button tools(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent top light_button.
      /// @return The created light_button.
      static light_button top();
      /// @brief Create a system-defined light_button that represent top light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button top(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent top light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button top(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent top light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button top(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent top light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button top(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent top light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button top(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent top light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button top(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent top light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button top(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent top light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button top(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent top light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button top(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent top light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button top(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent top light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button top(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button top(const control& parent);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button top(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button top(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button top(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button top(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button top(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button top(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button top(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button top(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button top(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button top(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent top light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button top(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent undelete light_button.
      /// @return The created light_button.
      static light_button undelete();
      /// @brief Create a system-defined light_button that represent undelete light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undelete(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undelete(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undelete(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button undelete(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undelete(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undelete(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undelete(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button undelete(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undelete(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undelete(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undelete(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button undelete(const control& parent);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undelete(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undelete(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undelete(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button undelete(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undelete(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undelete(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undelete(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button undelete(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undelete(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undelete(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undelete light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undelete(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent underline light_button.
      /// @return The created light_button.
      static light_button underline();
      /// @brief Create a system-defined light_button that represent underline light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button underline(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent underline light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button underline(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent underline light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button underline(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent underline light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button underline(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent underline light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button underline(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent underline light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button underline(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent underline light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button underline(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent underline light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button underline(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent underline light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button underline(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent underline light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button underline(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent underline light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button underline(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button underline(const control& parent);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button underline(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button underline(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button underline(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button underline(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button underline(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button underline(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button underline(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button underline(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button underline(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button underline(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent underline light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button underline(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent undo light_button.
      /// @return The created light_button.
      static light_button undo();
      /// @brief Create a system-defined light_button that represent undo light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undo(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undo light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undo(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undo light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undo(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent undo light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button undo(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent undo light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undo(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undo light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undo(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undo light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undo(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent undo light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button undo(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent undo light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undo(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undo light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undo(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undo light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undo(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button undo(const control& parent);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undo(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undo(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undo(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button undo(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undo(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undo(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undo(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button undo(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button undo(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button undo(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent undo light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button undo(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent unindent light_button.
      /// @return The created light_button.
      static light_button unindent();
      /// @brief Create a system-defined light_button that represent unindent light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button unindent(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button unindent(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button unindent(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button unindent(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button unindent(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button unindent(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button unindent(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button unindent(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button unindent(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button unindent(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button unindent(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button unindent(const control& parent);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button unindent(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button unindent(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button unindent(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button unindent(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button unindent(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button unindent(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button unindent(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button unindent(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button unindent(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button unindent(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent unindent light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button unindent(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent up light_button.
      /// @return The created light_button.
      static light_button up();
      /// @brief Create a system-defined light_button that represent up light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button up(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent up light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button up(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent up light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button up(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent up light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button up(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent up light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button up(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent up light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button up(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent up light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button up(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent up light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button up(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent up light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button up(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent up light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button up(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent up light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button up(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button up(const control& parent);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button up(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button up(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button up(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button up(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button up(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button up(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button up(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button up(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button up(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button up(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent up light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button up(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent view light_button.
      /// @return The created light_button.
      static light_button view();
      /// @brief Create a system-defined light_button that represent view light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button view(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent view light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button view(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent view light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button view(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent view light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button view(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent view light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button view(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent view light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button view(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent view light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button view(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent view light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button view(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent view light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button view(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent view light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button view(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent view light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button view(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button view(const control& parent);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button view(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button view(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button view(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button view(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button view(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button view(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button view(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button view(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button view(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button view(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent view light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button view(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent window light_button.
      /// @return The created light_button.
      static light_button window();
      /// @brief Create a system-defined light_button that represent window light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button window(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent window light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button window(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent window light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button window(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent window light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button window(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent window light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button window(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent window light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button window(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent window light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button window(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent window light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button window(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent window light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button window(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent window light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button window(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent window light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button window(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button window(const control& parent);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button window(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button window(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button window(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button window(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button window(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button window(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button window(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button window(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button window(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button window(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent window light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button window(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent yes light_button.
      /// @return The created light_button.
      static light_button yes();
      /// @brief Create a system-defined light_button that represent yes light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button yes(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent yes light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button yes(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent yes light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button yes(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent yes light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button yes(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent yes light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button yes(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent yes light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button yes(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent yes light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button yes(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent yes light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button yes(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent yes light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button yes(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent yes light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button yes(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent yes light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button yes(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button yes(const control& parent);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button yes(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button yes(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button yes(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button yes(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button yes(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button yes(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button yes(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button yes(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button yes(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button yes(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent yes light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button yes(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent zoom_in light_button.
      /// @return The created light_button.
      static light_button zoom_in();
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_in(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_in(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_in(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_in(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_in(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_in(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_in(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_in(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_in(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_in(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_in(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_in light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_in(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent zoom_out light_button.
      /// @return The created light_button.
      static light_button zoom_out();
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_out(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_out(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_out(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_out(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_out(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_out(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_out(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_out(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_out(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_out(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_out(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_out light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_out(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);

      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button.
      /// @return The created light_button.
      static light_button zoom_to_fit();
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified location.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified location, and size.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified location, size, and name.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_to_fit(const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified and check_state.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_to_fit(xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified check_state, and location.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified check_state, location, and size.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified check_state, location, size, and name.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_to_fit(xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified three_state, and check_state.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_to_fit(bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified three_state, check_state, and location.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified three_state, check_state, location, and size.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified three_state, check_state, location, size, and name.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_to_fit(bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent.
      /// @param parent The control that contains the light_button.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent, and location.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent,  location, and size.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent, three_state, and check_state.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent, bool three_state, xtd::forms::check_state check_state);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent, three_state, check_state, and location.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent, three_state, check_state, location, and size.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size);
      /// @brief Create a system-defined light_button that represent zoom_to_fit light_button with specified parent, three_state, check_state, location, size, and name.
      /// @param parent The control that contains the light_button.
      /// @param three_state true if the light_button is able to display three check states; otherwise, `false`.
      /// @param check_state One of the xtd::forms::check_state enumeration values.
      /// @param location The light_button location in pixels.
      /// @param size The light_button size in pixels.
      /// @param name The name of the light_button.
      /// @return The created light_button.
      static light_button zoom_to_fit(const control& parent, bool three_state, xtd::forms::check_state check_state, const drawing::point& location, const drawing::size& size, const xtd::string& name);
      /// @}
    };
  }
}
