using System.Globalization;
using System.Reflection;
using System.Text;

class GenerateCultureInfoCpp {
  static void Main() {
    var outputPath = Path.Combine(new []{"..", "..", "..", "..", "..", "src", "xtd.core", "src", "xtd", "globalization", "culture_info_cultures.cpp"});

    if (IsUsingNls()) {
      Console.WriteLine("⚠️  Skipped: The current .NET runtime is using NLS globalization mode.");
      return;
    }

    var sb = new StringBuilder();
    sb.AppendLine("// This code was generated by CSharp tool.");
    sb.AppendLine("//");
    sb.AppendLine("// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
    sb.AppendLine();
    sb.AppendLine("#include \"../../../include/xtd/globalization/culture_info\"");
    sb.AppendLine();
    sb.AppendLine("using namespace xtd;");
    sb.AppendLine("using namespace xtd::globalization;");
    sb.AppendLine();
    sb.AppendLine("array<culture_info> culture_info::cultures_ = {");

    var cultures = CultureInfo.GetCultures(CultureTypes.AllCultures);
    for (var index = 0; index < cultures.Length; ++index) {
      var cultureInfo = cultures[index];
      var cultureType = ToString(cultures[index].CultureTypes & CultureTypes.AllCultures);
      var displayName = Escape(cultureInfo.DisplayName);
      var englishName = Escape(cultureInfo.EnglishName);
      var nativeName = Escape(cultureInfo.NativeName);
      var name = Escape(cultureInfo.Name);
      var lcid = cultureInfo.LCID;
      var keyboardLayoutId = cultureInfo.KeyboardLayoutId;
      sb.AppendLine($"  {{{cultureType}, \"{displayName}\", \"{englishName}\", {keyboardLayoutId}, {lcid}, \"{name}\", \"{nativeName}\"}}{(index < cultures.Length - 1 ? "," : "")}");
    }
    sb.AppendLine("};");

    File.WriteAllText(outputPath, sb.ToString(), Encoding.UTF8);
    Console.WriteLine($"✅ Generated {outputPath} with {cultures.Length} cultures.");
  }

  public static bool IsUsingNls() {
    var type = typeof(CultureInfo).Assembly.GetType("System.Globalization.GlobalizationMode");
    var property = type?.GetProperty("UseNls", BindingFlags.Static | BindingFlags.NonPublic);
    return property != null && (bool)property.GetValue(null)!;
  }

  static string Escape(string text) => text.Replace("\\", "\\\\").Replace("\"", "\\\"");

  static string ToString(CultureTypes type) {
    var result = "";
    if (type.HasFlag(CultureTypes.NeutralCultures)) result+= string.Format("{0}{1}", string.IsNullOrEmpty(result) ? "" : " | ", "globalization::culture_types::neutral_cultures");
    if (type.HasFlag(CultureTypes.SpecificCultures)) result += string.Format("{0}{1}", string.IsNullOrEmpty(result) ? "" : " | ", "globalization::culture_types::specific_cultures");
    if (type.HasFlag(CultureTypes.InstalledWin32Cultures)) result += string.Format("{0}{1}", string.IsNullOrEmpty(result) ? "" : " | ", "globalization::culture_types::installed_win32_cultures");
    return result;
  }
}
