#pragma region xtd generated code
// This code was generated by CMake script.
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma once
#include <xtd/drawing/point>
#include <xtd/drawing/size>
#include <xtd/configuration/settings>

namespace keycodes::properties {
  /// @brief A strongly typed settings class, for storing user and system settings
  /// @details This class was auto-generated by CMake script. To add or remove a member, edit your CMakeList.txt or properties/settings.cmake file then rerun cmake tools.
  /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/guides/xtd.core/settings) for more informations.
  class settings : public xtd::object {
  public:
    /// @name Public Constructors

    /// @{
    /// @brief Initializes a new instance of the keycodes::properties::settings class.
    /// @remarks All properties are reloaded with the last saved value.
    settings() noexcept : settings {true} {}
    /// @brief Initializes a new instance of the keycodes::properties::settings class.
    /// @param load If `true` all properties are reloaded with the last saved values; otherwise none.
    explicit settings(bool load) noexcept {
      if (load) reload();
    }
    /// @}

    /// @cond
    settings(settings&&) noexcept = default;
    settings(const settings&) noexcept = default;
    settings& operator =(const settings&) noexcept = default;
    /// @endcond

    /// @name Public Properties

    /// @{
    /// @brief Gets the menu_visible user setting property.
    /// @return A bool value.
    bool menu_visible() const noexcept {return menu_visible_;}
    /// @brief Sets the menu_visible user setting property.
    /// @param value A bool value.
    settings& menu_visible(bool value) noexcept {
      menu_visible_ = value;
      return *this;
    }

    /// @brief Gets the show_key_down user setting property.
    /// @return A bool value.
    bool show_key_down() const noexcept {return show_key_down_;}
    /// @brief Sets the show_key_down user setting property.
    /// @param value A bool value.
    settings& show_key_down(bool value) noexcept {
      show_key_down_ = value;
      return *this;
    }

    /// @brief Gets the show_key_press user setting property.
    /// @return A bool value.
    bool show_key_press() const noexcept {return show_key_press_;}
    /// @brief Sets the show_key_press user setting property.
    /// @param value A bool value.
    settings& show_key_press(bool value) noexcept {
      show_key_press_ = value;
      return *this;
    }

    /// @brief Gets the location user setting property.
    /// @return A xtd::drawing::point value.
    xtd::drawing::point location() const noexcept {return location_;}
    /// @brief Sets the location user setting property.
    /// @param value A xtd::drawing::point value.
    settings& location(xtd::drawing::point value) noexcept {
      location_ = value;
      return *this;
    }

    /// @brief Gets the size user setting property.
    /// @return A xtd::drawing::size value.
    xtd::drawing::size size() const noexcept {return size_;}
    /// @brief Sets the size user setting property.
    /// @param value A xtd::drawing::size value.
    settings& size(xtd::drawing::size value) noexcept {
      size_ = value;
      return *this;
    }

    /// @}

    /// @name Public Methods

    /// @{
    /// @brief Reload all properties with the last saved values.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/guides/xtd.core/settings) for more informations.
    void reload() noexcept {
      menu_visible_ = settings_.read("menu_visible", menu_visible_);
      show_key_down_ = settings_.read("show_key_down", show_key_down_);
      show_key_press_ = settings_.read("show_key_press", show_key_press_);
      location_ = settings_.read("location", location_);
      size_ = settings_.read("size", size_);
    }

    /// @brief Reset all properties to their default values.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/guides/xtd.core/settings) for more informations.
    void reset() noexcept {
      settings_.reset();
      *this = settings {false};
    }

    /// @brief Save all properties.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/guides/xtd.core/settings) for more informations.
    void save() noexcept {
      settings_.write("menu_visible", menu_visible_);
      settings_.write("show_key_down", show_key_down_);
      settings_.write("show_key_press", show_key_press_);
      settings_.write("location", location_);
      settings_.write("size", size_);
      settings_.save();
    }
    /// @}

    /// @name Public Static Properties

    /// @{
    /// @brief Gets the default instance of settings.
    /// @return The default instance.
    /// @remarks At the first call all properties are reloaded with the last saved values.
    static settings& default_settings() noexcept {
      static auto default_settings = settings {};
      return default_settings;
    }
    /// @}

  private:
    xtd::configuration::settings settings_;
    bool menu_visible_ {true};
    bool show_key_down_ {true};
    bool show_key_press_ {true};
    xtd::drawing::point location_ {{50, 50}};
    xtd::drawing::size size_ {{380, 530}};
  };
}

#pragma endregion
