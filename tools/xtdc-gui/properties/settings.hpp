#pragma region xtd generated code
// This code was generated by CMake script.
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma once
#include <xtd/environment>
#include <xtd/configuration/settings>

namespace xtdc_gui::properties {
  /// @brief A strongly typed settings class, for storing user and system settings
  /// @details This class was auto-generated by CMake script. To add or remove a member, edit your CMakeList.txt or properties/settings.cmake file then rerun cmake tools.
  /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/Guides/xtd.core/settings) for more informations.
  class settings : public xtd::object {
  public:
    /// @name Public Constructors

    /// @{
    /// @brief Initializes a new instance of the xtdc_gui::properties::settings class.
    /// @remarks All properties are reloaded with the last saved value.
    settings() noexcept : settings {true} {}
    /// @brief Initializes a new instance of the xtdc_gui::properties::settings class.
    /// @param load If `true` all properties are reloaded with the last saved values; otherwise none.
    explicit settings(bool load) noexcept {
      if (load) reload();
    }
    /// @}

    /// @cond
    settings(settings&&) noexcept = default;
    settings(const settings&) noexcept = default;
    settings& operator =(const settings&) noexcept = default;
    /// @endcond

    /// @name Public Properties

    /// @{
    /// @brief Gets the menu_visible user setting property.
    /// @return A bool value.
    bool menu_visible() const noexcept {return menu_visible_;}
    /// @brief Sets the menu_visible user setting property.
    /// @param value A bool value.
    settings& menu_visible(bool value) noexcept {
      menu_visible_ = value;
      return *this;
    }

    /// @brief Gets the auto_close user setting property.
    /// @return A bool value.
    bool auto_close() const noexcept {return auto_close_;}
    /// @brief Sets the auto_close user setting property.
    /// @param value A bool value.
    settings& auto_close(bool value) noexcept {
      auto_close_ = value;
      return *this;
    }

    /// @brief Gets the create_propject_folder user setting property.
    /// @return A xtd::string value.
    xtd::string create_propject_folder() const noexcept {return create_propject_folder_;}
    /// @brief Sets the create_propject_folder user setting property.
    /// @param value A xtd::string value.
    settings& create_propject_folder(xtd::string value) noexcept {
      create_propject_folder_ = value;
      return *this;
    }

    /// @brief Gets the open_propject_folder user setting property.
    /// @return A xtd::string value.
    xtd::string open_propject_folder() const noexcept {return open_propject_folder_;}
    /// @brief Sets the open_propject_folder user setting property.
    /// @param value A xtd::string value.
    settings& open_propject_folder(xtd::string value) noexcept {
      open_propject_folder_ = value;
      return *this;
    }

    /// @brief Gets the open_recent_propjects user setting property.
    /// @return A xtd::string value.
    xtd::string open_recent_propjects() const noexcept {return open_recent_propjects_;}
    /// @brief Sets the open_recent_propjects user setting property.
    /// @param value A xtd::string value.
    settings& open_recent_propjects(xtd::string value) noexcept {
      open_recent_propjects_ = value;
      return *this;
    }

    /// @brief Gets the create_recent_propjects user setting property.
    /// @return A xtd::string value.
    xtd::string create_recent_propjects() const noexcept {return create_recent_propjects_;}
    /// @brief Sets the create_recent_propjects user setting property.
    /// @param value A xtd::string value.
    settings& create_recent_propjects(xtd::string value) noexcept {
      create_recent_propjects_ = value;
      return *this;
    }

    /// @brief Gets the language_index user setting property.
    /// @return A size_t value.
    size_t language_index() const noexcept {return language_index_;}
    /// @brief Sets the language_index user setting property.
    /// @param value A size_t value.
    settings& language_index(size_t value) noexcept {
      language_index_ = value;
      return *this;
    }

    /// @brief Gets the platform_index user setting property.
    /// @return A size_t value.
    size_t platform_index() const noexcept {return platform_index_;}
    /// @brief Sets the platform_index user setting property.
    /// @param value A size_t value.
    settings& platform_index(size_t value) noexcept {
      platform_index_ = value;
      return *this;
    }

    /// @brief Gets the type_index user setting property.
    /// @return A size_t value.
    size_t type_index() const noexcept {return type_index_;}
    /// @brief Sets the type_index user setting property.
    /// @param value A size_t value.
    settings& type_index(size_t value) noexcept {
      type_index_ = value;
      return *this;
    }

    /// @brief Gets the use_defaul_ide user setting property.
    /// @return A bool value.
    bool use_defaul_ide() const noexcept {return use_defaul_ide_;}
    /// @brief Sets the use_defaul_ide user setting property.
    /// @param value A bool value.
    settings& use_defaul_ide(bool value) noexcept {
      use_defaul_ide_ = value;
      return *this;
    }

    /// @brief Gets the user_path_ide user setting property.
    /// @return A xtd::string value.
    xtd::string user_path_ide() const noexcept {return user_path_ide_;}
    /// @brief Sets the user_path_ide user setting property.
    /// @param value A xtd::string value.
    settings& user_path_ide(xtd::string value) noexcept {
      user_path_ide_ = value;
      return *this;
    }

    /// @brief Gets the settings_form_location user setting property.
    /// @return A xtd::drawing::point value.
    xtd::drawing::point settings_form_location() const noexcept {return settings_form_location_;}
    /// @brief Sets the settings_form_location user setting property.
    /// @param value A xtd::drawing::point value.
    settings& settings_form_location(xtd::drawing::point value) noexcept {
      settings_form_location_ = value;
      return *this;
    }

    /// @}

    /// @name Public Methods

    /// @{
    /// @brief Reload all properties with the last saved values.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/Guides/xtd.core/settings) for more informations.
    void reload() noexcept {
      menu_visible_ = settings_.read("menu_visible", menu_visible_);
      auto_close_ = settings_.read("auto_close", auto_close_);
      create_propject_folder_ = settings_.read("create_propject_folder", create_propject_folder_);
      open_propject_folder_ = settings_.read("open_propject_folder", open_propject_folder_);
      open_recent_propjects_ = settings_.read("open_recent_propjects", open_recent_propjects_);
      create_recent_propjects_ = settings_.read("create_recent_propjects", create_recent_propjects_);
      language_index_ = settings_.read("language_index", language_index_);
      platform_index_ = settings_.read("platform_index", platform_index_);
      type_index_ = settings_.read("type_index", type_index_);
      use_defaul_ide_ = settings_.read("use_defaul_ide", use_defaul_ide_);
      user_path_ide_ = settings_.read("user_path_ide", user_path_ide_);
      settings_form_location_ = settings_.read("settings_form_location", settings_form_location_);
    }

    /// @brief Reset all properties to their default values.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/Guides/xtd.core/settings) for more informations.
    void reset() noexcept {
      settings_.reset();
      *this = settings {false};
    }

    /// @brief Save all properties.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/Guides/xtd.core/settings) for more informations.
    void save() noexcept {
      settings_.write("menu_visible", menu_visible_);
      settings_.write("auto_close", auto_close_);
      settings_.write("create_propject_folder", create_propject_folder_);
      settings_.write("open_propject_folder", open_propject_folder_);
      settings_.write("open_recent_propjects", open_recent_propjects_);
      settings_.write("create_recent_propjects", create_recent_propjects_);
      settings_.write("language_index", language_index_);
      settings_.write("platform_index", platform_index_);
      settings_.write("type_index", type_index_);
      settings_.write("use_defaul_ide", use_defaul_ide_);
      settings_.write("user_path_ide", user_path_ide_);
      settings_.write("settings_form_location", settings_form_location_);
      settings_.save();
    }
    /// @}

    /// @name Public Static Properties

    /// @{
    /// @brief Gets the default instance of settings.
    /// @return The default instance.
    /// @remarks At the first call all properties are reloaded with the last saved values.
    static settings& default_settings() noexcept {
      static auto default_settings = settings {};
      return default_settings;
    }
    /// @}

  private:
    xtd::configuration::settings settings_;
    bool menu_visible_ {true};
    bool auto_close_ {true};
    xtd::string create_propject_folder_ {xtd::environment::get_folder_path(xtd::environment::special_folder::home)};
    xtd::string open_propject_folder_ {xtd::environment::get_folder_path(xtd::environment::special_folder::home)};
    xtd::string open_recent_propjects_ {};
    xtd::string create_recent_propjects_ {};
    size_t language_index_ {1};
    size_t platform_index_ {static_cast<size_t>(xtd::environment::os_version().is_windows_platform() ? 1 : xtd::environment::os_version().is_unix_platform() ? 2 : 3)};
    size_t type_index_ {0};
    bool use_defaul_ide_ {true};
    xtd::string user_path_ide_ {};
    xtd::drawing::point settings_form_location_ {200, 100};
  };
}

#pragma endregion
