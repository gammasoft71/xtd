#pragma region xtd generated code
// This code was generated by CMake script.
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma once
#include <xtd/drawing/point>
#include <xtd/drawing/size>
#include <xtd/drawing/system_colors>
#include <xtd/configuration/settings>

namespace application_settings::properties {
  /// @brief A strongly typed settings class, for storing user and system settings
  /// @details This class was auto-generated by CMake script. To add or remove a member, edit your CMakeList.txt or properties/settings.cmake file then rerun cmake tools.
  /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/Guides/xtd.core/settings) for more informations.
  class settings : public xtd::object {
  public:
    /// @name Public Constructors

    /// @{
    /// @brief Initializes a new instance of the application_settings::properties::settings class.
    /// @remarks All properties are reloaded with the last saved value.
    settings() noexcept : settings {true} {}
    /// @brief Initializes a new instance of the application_settings::properties::settings class.
    /// @param load If true all properties are reloaded with the last saved values; otherwise none.
    explicit settings(bool load) noexcept {
      if (load) reload();
    }
    /// @}

    /// @cond
    settings(settings&&) noexcept = default;
    settings(const settings&) noexcept = default;
    settings& operator =(const settings&) noexcept = default;
    /// @endcond

    /// @name Public Properties

    /// @{
    /// @brief Gets the back_color user setting property.
    /// @return A xtd::drawing::color value.
    xtd::drawing::color back_color() const noexcept {return back_color_;}
    /// @brief Sets the back_color user setting property.
    /// @param value A xtd::drawing::color value.
    settings& back_color(xtd::drawing::color value) noexcept {
      back_color_ = value;
      return *this;
    }

    /// @brief Gets the location user setting property.
    /// @return A xtd::drawing::point value.
    xtd::drawing::point location() const noexcept {return location_;}
    /// @brief Sets the location user setting property.
    /// @param value A xtd::drawing::point value.
    settings& location(xtd::drawing::point value) noexcept {
      location_ = value;
      return *this;
    }

    /// @brief Gets the size user setting property.
    /// @return A xtd::drawing::size value.
    xtd::drawing::size size() const noexcept {return size_;}
    /// @brief Sets the size user setting property.
    /// @param value A xtd::drawing::size value.
    settings& size(xtd::drawing::size value) noexcept {
      size_ = value;
      return *this;
    }

    /// @brief Gets the text system setting property.
    /// @return A xtd::string value.
    xtd::string text() const noexcept {return "Settings example";}

    /// @}

    /// @name Public Methods

    /// @{
    /// @brief Reload all properties with the last saved values.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/Guides/xtd.core/settings) for more informations.
    void reload() noexcept {
      back_color_ = settings_.read("back_color", back_color_);
      location_ = settings_.read("location", location_);
      size_ = settings_.read("size", size_);
    }

    /// @brief Reset all properties to their default values.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/Guides/xtd.core/settings) for more informations.
    void reset() noexcept {
      settings_.reset();
      *this = settings {false};
    }

    /// @brief Save all properties.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/Guides/xtd.core/settings) for more informations.
    void save() noexcept {
      settings_.write("back_color", back_color_);
      settings_.write("location", location_);
      settings_.write("size", size_);
      settings_.save();
    }
    /// @}

    /// @name Public Static Properties

    /// @{
    /// @brief Gets the default instance of settings.
    /// @return The default instance.
    /// @remarks At the first call all properties are reloaded with the last saved values.
    static settings& default_settings() noexcept {
      static auto default_settings = settings {};
      return default_settings;
    }
    /// @}

  private:
    xtd::configuration::settings settings_;
    xtd::drawing::color back_color_ {xtd::drawing::system_colors::control()};
    xtd::drawing::point location_ {{100, 50}};
    xtd::drawing::size size_ {{335, 45}};
  };
}

#pragma endregion
