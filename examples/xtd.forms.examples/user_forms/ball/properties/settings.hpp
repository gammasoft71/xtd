#pragma region xtd generated code
// This code was generated by CMake script.
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma once
#include <xtd/configuration/settings>

namespace ball::properties {
  /// @brief A strongly typed settings class, for storing user and system settings
  /// @details This class was auto-generated by CMake script. To add or remove a member, edit your CMakeList.txt or properties/settings.cmake file then rerun cmake tools.
  /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/guides/xtd.core/settings) for more informations.
  class settings : public xtd::object {
  public:
    /// @name Public Constructors

    /// @{
    /// @brief Initializes a new instance of the ball::properties::settings class.
    /// @remarks All properties are reloaded with the last saved value.
    settings() noexcept : settings {true} {}
    /// @brief Initializes a new instance of the ball::properties::settings class.
    /// @param load If `true` all properties are reloaded with the last saved values; otherwise none.
    explicit settings(bool load) noexcept {
      if (load) reload();
    }
    /// @}

    /// @cond
    settings(settings&&) noexcept = default;
    settings(const settings&) noexcept = default;
    settings& operator =(const settings&) noexcept = default;
    /// @endcond

    /// @name Public Properties

    /// @{
    /// @brief Gets the ball_size user setting property.
    /// @return A xtd::drawing::size value.
    xtd::drawing::size ball_size() const noexcept {return ball_size_;}
    /// @brief Sets the ball_size user setting property.
    /// @param value A xtd::drawing::size value.
    settings& ball_size(xtd::drawing::size value) noexcept {
      ball_size_ = value;
      return *this;
    }

    /// @brief Gets the gradient_color1 user setting property.
    /// @return A xtd::drawing::color value.
    xtd::drawing::color gradient_color1() const noexcept {return gradient_color1_;}
    /// @brief Sets the gradient_color1 user setting property.
    /// @param value A xtd::drawing::color value.
    settings& gradient_color1(xtd::drawing::color value) noexcept {
      gradient_color1_ = value;
      return *this;
    }

    /// @brief Gets the gradient_color2 user setting property.
    /// @return A xtd::drawing::color value.
    xtd::drawing::color gradient_color2() const noexcept {return gradient_color2_;}
    /// @brief Sets the gradient_color2 user setting property.
    /// @param value A xtd::drawing::color value.
    settings& gradient_color2(xtd::drawing::color value) noexcept {
      gradient_color2_ = value;
      return *this;
    }

    /// @}

    /// @name Public Methods

    /// @{
    /// @brief Reload all properties with the last saved values.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/guides/xtd.core/settings) for more informations.
    void reload() noexcept {
      ball_size_ = settings_.read("ball_size", ball_size_);
      gradient_color1_ = settings_.read("gradient_color1", gradient_color1_);
      gradient_color2_ = settings_.read("gradient_color2", gradient_color2_);
    }

    /// @brief Reset all properties to their default values.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/guides/xtd.core/settings) for more informations.
    void reset() noexcept {
      settings_.reset();
      *this = settings {false};
    }

    /// @brief Save all properties.
    /// @remarks See [Settings](https://gammasoft71.github.io/xtd/docs/documentation/guides/xtd.core/settings) for more informations.
    void save() noexcept {
      settings_.write("ball_size", ball_size_);
      settings_.write("gradient_color1", gradient_color1_);
      settings_.write("gradient_color2", gradient_color2_);
      settings_.save();
    }
    /// @}

    /// @name Public Static Properties

    /// @{
    /// @brief Gets the default instance of settings.
    /// @return The default instance.
    /// @remarks At the first call all properties are reloaded with the last saved values.
    static settings& default_settings() noexcept {
      static auto default_settings = settings {};
      return default_settings;
    }
    /// @}

  private:
    xtd::configuration::settings settings_;
    xtd::drawing::size ball_size_ {200, 200};
    xtd::drawing::color gradient_color1_ {xtd::drawing::color::from_argb(0xBC, 0, 0)};
    xtd::drawing::color gradient_color2_ {xtd::drawing::color::from_argb(0xFF, 0xAA, 0x7E)};
  };
}

#pragma endregion
