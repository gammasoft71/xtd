{"version":3,"sources":["../builds/fetch.ts","../builds/models.ts"],"sourcesContent":["// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type { ClientOptions } from '@algolia/client-common';\n\nimport type { AbtestingClient } from '@algolia/client-abtesting';\nimport { abtestingClient } from '@algolia/client-abtesting';\nimport type { AnalyticsClient } from '@algolia/client-analytics';\nimport { analyticsClient } from '@algolia/client-analytics';\nimport type { InsightsClient } from '@algolia/client-insights';\nimport { insightsClient } from '@algolia/client-insights';\nimport type { PersonalizationClient } from '@algolia/client-personalization';\nimport { personalizationClient } from '@algolia/client-personalization';\nimport type { QuerySuggestionsClient } from '@algolia/client-query-suggestions';\nimport { querySuggestionsClient } from '@algolia/client-query-suggestions';\nimport type { SearchClient } from '@algolia/client-search';\nimport { searchClient } from '@algolia/client-search';\nimport type { IngestionClient } from '@algolia/ingestion';\nimport { ingestionClient } from '@algolia/ingestion';\nimport type { MonitoringClient } from '@algolia/monitoring';\nimport { monitoringClient } from '@algolia/monitoring';\nimport type { RecommendClient } from '@algolia/recommend';\nimport { recommendClient } from '@algolia/recommend';\n\nimport type {\n  AbtestingRegionOptions,\n  AnalyticsRegionOptions,\n  IngestionRegionOptions,\n  InitClientOptions,\n  InsightsRegionOptions,\n  PersonalizationRegionOptions,\n  QuerySuggestionsRegionOptions,\n} from './models';\n\nexport * from './models';\n\nexport type Algoliasearch = SearchClient & {\n  initAbtesting: (initOptions: InitClientOptions & AbtestingRegionOptions) => AbtestingClient;\n  initAnalytics: (initOptions: InitClientOptions & AnalyticsRegionOptions) => AnalyticsClient;\n  initIngestion: (initOptions: InitClientOptions & IngestionRegionOptions) => IngestionClient;\n  initInsights: (initOptions: InitClientOptions & InsightsRegionOptions) => InsightsClient;\n  initMonitoring: (initOptions?: InitClientOptions) => MonitoringClient;\n  initPersonalization: (initOptions: InitClientOptions & PersonalizationRegionOptions) => PersonalizationClient;\n  initQuerySuggestions: (initOptions: InitClientOptions & QuerySuggestionsRegionOptions) => QuerySuggestionsClient;\n  initRecommend: (initOptions?: InitClientOptions) => RecommendClient;\n};\n\nexport function algoliasearch(appId: string, apiKey: string, options?: ClientOptions): Algoliasearch {\n  if (!appId || typeof appId !== 'string') {\n    throw new Error('`appId` is missing.');\n  }\n\n  if (!apiKey || typeof apiKey !== 'string') {\n    throw new Error('`apiKey` is missing.');\n  }\n\n  const client = searchClient(appId, apiKey, options);\n\n  return {\n    ...client,\n\n    /**\n     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.\n     */\n    get _ua(): string {\n      return client.transporter.algoliaAgent.value;\n    },\n\n    initAbtesting: (initOptions: InitClientOptions & AbtestingRegionOptions): AbtestingClient => {\n      return abtestingClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initAnalytics: (initOptions: InitClientOptions & AnalyticsRegionOptions): AnalyticsClient => {\n      return analyticsClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initIngestion: (initOptions: InitClientOptions & IngestionRegionOptions): IngestionClient => {\n      return ingestionClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initInsights: (initOptions: InitClientOptions & InsightsRegionOptions): InsightsClient => {\n      return insightsClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initMonitoring: (initOptions: InitClientOptions = {}): MonitoringClient => {\n      return monitoringClient(initOptions.appId || appId, initOptions.apiKey || apiKey, initOptions.options);\n    },\n\n    initPersonalization: (initOptions: InitClientOptions & PersonalizationRegionOptions): PersonalizationClient => {\n      return personalizationClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initQuerySuggestions: (initOptions: InitClientOptions & QuerySuggestionsRegionOptions): QuerySuggestionsClient => {\n      return querySuggestionsClient(\n        initOptions.appId || appId,\n        initOptions.apiKey || apiKey,\n        initOptions.region,\n        initOptions.options,\n      );\n    },\n\n    initRecommend: (initOptions: InitClientOptions = {}): RecommendClient => {\n      return recommendClient(initOptions.appId || appId, initOptions.apiKey || apiKey, initOptions.options);\n    },\n  };\n}\n","// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.\n\nimport type { Region as AbtestingRegion, RegionOptions as AbtestingRegionOptions } from '@algolia/client-abtesting';\nimport type { Region as AnalyticsRegion, RegionOptions as AnalyticsRegionOptions } from '@algolia/client-analytics';\nimport type { Region as InsightsRegion, RegionOptions as InsightsRegionOptions } from '@algolia/client-insights';\nimport type { Region as IngestionRegion, RegionOptions as IngestionRegionOptions } from '@algolia/ingestion';\n\nimport type {\n  Region as PersonalizationRegion,\n  RegionOptions as PersonalizationRegionOptions,\n} from '@algolia/client-personalization';\nimport type {\n  Region as QuerySuggestionsRegion,\n  RegionOptions as QuerySuggestionsRegionOptions,\n} from '@algolia/client-query-suggestions';\n\nimport type { Status } from '@algolia/client-abtesting';\nimport type { ClientOptions } from '@algolia/client-common';\nimport type { EventType } from '@algolia/client-personalization';\nimport type {\n  Action,\n  AdvancedSyntaxFeatures,\n  AlternativesAsExact,\n  Anchoring,\n  AroundPrecision,\n  AroundRadius,\n  AroundRadiusAll,\n  AutomaticFacetFilter,\n  AutomaticFacetFilters,\n  Banner,\n  BannerImage,\n  BannerImageUrl,\n  BannerLink,\n  BaseIndexSettings,\n  BaseSearchParams,\n  BaseSearchParamsWithoutQuery,\n  BaseSearchResponse,\n  BooleanString,\n  Condition,\n  Consequence,\n  ConsequenceHide,\n  ConsequenceParams,\n  ConsequenceQuery,\n  ConsequenceQueryObject,\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  DeleteSourceProps,\n  DeletedAtResponse,\n  Distinct,\n  Edit,\n  EditType,\n  ErrorBase,\n  ExactOnSingleWordQuery,\n  Exhaustive,\n  FacetFilters,\n  FacetHits,\n  FacetOrdering,\n  FacetStats,\n  Facets,\n  GetTaskProps,\n  HighlightResult,\n  HighlightResultOption,\n  Hit,\n  IgnorePlurals,\n  IndexSettingsAsSearchParams,\n  InsideBoundingBox,\n  Languages,\n  MatchLevel,\n  MatchedGeoLocation,\n  Mode,\n  NumericFilters,\n  OptionalFilters,\n  OptionalWords,\n  Params,\n  Personalization,\n  Promote,\n  PromoteObjectID,\n  PromoteObjectIDs,\n  QueryType,\n  Range,\n  RankingInfo,\n  ReRankingApplyFilter,\n  Redirect,\n  RedirectRuleIndexData,\n  RedirectRuleIndexMetadata,\n  RedirectURL,\n  RemoveStopWords,\n  RemoveWordsIfNoResults,\n  RenderingContent,\n  SearchForFacetValuesProps,\n  SearchForFacetValuesRequest,\n  SearchForFacetValuesResponse,\n  SearchHits,\n  SearchPagination,\n  SearchParams,\n  SearchParamsObject,\n  SearchParamsQuery,\n  SearchResponse,\n  SemanticSearch,\n  SnippetResult,\n  SnippetResultOption,\n  SortRemainingBy,\n  Source,\n  SupportedLanguage,\n  TagFilters,\n  TaskStatus,\n  TimeRange,\n  TypoTolerance,\n  TypoToleranceEnum,\n  Value,\n  Widgets,\n} from '@algolia/client-search';\nimport { apiClientVersion } from '@algolia/client-search';\n\nexport * from '@algolia/client-abtesting';\nexport * from '@algolia/client-analytics';\nexport * from '@algolia/client-insights';\nexport * from '@algolia/client-personalization';\nexport * from '@algolia/client-query-suggestions';\nexport * from '@algolia/client-search';\nexport * from '@algolia/ingestion';\nexport * from '@algolia/monitoring';\nexport * from '@algolia/recommend';\n\nexport type Region =\n  | AbtestingRegion\n  | AnalyticsRegion\n  | IngestionRegion\n  | InsightsRegion\n  | PersonalizationRegion\n  | QuerySuggestionsRegion;\nexport type RegionOptions =\n  | AbtestingRegionOptions\n  | AnalyticsRegionOptions\n  | IngestionRegionOptions\n  | InsightsRegionOptions\n  | PersonalizationRegionOptions\n  | QuerySuggestionsRegionOptions;\n\nexport type {\n  AbtestingRegion,\n  AbtestingRegionOptions,\n  AnalyticsRegion,\n  AnalyticsRegionOptions,\n  EventType,\n  IngestionRegion,\n  IngestionRegionOptions,\n  InsightsRegion,\n  InsightsRegionOptions,\n  PersonalizationRegion,\n  PersonalizationRegionOptions,\n  QuerySuggestionsRegion,\n  QuerySuggestionsRegionOptions,\n  Status,\n};\n\nexport type {\n  Action,\n  AdvancedSyntaxFeatures,\n  AlternativesAsExact,\n  Anchoring,\n  AroundPrecision,\n  AroundRadius,\n  AroundRadiusAll,\n  AutomaticFacetFilter,\n  AutomaticFacetFilters,\n  Banner,\n  BannerImage,\n  BannerImageUrl,\n  BannerLink,\n  BaseIndexSettings,\n  BaseSearchParams,\n  BaseSearchParamsWithoutQuery,\n  BaseSearchResponse,\n  BooleanString,\n  Condition,\n  Consequence,\n  ConsequenceHide,\n  ConsequenceParams,\n  ConsequenceQuery,\n  ConsequenceQueryObject,\n  CustomDeleteProps,\n  CustomGetProps,\n  CustomPostProps,\n  CustomPutProps,\n  DeleteSourceProps,\n  DeletedAtResponse,\n  Distinct,\n  Edit,\n  EditType,\n  ErrorBase,\n  ExactOnSingleWordQuery,\n  Exhaustive,\n  FacetFilters,\n  FacetHits,\n  FacetOrdering,\n  FacetStats,\n  Facets,\n  GetTaskProps,\n  HighlightResult,\n  HighlightResultOption,\n  Hit,\n  IgnorePlurals,\n  IndexSettingsAsSearchParams,\n  InsideBoundingBox,\n  Languages,\n  MatchLevel,\n  MatchedGeoLocation,\n  Mode,\n  NumericFilters,\n  OptionalFilters,\n  OptionalWords,\n  Params,\n  Personalization,\n  Promote,\n  PromoteObjectID,\n  PromoteObjectIDs,\n  QueryType,\n  Range,\n  RankingInfo,\n  ReRankingApplyFilter,\n  Redirect,\n  RedirectRuleIndexData,\n  RedirectRuleIndexMetadata,\n  RedirectURL,\n  RemoveStopWords,\n  RemoveWordsIfNoResults,\n  RenderingContent,\n  SearchForFacetValuesProps,\n  SearchForFacetValuesRequest,\n  SearchForFacetValuesResponse,\n  SearchHits,\n  SearchPagination,\n  SearchParams,\n  SearchParamsObject,\n  SearchParamsQuery,\n  SearchResponse,\n  SemanticSearch,\n  SnippetResult,\n  SnippetResultOption,\n  SortRemainingBy,\n  Source,\n  SupportedLanguage,\n  TagFilters,\n  TaskStatus,\n  TimeRange,\n  TypoTolerance,\n  TypoToleranceEnum,\n  Value,\n  Widgets,\n};\n\nexport { apiClientVersion };\n\n/**\n * Options forwarded to the client initialized via the `init` method.\n */\nexport type InitClientOptions = Partial<{\n  /**\n   * App to target with the initialized client, defaults to the `algoliasearch` appId.\n   */\n  appId: string;\n  /**\n   * API key of the targeted app ID, defaults to the `algoliasearch` apiKey.\n   */\n  apiKey: string;\n  options: ClientOptions;\n}>;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,SAAS,uBAAuB;AAEhC,SAAS,uBAAuB;AAEhC,SAAS,sBAAsB;AAE/B,SAAS,6BAA6B;AAEtC,SAAS,8BAA8B;AAEvC,SAAS,oBAAoB;AAE7B,SAAS,uBAAuB;AAEhC,SAAS,wBAAwB;AAEjC,SAAS,uBAAuB;;;ACrBhC;AAAA;AAAA;AAAA;AAoHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,SAAS,wBAAwB;AAEjC,uCAAc;AACd,uCAAc;AACd,sCAAc;AACd,6CAAc;AACd,+CAAc;AACd,oCAAc;AACd,gCAAc;AACd,iCAAc;AACd,gCAAc;;;AD3Fd,0BAAc;AAaP,SAAS,cAAc,OAAe,QAAgB,SAAwC;AACnG,MAAI,CAAC,SAAS,OAAO,UAAU,UAAU;AACvC,UAAM,IAAI,MAAM,qBAAqB;AAAA,EACvC;AAEA,MAAI,CAAC,UAAU,OAAO,WAAW,UAAU;AACzC,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACxC;AAEA,QAAM,SAAS,aAAa,OAAO,QAAQ,OAAO;AAElD,SAAO;AAAA,IACL,GAAG;AAAA;AAAA;AAAA;AAAA,IAKH,IAAI,MAAc;AAChB,aAAO,OAAO,YAAY,aAAa;AAAA,IACzC;AAAA,IAEA,eAAe,CAAC,gBAA6E;AAC3F,aAAO;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,YAAY,UAAU;AAAA,QACtB,YAAY;AAAA,QACZ,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IAEA,eAAe,CAAC,gBAA6E;AAC3F,aAAO;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,YAAY,UAAU;AAAA,QACtB,YAAY;AAAA,QACZ,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IAEA,eAAe,CAAC,gBAA6E;AAC3F,aAAO;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,YAAY,UAAU;AAAA,QACtB,YAAY;AAAA,QACZ,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IAEA,cAAc,CAAC,gBAA2E;AACxF,aAAO;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,YAAY,UAAU;AAAA,QACtB,YAAY;AAAA,QACZ,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IAEA,gBAAgB,CAAC,cAAiC,CAAC,MAAwB;AACzE,aAAO,iBAAiB,YAAY,SAAS,OAAO,YAAY,UAAU,QAAQ,YAAY,OAAO;AAAA,IACvG;AAAA,IAEA,qBAAqB,CAAC,gBAAyF;AAC7G,aAAO;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,YAAY,UAAU;AAAA,QACtB,YAAY;AAAA,QACZ,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IAEA,sBAAsB,CAAC,gBAA2F;AAChH,aAAO;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,YAAY,UAAU;AAAA,QACtB,YAAY;AAAA,QACZ,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IAEA,eAAe,CAAC,cAAiC,CAAC,MAAuB;AACvE,aAAO,gBAAgB,YAAY,SAAS,OAAO,YAAY,UAAU,QAAQ,YAAY,OAAO;AAAA,IACtG;AAAA,EACF;AACF;","names":[]}