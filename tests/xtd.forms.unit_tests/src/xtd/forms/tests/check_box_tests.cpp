#include <xtd/forms/check_box>
#include <xtd/forms/form>
#include <xtd/diagnostics/debugger>
#include <xtd/tunit/assert>
#include <xtd/tunit/test_class_attribute>
#include <xtd/tunit/test_method_attribute>

using namespace xtd;
using namespace xtd::drawing;
using namespace xtd::forms;
using namespace xtd::tunit;

namespace xtd::forms::tests {
  class test_class_(check_box_tests) {
    class check_box_for_test : public check_box {
    public:
      check_box_for_test() = default;
      
      using check_box::default_back_color;
      using check_box::default_cursor;
      using check_box::default_font;
      using check_box::default_fore_color;
      using check_box::default_size;
    };
    
    void test_method_(constructor) {
      check_box_for_test check_box;
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::are_equal(check_box.default_size().height, check_box.bottom());
      assert::are_equal(drawing::rectangle({0, 0}, check_box.default_size()), check_box.bounds());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal(drawing::rectangle({0, 0}, check_box.default_size()), check_box.client_rectangle());
      assert::are_equal(check_box.default_size(), check_box.client_size());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.default_back_color());
      assert::are_equal(forms::cursors::default_cursor(), check_box.default_cursor());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.default_font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.default_fore_color());
      assert::are_equal(check_box.default_size(), check_box.default_size());
      assert::are_equal(drawing::rectangle({0, 0}, check_box.default_size()), check_box.display_rectangle());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::are_equal(check_box.default_size().height, check_box.height());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::is_zero(check_box.left());
      assert::are_equal(drawing::point::empty, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::are_equal(check_box.default_size().width, check_box.right());
      assert::are_equal(check_box.default_size(), check_box.size());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::is_empty(check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::is_zero(check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(check_box.default_size().width, check_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());

      assert::are_equal(check_state::unchecked, check_box.check_state());
      assert::is_false(check_box.checked());
      assert::is_false(check_box.three_state());
    }
    
    void test_method_(create) {
      auto check_box = forms::check_box::create();
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::is_zero(check_box.left());
      assert::are_equal(drawing::point::empty, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::is_empty(check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::is_zero(check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());

      assert::are_equal(check_state::unchecked, check_box.check_state());
      assert::is_false(check_box.checked());
      assert::is_false(check_box.three_state());
    }
    
    void test_method_(create_with_text) {
      auto check_box = forms::check_box::create("new text");
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::is_zero(check_box.left());
      assert::are_equal(drawing::point::empty, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::is_zero(check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());

      assert::are_equal(check_state::unchecked, check_box.check_state());
      assert::is_false(check_box.checked());
      assert::is_false(check_box.three_state());
    }
    
    void test_method_(create_with_text_and_three_state) {
      auto check_box = forms::check_box::create("new text", true);
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::is_zero(check_box.left());
      assert::are_equal(drawing::point::empty, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::is_zero(check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::unchecked, check_box.check_state());
      assert::is_false(check_box.checked());
      assert::is_true(check_box.three_state());
    }
    
    void test_method_(create_with_text_three_state_and_check_state) {
      auto check_box = forms::check_box::create("new text", true, check_state::checked);
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::is_zero(check_box.left());
      assert::are_equal(drawing::point::empty, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::is_zero(check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_true(check_box.three_state());
    }
    
    void test_method_(create_with_text_three_state_check_state_and_location) {
      auto check_box = forms::check_box::create("new text", true, check_state::checked, {10, 20});
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_true(check_box.three_state());
    }
    
    void test_method_(create_with_text_three_state_check_state_location_and_size) {
      auto check_box = forms::check_box::create("new text", true, check_state::checked, {10, 20}, {30, 40});
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::are_equal(40, check_box.height());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, check_box.size());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(30, check_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_true(check_box.three_state());
    }
    
    void test_method_(create_with_text_three_state_check_state_location_size_and_name) {
      auto check_box = forms::check_box::create("new text", true, check_state::checked, {10, 20}, {30, 40}, "check_box");
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::are_equal(40, check_box.height());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::are_equal("check_box", check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, check_box.size());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(30, check_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_true(check_box.three_state());
    }

    void test_method_(create_with_parent) {
      auto form = forms::form::create();
      auto check_box = forms::check_box::create(form);
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_true(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_not_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_true(check_box.is_handle_created());
      assert::is_zero(check_box.left());
      assert::are_equal(drawing::point::empty, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_not_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::are_same(form, check_box.parent().value().get());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::is_empty(check_box.text());
      assert::is_not_zero(check_box.toolkit_handle());
      assert::is_zero(check_box.top());
      assert::are_same(form, check_box.top_level_control().value().get());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());

      assert::are_equal(check_state::unchecked, check_box.check_state());
      assert::is_false(check_box.checked());
      assert::is_false(check_box.three_state());
    }

    void test_method_(create_with_parent_and_text) {
      auto form = forms::form::create();
      auto check_box = forms::check_box::create(form, "new text");
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_true(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_not_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_true(check_box.is_handle_created());
      assert::is_zero(check_box.left());
      assert::are_equal(drawing::point::empty, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_not_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::are_same(form, check_box.parent().value().get());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_not_zero(check_box.toolkit_handle());
      assert::is_zero(check_box.top());
      assert::are_same(form, check_box.top_level_control().value().get());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());

      assert::are_equal(check_state::unchecked, check_box.check_state());
      assert::is_false(check_box.checked());
      assert::is_false(check_box.three_state());
    }

    void test_method_(create_with_parent_text_and_three_state) {
      auto form = forms::form::create();
      auto check_box = forms::check_box::create(form, "new text", true);
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_true(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_not_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_true(check_box.is_handle_created());
      assert::is_zero(check_box.left());
      assert::are_equal(drawing::point::empty, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_not_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::are_same(form, check_box.parent().value().get());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_not_zero(check_box.toolkit_handle());
      assert::is_zero(check_box.top());
      assert::are_same(form, check_box.top_level_control().value().get());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::unchecked, check_box.check_state());
      assert::is_false(check_box.checked());
      assert::is_true(check_box.three_state());
    }

    void test_method_(create_with_parent_text_three_state_and_check_state) {
      auto form = forms::form::create();
      auto check_box = forms::check_box::create(form, "new text", true, check_state::checked);
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_true(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_not_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_true(check_box.is_handle_created());
      assert::is_zero(check_box.left());
      assert::are_equal(drawing::point::empty, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_not_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::are_same(form, check_box.parent().value().get());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_not_zero(check_box.toolkit_handle());
      assert::is_zero(check_box.top());
      assert::are_same(form, check_box.top_level_control().value().get());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_true(check_box.three_state());
    }

    void test_method_(create_with_parent_text_three_state_check_state_and_location) {
      auto form = forms::form::create();
      auto check_box = forms::check_box::create(form, "new text", true, check_state::checked, {10, 20});
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_true(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_not_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_true(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_not_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::are_same(form, check_box.parent().value().get());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_not_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::are_same(form, check_box.top_level_control().value().get());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_true(check_box.three_state());
    }

    void test_method_(create_with_parent_text_three_state_check_state_location_and_size) {
      auto form = forms::form::create();
      auto check_box = forms::check_box::create(form, "new text", true, check_state::checked, {10, 20}, {30, 40});
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_true(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_not_zero(check_box.handle());
      assert::are_equal(40, check_box.height());
      assert::is_false(check_box.invoke_required());
      assert::is_true(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_not_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::are_same(form, check_box.parent().value().get());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, check_box.size());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_not_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::are_same(form, check_box.top_level_control().value().get());
      assert::is_true(check_box.visible());
      assert::are_equal(30, check_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_true(check_box.three_state());
    }

    void test_method_(create_with_parent_text_three_state_check_state_location_size_and_name) {
      auto form = forms::form::create();
      auto check_box = forms::check_box::create(form, "new text", true, check_state::checked, {10, 20}, {30, 40}, "check_box");
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_true(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_not_zero(check_box.handle());
      assert::are_equal(40, check_box.height());
      assert::is_false(check_box.invoke_required());
      assert::is_true(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_not_zero(check_box.native_handle());
      assert::are_equal("check_box", check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::are_same(form, check_box.parent().value().get());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, check_box.size());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_not_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::are_same(form, check_box.top_level_control().value().get());
      assert::is_true(check_box.visible());
      assert::are_equal(30, check_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_true(check_box.three_state());
    }

    void test_method_(create_with_text_and_check_state) {
      auto check_box = forms::check_box::create("new text", check_state::checked);
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::is_zero(check_box.left());
      assert::are_equal(drawing::point::empty, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::is_zero(check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_false(check_box.three_state());
    }
    
    void test_method_(create_with_text_check_state_and_location) {
      auto check_box = forms::check_box::create("new text", check_state::checked, {10, 20});
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_false(check_box.three_state());
    }
    
    void test_method_(create_with_text_check_state_location_and_size) {
      auto check_box = forms::check_box::create("new text", check_state::checked, {10, 20}, {30, 40});
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::are_equal(40, check_box.height());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, check_box.size());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(30, check_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_false(check_box.three_state());
    }
    
    void test_method_(create_with_text_check_state_location_size_and_name) {
      auto check_box = forms::check_box::create("new text", check_state::checked, {10, 20}, {30, 40}, "check_box");
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_false(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_zero(check_box.handle());
      assert::are_equal(40, check_box.height());
      assert::is_false(check_box.invoke_required());
      assert::is_false(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_zero(check_box.native_handle());
      assert::are_equal("check_box", check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::is_null(check_box.parent());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, check_box.size());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::is_null(check_box.top_level_control());
      assert::is_true(check_box.visible());
      assert::are_equal(30, check_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_false(check_box.three_state());
    }

    void test_method_(create_with_parent_text_and_check_state) {
      auto form = forms::form::create();
      auto check_box = forms::check_box::create(form, "new text", check_state::checked);
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_true(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_not_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_true(check_box.is_handle_created());
      assert::is_zero(check_box.left());
      assert::are_equal(drawing::point::empty, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_not_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::are_same(form, check_box.parent().value().get());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_not_zero(check_box.toolkit_handle());
      assert::is_zero(check_box.top());
      assert::are_same(form, check_box.top_level_control().value().get());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_false(check_box.three_state());
    }
    
    void test_method_(create_with_parent_text_check_state_and_location) {
      auto form = forms::form::create();
      auto check_box = forms::check_box::create(form, "new text", check_state::checked, {10, 20});
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_true(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_not_zero(check_box.handle());
      assert::is_false(check_box.invoke_required());
      assert::is_true(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_not_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::are_same(form, check_box.parent().value().get());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_not_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::are_same(form, check_box.top_level_control().value().get());
      assert::is_true(check_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_false(check_box.three_state());
    }
    
    void test_method_(create_with_parent_text_check_state_location_and_size) {
      auto form = forms::form::create();
      auto check_box = forms::check_box::create(form, "new text", check_state::checked, {10, 20}, {30, 40});
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_true(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_not_zero(check_box.handle());
      assert::are_equal(40, check_box.height());
      assert::is_false(check_box.invoke_required());
      assert::is_true(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_not_zero(check_box.native_handle());
      assert::is_empty(check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::are_same(form, check_box.parent().value().get());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, check_box.size());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_not_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::are_same(form, check_box.top_level_control().value().get());
      assert::is_true(check_box.visible());
      assert::are_equal(30, check_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_false(check_box.three_state());
    }
    
    void test_method_(create_with_parent_text_check_state_location_size_and_name) {
      auto form = forms::form::create();
      auto check_box = forms::check_box::create(form, "new text", check_state::checked, {10, 20}, {30, 40}, "check_box");
      assert::are_equal(anchor_styles::left | anchor_styles::top, check_box.anchor());
      assert::are_equal(drawing::point::empty, check_box.auto_scroll_point());
      assert::is_false(check_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), check_box.back_color());
      assert::are_equal(drawing::image::empty, check_box.background_image());
      assert::are_equal(image_layout::tile, check_box.background_image_layout());
      assert::is_false(check_box.can_focus());
      assert::is_true(check_box.can_raise_events());
      assert::is_true(check_box.can_select());
      assert::are_equal("Gammasoft", check_box.company_name());
      assert::is_null(check_box.context_menu());
      assert::are_equal(forms::control_appearance::standard, check_box.control_appearance());
      assert::is_empty(check_box.controls());
      assert::is_true(check_box.created());
      assert::are_equal(forms::cursors::default_cursor(), check_box.cursor());
      assert::are_equal(forms::dock_style::none, check_box.dock());
      assert::is_false(check_box.double_buffered());
      assert::is_true(check_box.enabled());
      assert::is_false(check_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), check_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), check_box.fore_color());
      assert::is_not_zero(check_box.handle());
      assert::are_equal(40, check_box.height());
      assert::is_false(check_box.invoke_required());
      assert::is_true(check_box.is_handle_created());
      assert::are_equal(10, check_box.left());
      assert::are_equal(drawing::point {10, 20}, check_box.location());
      assert::are_equal(forms::padding(3), check_box.margin());
      assert::are_equal(drawing::size::empty, check_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, check_box.maximum_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, check_box.minimum_size());
      assert::is_not_zero(check_box.native_handle());
      assert::are_equal("check_box", check_box.name());
      assert::are_equal(forms::padding(0), check_box.padding());
      assert::are_same(form, check_box.parent().value().get());
      assert::are_equal("xtd", check_box.product_name());
      assert::is_not_zero(check_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, check_box.size());
      assert::is_empty(check_box.style_sheet().theme().name());
      assert::is_true(check_box.tab_stop());
      assert::is_false(check_box.tag().has_value());
      assert::are_equal("new text", check_box.text());
      assert::is_not_zero(check_box.toolkit_handle());
      assert::are_equal(20, check_box.top());
      assert::are_same(form, check_box.top_level_control().value().get());
      assert::is_true(check_box.visible());
      assert::are_equal(30, check_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(check_box.auto_ellipsis());
      assert::are_equal(flat_button_appearance(), check_box.flat_appearance());
      assert::are_equal(flat_style::standard, check_box.flat_style());
      assert::are_equal(image::empty, check_box.image());
      assert::are_equal(content_alignment::middle_center, check_box.image_align());
      assert::are_equal(-1, check_box.image_index());
      assert::are_equal(image_list::empty, check_box.image_list());
      assert::are_equal(content_alignment::middle_left, check_box.text_align());
      
      assert::are_equal(check_state::checked, check_box.check_state());
      assert::is_true(check_box.checked());
      assert::is_false(check_box.three_state());
    }

    void test_method_(set_client_size) {
      form form;
      check_box_for_test check_box;
      check_box.parent(form);
      check_box.client_size({100, 50});
      assert::are_equal(drawing::size(100, 50), check_box.client_size());
    }
    
    void test_method_(set_size) {
      form form;
      check_box_for_test check_box;
      check_box.parent(form);
      check_box.size({100, 50});
      assert::are_equal(drawing::size(100, 50), check_box.size());
    }
  };
}
