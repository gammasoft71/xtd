#include <xtd/forms/combo_box>
#include <xtd/forms/form>
#include <xtd/diagnostics/debugger>
#include <xtd/tunit/assert>
#include <xtd/tunit/collection_assert>
#include <xtd/tunit/test_class_attribute>
#include <xtd/tunit/test_method_attribute>

using namespace xtd;
using namespace xtd::drawing;
using namespace xtd::forms;
using namespace xtd::tunit;

namespace xtd::forms::tests {
  class test_class_(combo_box_tests) {
    class combo_box_for_test : public combo_box {
    public:
      combo_box_for_test() = default;
      
      using combo_box::default_back_color;
      using combo_box::default_cursor;
      using combo_box::default_font;
      using combo_box::default_fore_color;
      using combo_box::default_size;
    };
    
    void test_method_(constructor) {
      combo_box_for_test combo_box;
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::are_equal(combo_box.default_size().height, combo_box.bottom());
      assert::are_equal(drawing::rectangle({0, 0}, combo_box.default_size()), combo_box.bounds());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal(drawing::rectangle({0, 0}, combo_box.default_size()), combo_box.client_rectangle());
      assert::are_equal(combo_box.default_size(), combo_box.client_size());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_false(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.default_back_color());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.default_cursor());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.default_font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.default_fore_color());
      assert::are_equal(combo_box.default_size(), combo_box.default_size());
      assert::are_equal(drawing::rectangle({0, 0}, combo_box.default_size()), combo_box.display_rectangle());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_zero(combo_box.handle());
      assert::are_equal(combo_box.default_size().height, combo_box.height());
      assert::is_false(combo_box.invoke_required());
      assert::is_false(combo_box.is_handle_created());
      assert::is_zero(combo_box.left());
      assert::are_equal(drawing::point::empty, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_zero(combo_box.native_handle());
      assert::is_empty(combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::is_null(combo_box.parent());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::are_equal(combo_box.default_size().width, combo_box.right());
      assert::are_equal(combo_box.default_size(), combo_box.size());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::is_empty(combo_box.text());
      assert::is_zero(combo_box.toolkit_handle());
      assert::is_zero(combo_box.top());
      assert::is_null(combo_box.top_level_control());
      assert::is_true(combo_box.visible());
      assert::are_equal(combo_box.default_size().width, combo_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::is_empty(combo_box.items());
      assert::are_equal(combo_box::object_collection::npos, combo_box.selected_index());
      assert::are_equal(combo_box::item::empty, combo_box.selected_item());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create) {
      auto combo_box = forms::combo_box::create();
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_false(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_zero(combo_box.handle());
      assert::is_false(combo_box.invoke_required());
      assert::is_false(combo_box.is_handle_created());
      assert::is_zero(combo_box.left());
      assert::are_equal(drawing::point::empty, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_zero(combo_box.native_handle());
      assert::is_empty(combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::is_null(combo_box.parent());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::is_empty(combo_box.text());
      assert::is_zero(combo_box.toolkit_handle());
      assert::is_zero(combo_box.top());
      assert::is_null(combo_box.top_level_control());
      assert::is_true(combo_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::is_empty(combo_box.items());
      assert::are_equal(combo_box::object_collection::npos, combo_box.selected_index());
      assert::are_equal(combo_box::item::empty, combo_box.selected_item());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create_with_items) {
      auto combo_box = forms::combo_box::create({"Item1", "Item2", "Item3"});
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_false(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_zero(combo_box.handle());
      assert::is_false(combo_box.invoke_required());
      assert::is_false(combo_box.is_handle_created());
      assert::is_zero(combo_box.left());
      assert::are_equal(drawing::point::empty, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_zero(combo_box.native_handle());
      assert::is_empty(combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::is_null(combo_box.parent());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::is_empty(combo_box.text());
      assert::is_zero(combo_box.toolkit_handle());
      assert::is_zero(combo_box.top());
      assert::is_null(combo_box.top_level_control());
      assert::is_true(combo_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::are_equal({"Item1", "Item2", "Item3"}, combo_box.items());
      assert::are_equal(combo_box::object_collection::npos, combo_box.selected_index());
      assert::are_equal(combo_box::item::empty, combo_box.selected_item());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create_with_items_and_selected_index) {
      auto combo_box = forms::combo_box::create({"Item1", "Item2", "Item3"}, 2);
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_false(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_zero(combo_box.handle());
      assert::is_false(combo_box.invoke_required());
      assert::is_false(combo_box.is_handle_created());
      assert::is_zero(combo_box.left());
      assert::are_equal(drawing::point::empty, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_zero(combo_box.native_handle());
      assert::is_empty(combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::is_null(combo_box.parent());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::are_equal("Item3", combo_box.text());
      assert::is_zero(combo_box.toolkit_handle());
      assert::is_zero(combo_box.top());
      assert::is_null(combo_box.top_level_control());
      assert::is_true(combo_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::are_equal({"Item1", "Item2", "Item3"}, combo_box.items());
      assert::are_equal(2u, combo_box.selected_index());
      assert::are_equal("Item3", combo_box.selected_item().value());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create_with_items_selected_index_and_location) {
      auto combo_box = forms::combo_box::create({"Item1", "Item2", "Item3"}, 2, {10, 20});
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_false(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_zero(combo_box.handle());
      assert::is_false(combo_box.invoke_required());
      assert::is_false(combo_box.is_handle_created());
      assert::are_equal(10, combo_box.left());
      assert::are_equal(drawing::point {10, 20}, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_zero(combo_box.native_handle());
      assert::is_empty(combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::is_null(combo_box.parent());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::are_equal("Item3", combo_box.text());
      assert::is_zero(combo_box.toolkit_handle());
      assert::are_equal(20, combo_box.top());
      assert::is_null(combo_box.top_level_control());
      assert::is_true(combo_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::are_equal({"Item1", "Item2", "Item3"}, combo_box.items());
      assert::are_equal(2u, combo_box.selected_index());
      assert::are_equal("Item3", combo_box.selected_item().value());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create_with_items_selected_index_location_and_size) {
      auto combo_box = forms::combo_box::create({"Item1", "Item2", "Item3"}, 2, {10, 20}, {30, 40});
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_false(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_zero(combo_box.handle());
      assert::are_equal(40, combo_box.height());
      assert::is_false(combo_box.invoke_required());
      assert::is_false(combo_box.is_handle_created());
      assert::are_equal(10, combo_box.left());
      assert::are_equal(drawing::point {10, 20}, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_zero(combo_box.native_handle());
      assert::is_empty(combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::is_null(combo_box.parent());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, combo_box.size());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::are_equal("Item3", combo_box.text());
      assert::is_zero(combo_box.toolkit_handle());
      assert::are_equal(20, combo_box.top());
      assert::is_null(combo_box.top_level_control());
      assert::is_true(combo_box.visible());
      assert::are_equal(30, combo_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::are_equal({"Item1", "Item2", "Item3"}, combo_box.items());
      assert::are_equal(2u, combo_box.selected_index());
      assert::are_equal("Item3", combo_box.selected_item().value());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create_with_items_selected_index_location_size_and_name) {
      auto combo_box = forms::combo_box::create({"Item1", "Item2", "Item3"}, 2, {10, 20}, {30, 40}, "combo_box");
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_false(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_zero(combo_box.handle());
      assert::are_equal(40, combo_box.height());
      assert::is_false(combo_box.invoke_required());
      assert::is_false(combo_box.is_handle_created());
      assert::are_equal(10, combo_box.left());
      assert::are_equal(drawing::point {10, 20}, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_zero(combo_box.native_handle());
      assert::are_equal("combo_box", combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::is_null(combo_box.parent());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, combo_box.size());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::are_equal("Item3", combo_box.text());
      assert::is_zero(combo_box.toolkit_handle());
      assert::are_equal(20, combo_box.top());
      assert::is_null(combo_box.top_level_control());
      assert::is_true(combo_box.visible());
      assert::are_equal(30, combo_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::are_equal({"Item1", "Item2", "Item3"}, combo_box.items());
      assert::are_equal(2u, combo_box.selected_index());
      assert::are_equal("Item3", combo_box.selected_item().value());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create_with_parent) {
      auto form = forms::form::create();
      auto combo_box = forms::combo_box::create(form);
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_true(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_not_zero(combo_box.handle());
      assert::is_false(combo_box.invoke_required());
      assert::is_true(combo_box.is_handle_created());
      assert::is_zero(combo_box.left());
      assert::are_equal(drawing::point::empty, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_not_zero(combo_box.native_handle());
      assert::is_empty(combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::are_same(form, combo_box.parent().value().get());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::is_empty(combo_box.text());
      assert::is_not_zero(combo_box.toolkit_handle());
      assert::is_zero(combo_box.top());
      assert::are_same(form, combo_box.top_level_control().value().get());
      assert::is_true(combo_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::is_empty(combo_box.items());
      assert::are_equal(combo_box::object_collection::npos, combo_box.selected_index());
      assert::are_equal(combo_box::item::empty, combo_box.selected_item());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create_with_parent_and_items) {
      auto form = forms::form::create();
      auto combo_box = forms::combo_box::create(form, {"Item1", "Item2", "Item3"});
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_true(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_not_zero(combo_box.handle());
      assert::is_false(combo_box.invoke_required());
      assert::is_true(combo_box.is_handle_created());
      assert::is_zero(combo_box.left());
      assert::are_equal(drawing::point::empty, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_not_zero(combo_box.native_handle());
      assert::is_empty(combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::are_same(form, combo_box.parent().value().get());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::is_empty(combo_box.text());
      assert::is_not_zero(combo_box.toolkit_handle());
      assert::is_zero(combo_box.top());
      assert::are_same(form, combo_box.top_level_control().value().get());
      assert::is_true(combo_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::are_equal({"Item1", "Item2", "Item3"}, combo_box.items());
      assert::are_equal(combo_box::object_collection::npos, combo_box.selected_index());
      assert::are_equal(combo_box::item::empty, combo_box.selected_item());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create_with_parent_items_and_selected_index) {
      auto form = forms::form::create();
      auto combo_box = forms::combo_box::create(form, {"Item1", "Item2", "Item3"}, 2);
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_true(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_not_zero(combo_box.handle());
      assert::is_false(combo_box.invoke_required());
      assert::is_true(combo_box.is_handle_created());
      assert::is_zero(combo_box.left());
      assert::are_equal(drawing::point::empty, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_not_zero(combo_box.native_handle());
      assert::is_empty(combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::are_same(form, combo_box.parent().value().get());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::are_equal("Item3", combo_box.text());
      assert::is_not_zero(combo_box.toolkit_handle());
      assert::is_zero(combo_box.top());
      assert::are_same(form, combo_box.top_level_control().value().get());
      assert::is_true(combo_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::are_equal({"Item1", "Item2", "Item3"}, combo_box.items());
      assert::are_equal(2u, combo_box.selected_index());
      assert::are_equal("Item3", combo_box.selected_item().value());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create_with_parent_items_selected_index_and_location) {
      auto form = forms::form::create();
      auto combo_box = forms::combo_box::create(form, {"Item1", "Item2", "Item3"}, 2, {10, 20});
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_true(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_not_zero(combo_box.handle());
      assert::is_false(combo_box.invoke_required());
      assert::is_true(combo_box.is_handle_created());
      assert::are_equal(10, combo_box.left());
      assert::are_equal(drawing::point {10, 20}, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_not_zero(combo_box.native_handle());
      assert::is_empty(combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::are_same(form, combo_box.parent().value().get());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::are_equal("Item3", combo_box.text());
      assert::is_not_zero(combo_box.toolkit_handle());
      assert::are_equal(20, combo_box.top());
      assert::are_same(form, combo_box.top_level_control().value().get());
      assert::is_true(combo_box.visible());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::are_equal({"Item1", "Item2", "Item3"}, combo_box.items());
      assert::are_equal(2u, combo_box.selected_index());
      assert::are_equal("Item3", combo_box.selected_item().value());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create_with_parent_items_selected_index_location_and_size) {
      auto form = forms::form::create();
      auto combo_box = forms::combo_box::create(form, {"Item1", "Item2", "Item3"}, 2, {10, 20}, {30, 40});
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_true(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_not_zero(combo_box.handle());
      assert::are_equal(40, combo_box.height());
      assert::is_false(combo_box.invoke_required());
      assert::is_true(combo_box.is_handle_created());
      assert::are_equal(10, combo_box.left());
      assert::are_equal(drawing::point {10, 20}, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_not_zero(combo_box.native_handle());
      assert::is_empty(combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::are_same(form, combo_box.parent().value().get());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, combo_box.size());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::are_equal("Item3", combo_box.text());
      assert::is_not_zero(combo_box.toolkit_handle());
      assert::are_equal(20, combo_box.top());
      assert::are_same(form, combo_box.top_level_control().value().get());
      assert::is_true(combo_box.visible());
      assert::are_equal(30, combo_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::are_equal({"Item1", "Item2", "Item3"}, combo_box.items());
      assert::are_equal(2u, combo_box.selected_index());
      assert::are_equal("Item3", combo_box.selected_item().value());
      assert::is_false(combo_box.sorted());
    }
    
    void test_method_(create_with_parent_items_selected_index_location_size_and_name) {
      auto form = forms::form::create();
      auto combo_box = forms::combo_box::create(form, {"Item1", "Item2", "Item3"}, 2, {10, 20}, {30, 40}, "combo_box");
      assert::are_equal(anchor_styles::left | anchor_styles::top, combo_box.anchor());
      assert::are_equal(drawing::point::empty, combo_box.auto_scroll_point());
      assert::is_false(combo_box.auto_size());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window(), combo_box.back_color());
      assert::are_equal(drawing::image::empty, combo_box.background_image());
      assert::are_equal(image_layout::tile, combo_box.background_image_layout());
      assert::is_false(combo_box.can_focus());
      assert::is_true(combo_box.can_raise_events());
      assert::is_true(combo_box.can_select());
      assert::are_equal("Gammasoft", combo_box.company_name());
      assert::is_null(combo_box.context_menu());
      assert::are_equal(forms::control_appearance::system, combo_box.control_appearance());
      assert::is_empty(combo_box.controls());
      assert::is_true(combo_box.created());
      assert::are_equal(forms::cursors::default_cursor(), combo_box.cursor());
      assert::are_equal(forms::dock_style::none, combo_box.dock());
      assert::is_false(combo_box.double_buffered());
      assert::is_true(combo_box.enabled());
      assert::is_false(combo_box.focused());
      assert::are_equal(drawing::system_fonts::default_font(), combo_box.font());
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().window_text(), combo_box.fore_color());
      assert::is_not_zero(combo_box.handle());
      assert::are_equal(40, combo_box.height());
      assert::is_false(combo_box.invoke_required());
      assert::is_true(combo_box.is_handle_created());
      assert::are_equal(10, combo_box.left());
      assert::are_equal(drawing::point {10, 20}, combo_box.location());
      assert::are_equal(forms::padding(3), combo_box.margin());
      assert::are_equal(drawing::size::empty, combo_box.maximum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.maximum_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_client_size());
      assert::are_equal(drawing::size::empty, combo_box.minimum_size());
      assert::is_not_zero(combo_box.native_handle());
      assert::are_equal("combo_box", combo_box.name());
      assert::are_equal(forms::padding(0), combo_box.padding());
      assert::are_same(form, combo_box.parent().value().get());
      assert::are_equal("xtd", combo_box.product_name());
      assert::is_not_zero(combo_box.region().handle());
      assert::are_equal(drawing::size {30, 40}, combo_box.size());
      assert::is_empty(combo_box.style_sheet().theme().name());
      assert::is_true(combo_box.tab_stop());
      assert::is_false(combo_box.tag().has_value());
      assert::are_equal("Item3", combo_box.text());
      assert::is_not_zero(combo_box.toolkit_handle());
      assert::are_equal(20, combo_box.top());
      assert::are_same(form, combo_box.top_level_control().value().get());
      assert::is_true(combo_box.visible());
      assert::are_equal(30, combo_box.width());
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls());
      assert::are_equal(keys::none, forms::control::modifier_keys());
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons());
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position());
      
      assert::is_false(combo_box.dropped_down());
      assert::are_equal(combo_box_style::drop_down, combo_box.drop_down_style());
      collection_assert::are_equal({"Item1", "Item2", "Item3"}, combo_box.items());
      assert::are_equal(2u, combo_box.selected_index());
      assert::are_equal("Item3", combo_box.selected_item().value());
      assert::is_false(combo_box.sorted());
    }
  };
}
